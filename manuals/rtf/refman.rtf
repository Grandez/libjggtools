{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Tools for C/C++  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
0.2.3 \par
}}Tools  for C/C++}
{\comment Generado por doxygen1.9.2.}
{\creatim \yr2021\mo11\dy20\hr13\min12\sec59}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Tools for C/C++}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Versi\'F3n 0.2.3\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt S\'E1bado, 20 de Noviembre de 2021 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Tabla de contenidos\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Indice de m\'F3dulos\par \pard\plain 
{\tc \v Indice de m\'F3dulos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
M\'F3dulos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos los m\'F3dulos:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Cadenas\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Fechas y horas\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Number\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Exceptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Indice jer\'E1rquico\par \pard\plain 
{\tc \v Indice jer\'E1rquico}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Jerarqu\'EDa de la clase\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta lista de herencias esta ordenada aproximadamente por orden alfab\'E9tico:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
CmdLine\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Date\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DateTime\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Timestamp\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
DateTimeBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Decimal\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
default_copier< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
default_deleter< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
domain_error
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ToolsException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ToolsCastException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ToolsValueException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
unique_impl_ptr< T, Deleter >::dummy_t_\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
hash< spimpl ::impl_ptr< T, D, C > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
hash< spimpl ::unique_impl_ptr< T, D > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Integer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
integral_constant
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
is_default_manageable< T, D, C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
is_default_manageable< T, D, C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
is_default_manageable< T, D, C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
is_default_manageable< T, D, C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Natural\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Path\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Real\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
string
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
sstring\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
sstring\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Time\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
unique_impl_ptr< T, Deleter >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
unique_impl_ptr< T, details::default_deleter_t< T > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUL \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
impl_ptr< T, Deleter, Copier >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
impl_ptr< T, Deleter, Copier >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
impl_ptr< T, Deleter, Copier >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
impl_ptr< T, Deleter, Copier >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice de clases\par \pard\plain 
{\tc \v \'CDndice de clases}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de clases\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de las clases, estructuras, uniones e interfaces con una breve descripci\'F3n:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBO" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Singleton encargado de mantener la informacion pasada por la linea de comandos })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}} numbers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 default_copier< T >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATK" }{}}{\fldrslt {\cs37\ul\cf2 default_deleter< T >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr< T, Deleter >::dummy_t_}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNA" }{}}{\fldrslt {\cs37\ul\cf2 hash< spimpl ::impl_ptr< T, D, C > >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMN" }{}}{\fldrslt {\cs37\ul\cf2 hash< spimpl ::unique_impl_ptr< T, D > >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr< T, Deleter, Copier >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} numbers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable< T, D, C >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}} numbers })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subclsase de string con metoos auxiliares })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 ToolsCastException}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when it is not possible construct the object using data passed to constructor })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Base clase for exception into the library })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
 ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when data not fit the range of values })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr< T, Deleter >}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Indice de archivos\par \pard\plain 
{\tc \v Indice de archivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de archivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos los archivos documentados y con descripciones breves:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAA" }{}}{\fldrslt {\cs37\ul\cf2 config.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 date.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 datetime.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 decimal.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKF" }{}}{\fldrslt {\cs37\ul\cf2 jggtools.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAKM" }{}}{\fldrslt {\cs37\ul\cf2 libconfig.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAALE" }{}}{\fldrslt {\cs37\ul\cf2 msg_locale.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 path.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIS" }{}}{\fldrslt {\cs37\ul\cf2 time.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/include/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJV" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAELA" }{}}{\fldrslt {\cs37\ul\cf2 date.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAELA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAENB" }{}}{\fldrslt {\cs37\ul\cf2 datetime.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAENB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAESK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFKV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNM" }{}}{\fldrslt {\cs37\ul\cf2 real.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFNM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b code/src/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYJ" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAS" }{}}{\fldrslt {\cs37\ul\cf2 config.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFCZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFCZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZW" }{}}{\fldrslt {\cs37\ul\cf2 filesystem.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFZW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZX" }{}}{\fldrslt {\cs37\ul\cf2 filesystem.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZY" }{}}{\fldrslt {\cs37\ul\cf2 simpl.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFZY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFTR" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAFTR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b old/{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBA" }{}}{\fldrslt {\cs37\ul\cf2 strings.h}}}
 } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAGBA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentaci\'F3n de m\'F3dulos{\tc \v Documentaci\'F3n de m\'F3dulos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Cadenas\par \pard\plain 
{\tc\tcl2 \v Cadenas}
{\xe \v Cadenas}
{\bkmkstart AAAAAAAGBK}
{\bkmkend AAAAAAAGBK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Clases\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subclsase de string con metoos auxiliares. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classes related to strings \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fechas y horas\par \pard\plain 
{\tc\tcl2 \v Fechas y horas}
{\xe \v Fechas y horas}
{\bkmkstart AAAAAAAGBL}
{\bkmkend AAAAAAAGBL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Clases\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classes related to date and times \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Number\par \pard\plain 
{\tc\tcl2 \v Number}
{\xe \v Number}
{\bkmkstart AAAAAAAGBM}
{\bkmkend AAAAAAAGBM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Clases\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}} numbers. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} numbers. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}} numbers. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classes related to numbers \par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Exceptions\par \pard\plain 
{\tc\tcl2 \v Exceptions}
{\xe \v Exceptions}
{\bkmkstart AAAAAAAGBN}
{\bkmkend AAAAAAAGBN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Clases\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Base clase for exception into the library. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exceptions throwed\par
Main target of these tools is check when some string can be casted to another type. In exmple, trying to construct a date from "2020/02/31" must thrown an exception because february has not 31 days \par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentaci\'F3n de las clases{\tc \v Documentaci\'F3n de las clases}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase CmdLine\par \pard\plain 
{\tc\tcl2 \v CmdLine}
{\xe \v CmdLine}
{\bkmkstart AAAAAAAGBO}
{\bkmkend AAAAAAAGBO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Singleton encargado de mantener la informacion pasada por la linea de comandos. }}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Singleton encargado de mantener la informacion pasada por la linea de comandos. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Aqui ponemos mas cosas \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Date\par \pard\plain 
{\tc\tcl2 \v Date}
{\xe \v Date}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Date} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str, int fmt=-1){\bkmkstart AAAAAAAGBP}
{\bkmkend AAAAAAAGBP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Date} (const char *str, int fmt=-1){\bkmkstart AAAAAAAGBQ}
{\bkmkend AAAAAAAGBQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct tm * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 getTM}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pointer to an struct tm when date pieces are associated with the object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 getYear}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns year associated with the object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 getMonth}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns month associated with the object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 getDay}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns Day associated with the object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 (const char *fmt="%F")\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}} as String. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
 (const char *fmt="%F")\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a char array representign the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Abstrae el concepto de fecha\par
Metodos**\par
int getMonth ();\par
int getDay ();\par
sstring toString (const char *fmt = "%F");\par
const char * toChar (const char *fmt = "%F"); \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBR" }{}}{\fldrslt {\cs37\ul\cf2 13}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABK" }{}}{\fldrslt {\cs37\ul\cf2 date.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v getDay\:Date}
{\xe \v Date\:getDay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getDay ()}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns Day associated with the object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Day \par
}}}}
{\xe \v getMonth\:Date}
{\xe \v Date\:getMonth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getMonth ()}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns month associated with the object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Month \par
}}}}
{\xe \v getTM\:Date}
{\xe \v Date\:getTM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int struct tm * getTM ()}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pointer to an struct tm when date pieces are associated with the object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Other fields at struct can be associated with current date time\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a poinetr to struct tm \par
}}}}
{\xe \v getYear\:Date}
{\xe \v Date\:getYear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getYear ()}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns year associated with the object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Year \par
}}}}
{\xe \v toChar\:Date}
{\xe \v Date\:toChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * toChar (const char *  {\i fmt} = {\f2 "%F"})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a char array representign the {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\\fmt[in] Format of string. By default: Current locale \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b new copy}  of array \par
}}}}
{\xe \v toString\:Date}
{\xe \v Date\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString (const char *  {\i fmt} = {\f2 "%F"})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}} as String. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\\fmt[in] Format of string. By default: Current locale \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
An string with the date \par
}}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase DateTime\par \pard\plain 
{\tc\tcl2 \v DateTime}
{\xe \v DateTime}
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}. }}\par
Diagrama de herencias de DateTime{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d4/dd0/classjggtools_1_1_date_time__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor from an string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DateTime} (const char *str){\bkmkstart AAAAAAAGBS}
{\bkmkend AAAAAAAGBS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} as Y/m/D H:M:S. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} as Y/m/D H:M:S. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Abstrae el concepto de fecha y hora {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} is an dat structure with one of following formats:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"%Y/%m/%d %H:%M:%S"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"%Y/%m/%d-%H:%M:%S"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"%Y-%m-%d-%H:%M:%S" \par}
\par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBT" }{}}{\fldrslt {\cs37\ul\cf2 7}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACZ" }{}}{\fldrslt {\cs37\ul\cf2 datetime.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v DateTime\:DateTime}
{\xe \v DateTime\:DateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 ()}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the instance to current date time \par
}}
{\xe \v DateTime\:DateTime}
{\xe \v DateTime\:DateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i str})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor from an string. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E1metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i str} \cell }{An string according one of allowed formats \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v toChar\:DateTime}
{\xe \v DateTime\:toChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * toChar ()}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} as Y/m/D H:M:S. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b new copy}  as Y/m/D H:M:S \par
}}}}
{\xe \v toString\:DateTime}
{\xe \v DateTime\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString ()}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}} as Y/m/D H:M:S. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
An string as Y/m/D H:M:S \par
}}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase DateTimeBase\par \pard\plain 
{\tc\tcl2 \v DateTimeBase}
{\xe \v DateTimeBase}
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct tm * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBU" }{}}{\fldrslt {\cs37\ul\cf2 getTM}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBV" }{}}{\fldrslt {\cs37\ul\cf2 validateDate}}}
 (const char *str, int fmt=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBW" }{}}{\fldrslt {\cs37\ul\cf2 validateTime}}}
 (const char *str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBX" }{}}{\fldrslt {\cs37\ul\cf2 isLeap}}}
 (int year)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBY" }{}}{\fldrslt {\cs37\ul\cf2 format}}}
 (const char *fmt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGBZ" }{}}{\fldrslt {\cs37\ul\cf2 setTM}}}
 (struct tm *ptm)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCA" }{}}{\fldrslt {\cs37\ul\cf2 7}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v DateTimeBase\:DateTimeBase}
{\xe \v DateTimeBase\:DateTimeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 ()}}
\par
{\bkmkstart AAAAAAAGCB}
{\bkmkend AAAAAAAGCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCC" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v format\:DateTimeBase}
{\xe \v DateTimeBase\:format}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 format (const char *  {\i fmt})}}
\par
{\bkmkstart AAAAAAAGBY}
{\bkmkend AAAAAAAGBY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCD" }{}}{\fldrslt {\cs37\ul\cf2 82}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\xe \v getTM\:DateTimeBase}
{\xe \v DateTimeBase\:getTM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct tm * getTM ()}}
\par
{\bkmkstart AAAAAAAGBU}
{\bkmkend AAAAAAAGBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCE" }{}}{\fldrslt {\cs37\ul\cf2 24}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\xe \v isLeap\:DateTimeBase}
{\xe \v DateTimeBase\:isLeap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isLeap (int  {\i year})}}
\par
{\bkmkstart AAAAAAAGBX}
{\bkmkend AAAAAAAGBX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCF" }{}}{\fldrslt {\cs37\ul\cf2 47}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\xe \v setTM\:DateTimeBase}
{\xe \v DateTimeBase\:setTM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 & setTM (struct tm *  {\i ptm})}}
\par
{\bkmkstart AAAAAAAGBZ}
{\bkmkend AAAAAAAGBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCG" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\xe \v validateDate\:DateTimeBase}
{\xe \v DateTimeBase\:validateDate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void validateDate (const char *  {\i str}, int  {\i fmt} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAAGBV}
{\bkmkend AAAAAAAGBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCH" }{}}{\fldrslt {\cs37\ul\cf2 25}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
{\xe \v validateTime\:DateTimeBase}
{\xe \v DateTimeBase\:validateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void validateTime (const char *  {\i str})}}
\par
{\bkmkstart AAAAAAAGBW}
{\bkmkend AAAAAAAGBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCI" }{}}{\fldrslt {\cs37\ul\cf2 62}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEOY" }{}}{\fldrslt {\cs37\ul\cf2 datetimebase.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Decimal\par \pard\plain 
{\tc\tcl2 \v Decimal}
{\xe \v Decimal}
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}} numbers. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCK" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCL" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (float value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCM" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCN" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCO" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCP" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCQ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long long value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCR" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCS" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCT" }{}}{\fldrslt {\cs37\ul\cf2 toStringRounded}}}
 (int scale=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCU" }{}}{\fldrslt {\cs37\ul\cf2 toCharRounded}}}
 (int scale=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCV" }{}}{\fldrslt {\cs37\ul\cf2 toFloat}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCW" }{}}{\fldrslt {\cs37\ul\cf2 toDouble}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long double {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCX" }{}}{\fldrslt {\cs37\ul\cf2 toLongDouble}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCY" }{}}{\fldrslt {\cs37\ul\cf2 toFloor}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGCZ" }{}}{\fldrslt {\cs37\ul\cf2 toCeil}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDA" }{}}{\fldrslt {\cs37\ul\cf2 round}}}
 (int scale=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDB" }{}}{\fldrslt {\cs37\ul\cf2 operator+}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDC" }{}}{\fldrslt {\cs37\ul\cf2 operator-}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDD" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDE" }{}}{\fldrslt {\cs37\ul\cf2 operator/}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDF" }{}}{\fldrslt {\cs37\ul\cf2 operator+=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDG" }{}}{\fldrslt {\cs37\ul\cf2 operator-=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDH" }{}}{\fldrslt {\cs37\ul\cf2 operator*=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDI" }{}}{\fldrslt {\cs37\ul\cf2 operator/=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDJ" }{}}{\fldrslt {\cs37\ul\cf2 operator==}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDK" }{}}{\fldrslt {\cs37\ul\cf2 operator!=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDL" }{}}{\fldrslt {\cs37\ul\cf2 operator<}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDM" }{}}{\fldrslt {\cs37\ul\cf2 operator<=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDN" }{}}{\fldrslt {\cs37\ul\cf2 operator>}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDO" }{}}{\fldrslt {\cs37\ul\cf2 operator>=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}} numbers. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}} number is {\b NOT}  a float. Is a number with an integer part and an fractional/decimal part \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDP" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 decimal.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGCJ}
{\bkmkend AAAAAAAGCJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDQ" }{}}{\fldrslt {\cs37\ul\cf2 12}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEZ" }{}}{\fldrslt {\cs37\ul\cf2 decimal.hpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAGCK}
{\bkmkend AAAAAAAGCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDR" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (float  {\i value})}}
\par
{\bkmkstart AAAAAAAGCL}
{\bkmkend AAAAAAAGCL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDS" }{}}{\fldrslt {\cs37\ul\cf2 30}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (double  {\i value})}}
\par
{\bkmkstart AAAAAAAGCM}
{\bkmkend AAAAAAAGCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDT" }{}}{\fldrslt {\cs37\ul\cf2 34}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long double  {\i value})}}
\par
{\bkmkstart AAAAAAAGCN}
{\bkmkend AAAAAAAGCN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDU" }{}}{\fldrslt {\cs37\ul\cf2 38}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (int  {\i value})}}
\par
{\bkmkstart AAAAAAAGCO}
{\bkmkend AAAAAAAGCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDV" }{}}{\fldrslt {\cs37\ul\cf2 42}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long  {\i value})}}
\par
{\bkmkstart AAAAAAAGCP}
{\bkmkend AAAAAAAGCP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDW" }{}}{\fldrslt {\cs37\ul\cf2 44}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v Decimal\:Decimal}
{\xe \v Decimal\:Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 (long long  {\i value})}}
\par
{\bkmkstart AAAAAAAGCQ}
{\bkmkend AAAAAAAGCQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDX" }{}}{\fldrslt {\cs37\ul\cf2 46}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v operator!=\:Decimal}
{\xe \v Decimal\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator!= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDK}
{\bkmkend AAAAAAAGDK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDY" }{}}{\fldrslt {\cs37\ul\cf2 135}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator*\:Decimal}
{\xe \v Decimal\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator* (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDD}
{\bkmkend AAAAAAAGDD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGDZ" }{}}{\fldrslt {\cs37\ul\cf2 116}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator*=\:Decimal}
{\xe \v Decimal\:operator*=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator*= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDH}
{\bkmkend AAAAAAAGDH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEA" }{}}{\fldrslt {\cs37\ul\cf2 117}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator+\:Decimal}
{\xe \v Decimal\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator+ (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDB}
{\bkmkend AAAAAAAGDB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEB" }{}}{\fldrslt {\cs37\ul\cf2 102}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator+=\:Decimal}
{\xe \v Decimal\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator+= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDF}
{\bkmkend AAAAAAAGDF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEC" }{}}{\fldrslt {\cs37\ul\cf2 103}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator-\:Decimal}
{\xe \v Decimal\:operator-}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator- (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDC}
{\bkmkend AAAAAAAGDC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGED" }{}}{\fldrslt {\cs37\ul\cf2 109}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator-=\:Decimal}
{\xe \v Decimal\:operator-=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator-= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDG}
{\bkmkend AAAAAAAGDG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEE" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator/\:Decimal}
{\xe \v Decimal\:operator/}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator/ (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDE}
{\bkmkend AAAAAAAGDE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEF" }{}}{\fldrslt {\cs37\ul\cf2 123}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator/=\:Decimal}
{\xe \v Decimal\:operator/=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator/= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDI}
{\bkmkend AAAAAAAGDI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEG" }{}}{\fldrslt {\cs37\ul\cf2 124}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator<\:Decimal}
{\xe \v Decimal\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator< (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDL}
{\bkmkend AAAAAAAGDL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEH" }{}}{\fldrslt {\cs37\ul\cf2 140}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator<=\:Decimal}
{\xe \v Decimal\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator<= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDM}
{\bkmkend AAAAAAAGDM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEI" }{}}{\fldrslt {\cs37\ul\cf2 145}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator==\:Decimal}
{\xe \v Decimal\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator== (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDJ}
{\bkmkend AAAAAAAGDJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEJ" }{}}{\fldrslt {\cs37\ul\cf2 130}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator>\:Decimal}
{\xe \v Decimal\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator> (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDN}
{\bkmkend AAAAAAAGDN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEK" }{}}{\fldrslt {\cs37\ul\cf2 150}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v operator>=\:Decimal}
{\xe \v Decimal\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool operator>= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 &  {\i b})}}
\par
{\bkmkstart AAAAAAAGDO}
{\bkmkend AAAAAAAGDO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEL" }{}}{\fldrslt {\cs37\ul\cf2 155}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v round\:Decimal}
{\xe \v Decimal\:round}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 round (int  {\i scale} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAGDA}
{\bkmkend AAAAAAAGDA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEM" }{}}{\fldrslt {\cs37\ul\cf2 93}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toCeil\:Decimal}
{\xe \v Decimal\:toCeil}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long toCeil ()}}
\par
{\bkmkstart AAAAAAAGCZ}
{\bkmkend AAAAAAAGCZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEN" }{}}{\fldrslt {\cs37\ul\cf2 90}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toChar\:Decimal}
{\xe \v Decimal\:toChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * toChar ()}}
\par
{\bkmkstart AAAAAAAGCS}
{\bkmkend AAAAAAAGCS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEO" }{}}{\fldrslt {\cs37\ul\cf2 64}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toCharRounded\:Decimal}
{\xe \v Decimal\:toCharRounded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * toCharRounded (int  {\i scale} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAGCU}
{\bkmkend AAAAAAAGCU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEP" }{}}{\fldrslt {\cs37\ul\cf2 71}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toDouble\:Decimal}
{\xe \v Decimal\:toDouble}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double toDouble ()}}
\par
{\bkmkstart AAAAAAAGCW}
{\bkmkend AAAAAAAGCW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEQ" }{}}{\fldrslt {\cs37\ul\cf2 78}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toFloat\:Decimal}
{\xe \v Decimal\:toFloat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float toFloat ()}}
\par
{\bkmkstart AAAAAAAGCV}
{\bkmkend AAAAAAAGCV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGER" }{}}{\fldrslt {\cs37\ul\cf2 74}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toFloor\:Decimal}
{\xe \v Decimal\:toFloor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long toFloor ()}}
\par
{\bkmkstart AAAAAAAGCY}
{\bkmkend AAAAAAAGCY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGES" }{}}{\fldrslt {\cs37\ul\cf2 86}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toLongDouble\:Decimal}
{\xe \v Decimal\:toLongDouble}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long double toLongDouble ()}}
\par
{\bkmkstart AAAAAAAGCX}
{\bkmkend AAAAAAAGCX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGET" }{}}{\fldrslt {\cs37\ul\cf2 82}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toString\:Decimal}
{\xe \v Decimal\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString ()}}
\par
{\bkmkstart AAAAAAAGCR}
{\bkmkend AAAAAAAGCR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEU" }{}}{\fldrslt {\cs37\ul\cf2 53}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
{\xe \v toStringRounded\:Decimal}
{\xe \v Decimal\:toStringRounded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toStringRounded (int  {\i scale} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAGCT}
{\bkmkend AAAAAAAGCT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEV" }{}}{\fldrslt {\cs37\ul\cf2 67}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAESK" }{}}{\fldrslt {\cs37\ul\cf2 decimal.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Estructura default_copier< T >\par \pard\plain 
{\tc\tcl2 \v default_copier< T >}
{\xe \v default_copier< T >}
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVT" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = T *(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVT" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = T *(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVT" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = T *(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVT" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = T *(*)(T *)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
struct spimpl::details::default_copier< T >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVU" }{}}{\fldrslt {\cs37\ul\cf2 86}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v type\:default_copier< T >}
{\xe \v default_copier< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  T* (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVT}
{\bkmkend AAAAAAAGVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVV" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v type\:default_copier< T >}
{\xe \v default_copier< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  T* (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVT}
{\bkmkend AAAAAAAGVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVW" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v type\:default_copier< T >}
{\xe \v default_copier< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  T* (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVT}
{\bkmkend AAAAAAAGVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVX" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v type\:default_copier< T >}
{\xe \v default_copier< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  T* (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVT}
{\bkmkend AAAAAAAGVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVY" }{}}{\fldrslt {\cs37\ul\cf2 87}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Estructura default_deleter< T >\par \pard\plain 
{\tc\tcl2 \v default_deleter< T >}
{\xe \v default_deleter< T >}
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = void(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = void(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = void(*)(T *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
 = void(*)(T *)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
struct spimpl::details::default_deleter< T >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWA" }{}}{\fldrslt {\cs37\ul\cf2 78}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v type\:default_deleter< T >}
{\xe \v default_deleter< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  void (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVZ}
{\bkmkend AAAAAAAGVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWB" }{}}{\fldrslt {\cs37\ul\cf2 79}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v type\:default_deleter< T >}
{\xe \v default_deleter< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  void (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVZ}
{\bkmkend AAAAAAAGVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWC" }{}}{\fldrslt {\cs37\ul\cf2 79}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v type\:default_deleter< T >}
{\xe \v default_deleter< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  void (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVZ}
{\bkmkend AAAAAAAGVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWD" }{}}{\fldrslt {\cs37\ul\cf2 79}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v type\:default_deleter< T >}
{\xe \v default_deleter< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using type =  void (*)(T*)}}
\par
{\bkmkstart AAAAAAAGVZ}
{\bkmkend AAAAAAAGVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWE" }{}}{\fldrslt {\cs37\ul\cf2 79}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Estructura unique_impl_ptr< T, Deleter >::dummy_t_\par \pard\plain 
{\tc\tcl2 \v unique_impl_ptr< T, Deleter >::dummy_t_}
{\xe \v unique_impl_ptr< T, Deleter >::dummy_t_}
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVR" }{}}{\fldrslt {\cs37\ul\cf2 dummy__}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class Deleter = details::default_deleter_t<T>>\par
struct spimpl::unique_impl_ptr< T, Deleter >::dummy_t_\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVS" }{}}{\fldrslt {\cs37\ul\cf2 106}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los datos miembro\par
\pard\plain 
{\xe \v dummy__\:unique_impl_ptr< T, Deleter >::dummy_t_}
{\xe \v unique_impl_ptr< T, Deleter >::dummy_t_\:dummy__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dummy__}}
\par
{\bkmkstart AAAAAAAGVR}
{\bkmkend AAAAAAAGVR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVS" }{}}{\fldrslt {\cs37\ul\cf2 106}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Estructura hash< spimpl ::impl_ptr< T, D, C > >\par \pard\plain 
{\tc\tcl2 \v hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >}
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWG" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
< T, D, C >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWH" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWG" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
< T, D, C >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWH" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWG" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
< T, D, C >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWH" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWG" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
< T, D, C >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWH" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWI" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWI" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWI" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWI" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class D, class C>\par
struct std::hash< spimpl ::impl_ptr< T, D, C > >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWJ" }{}}{\fldrslt {\cs37\ul\cf2 581}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v argument_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
<T, D, C>}}
\par
{\bkmkstart AAAAAAAGWG}
{\bkmkend AAAAAAAGWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWK" }{}}{\fldrslt {\cs37\ul\cf2 583}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
<T, D, C>}}
\par
{\bkmkstart AAAAAAAGWG}
{\bkmkend AAAAAAAGWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWL" }{}}{\fldrslt {\cs37\ul\cf2 583}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
<T, D, C>}}
\par
{\bkmkstart AAAAAAAGWG}
{\bkmkend AAAAAAAGWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWM" }{}}{\fldrslt {\cs37\ul\cf2 583}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr}}}
<T, D, C>}}
\par
{\bkmkstart AAAAAAAGWG}
{\bkmkend AAAAAAAGWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWN" }{}}{\fldrslt {\cs37\ul\cf2 583}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWH}
{\bkmkend AAAAAAAGWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWO" }{}}{\fldrslt {\cs37\ul\cf2 584}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWH}
{\bkmkend AAAAAAAGWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWP" }{}}{\fldrslt {\cs37\ul\cf2 584}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWH}
{\bkmkend AAAAAAAGWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWQ" }{}}{\fldrslt {\cs37\ul\cf2 584}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWH}
{\bkmkend AAAAAAAGWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWR" }{}}{\fldrslt {\cs37\ul\cf2 584}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v operator()\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWI}
{\bkmkend AAAAAAAGWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWS" }{}}{\fldrslt {\cs37\ul\cf2 586}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWI}
{\bkmkend AAAAAAAGWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWT" }{}}{\fldrslt {\cs37\ul\cf2 586}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWI}
{\bkmkend AAAAAAAGWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWU" }{}}{\fldrslt {\cs37\ul\cf2 586}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::impl_ptr< T, D, C > >}
{\xe \v hash< spimpl ::impl_ptr< T, D, C > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWI}
{\bkmkend AAAAAAAGWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWV" }{}}{\fldrslt {\cs37\ul\cf2 586}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Estructura hash< spimpl ::unique_impl_ptr< T, D > >\par \pard\plain 
{\tc\tcl2 \v hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >}
{\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWW" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
< T, D >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWX" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWW" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
< T, D >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWX" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWW" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
< T, D >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWX" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWW" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
< T, D >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWX" }{}}{\fldrslt {\cs37\ul\cf2 result_type}}}
 = size_t\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWY" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWY" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWY" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
result_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWY" }{}}{\fldrslt {\cs37\ul\cf2 operator()}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &p) const noexcept\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class D>\par
struct std::hash< spimpl ::unique_impl_ptr< T, D > >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWZ" }{}}{\fldrslt {\cs37\ul\cf2 569}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v argument_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
<T, D>}}
\par
{\bkmkstart AAAAAAAGWW}
{\bkmkend AAAAAAAGWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXA" }{}}{\fldrslt {\cs37\ul\cf2 571}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
<T, D>}}
\par
{\bkmkstart AAAAAAAGWW}
{\bkmkend AAAAAAAGWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXB" }{}}{\fldrslt {\cs37\ul\cf2 571}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
<T, D>}}
\par
{\bkmkstart AAAAAAAGWW}
{\bkmkend AAAAAAAGWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXC" }{}}{\fldrslt {\cs37\ul\cf2 571}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v argument_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:argument_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr}}}
<T, D>}}
\par
{\bkmkstart AAAAAAAGWW}
{\bkmkend AAAAAAAGWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXD" }{}}{\fldrslt {\cs37\ul\cf2 571}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWX}
{\bkmkend AAAAAAAGWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXE" }{}}{\fldrslt {\cs37\ul\cf2 572}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWX}
{\bkmkend AAAAAAAGWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXF" }{}}{\fldrslt {\cs37\ul\cf2 572}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWX}
{\bkmkend AAAAAAAGWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXG" }{}}{\fldrslt {\cs37\ul\cf2 572}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v result_type\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:result_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using result_type =  size_t}}
\par
{\bkmkstart AAAAAAAGWX}
{\bkmkend AAAAAAAGWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXH" }{}}{\fldrslt {\cs37\ul\cf2 572}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v operator()\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWY}
{\bkmkend AAAAAAAGWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXI" }{}}{\fldrslt {\cs37\ul\cf2 574}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWY}
{\bkmkend AAAAAAAGWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXJ" }{}}{\fldrslt {\cs37\ul\cf2 574}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWY}
{\bkmkend AAAAAAAGWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXK" }{}}{\fldrslt {\cs37\ul\cf2 574}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator()\:hash< spimpl ::unique_impl_ptr< T, D > >}
{\xe \v hash< spimpl ::unique_impl_ptr< T, D > >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
result_type operator() (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 &  {\i p}) const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGWY}
{\bkmkend AAAAAAAGWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGXL" }{}}{\fldrslt {\cs37\ul\cf2 574}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Clase impl_ptr< T, Deleter, Copier >\par \pard\plain 
{\tc\tcl2 \v impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >}
{\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
Diagrama de herencias de impl_ptr< T, Deleter, Copier >{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dc/d7d/classspimpl_1_1impl__ptr__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para impl_ptr< T, Deleter, Copier >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d10/classspimpl_1_1impl__ptr__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLC" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = typename base_type::pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLD" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename base_type::const_pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLE" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = typename base_type::reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLF" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename base_type::const_reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLG" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = typename base_type::element_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLH" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename base_type::deleter_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLI" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = typename base_type::unique_ptr_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLJ" }{}}{\fldrslt {\cs37\ul\cf2 copier_type}}}
 = typename std::decay< Copier >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLK" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type, copier_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLC" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = typename base_type::pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLD" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename base_type::const_pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLE" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = typename base_type::reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLF" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename base_type::const_reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLG" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = typename base_type::element_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLH" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename base_type::deleter_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLI" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = typename base_type::unique_ptr_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLJ" }{}}{\fldrslt {\cs37\ul\cf2 copier_type}}}
 = typename std::decay< Copier >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLK" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type, copier_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLC" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = typename base_type::pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLD" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename base_type::const_pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLE" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = typename base_type::reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLF" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename base_type::const_reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLG" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = typename base_type::element_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLH" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename base_type::deleter_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLI" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = typename base_type::unique_ptr_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLJ" }{}}{\fldrslt {\cs37\ul\cf2 copier_type}}}
 = typename std::decay< Copier >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLK" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type, copier_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLC" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = typename base_type::pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLD" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename base_type::const_pointer\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLE" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = typename base_type::reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLF" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename base_type::const_reference\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLG" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = typename base_type::element_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLH" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename base_type::deleter_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLI" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = typename base_type::unique_ptr_type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLJ" }{}}{\fldrslt {\cs37\ul\cf2 copier_type}}}
 = typename std::decay< Copier >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLK" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type, copier_type >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLL" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLM" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer p, D &&d, C &&c, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type=typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLN" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLO" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLP}
{\bkmkend AAAAAAAGLP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLQ" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLR" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&u, C &&c, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLS" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLT" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLU}
{\bkmkend AAAAAAAGLU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLV" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &u)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLW" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLX" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLY" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLZ" }{}}{\fldrslt {\cs37\ul\cf2 clone}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMA" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMB" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLL" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLM" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer p, D &&d, C &&c, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type=typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLN" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLO" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLP}
{\bkmkend AAAAAAAGLP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLQ" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLR" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&u, C &&c, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLS" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLT" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLU}
{\bkmkend AAAAAAAGLU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLV" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &u)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLW" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLX" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLY" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLZ" }{}}{\fldrslt {\cs37\ul\cf2 clone}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMA" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMB" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLL" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLM" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer p, D &&d, C &&c, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type=typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLN" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLO" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLP}
{\bkmkend AAAAAAAGLP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLQ" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLR" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&u, C &&c, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLS" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLT" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLU}
{\bkmkend AAAAAAAGLU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLV" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &u)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLW" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLX" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLY" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLZ" }{}}{\fldrslt {\cs37\ul\cf2 clone}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMA" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMB" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLL" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLM" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer p, D &&d, C &&c, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type=typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLN" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLO" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLP}
{\bkmkend AAAAAAAGLP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLQ" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLR" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&u, C &&c, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLS" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type=dummy_t_()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLT" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGLU}
{\bkmkend AAAAAAAGLU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLV" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &u)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLW" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D , class C > std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLX" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLY" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLZ" }{}}{\fldrslt {\cs37\ul\cf2 clone}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMA" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< copier_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMB" }{}}{\fldrslt {\cs37\ul\cf2 get_copier}}}
 () noexcept\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Otros miembros heredados\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class Deleter = details::default_deleter_t<T>, class Copier = details::default_copier_t<T>>\par
class spimpl::impl_ptr< T, Deleter, Copier >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMC" }{}}{\fldrslt {\cs37\ul\cf2 380}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v const_pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename base_type::const_pointer}}
\par
{\bkmkstart AAAAAAAGLD}
{\bkmkend AAAAAAAGLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMD" }{}}{\fldrslt {\cs37\ul\cf2 386}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v const_pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename base_type::const_pointer}}
\par
{\bkmkstart AAAAAAAGLD}
{\bkmkend AAAAAAAGLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGME" }{}}{\fldrslt {\cs37\ul\cf2 386}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v const_pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename base_type::const_pointer}}
\par
{\bkmkstart AAAAAAAGLD}
{\bkmkend AAAAAAAGLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMF" }{}}{\fldrslt {\cs37\ul\cf2 386}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v const_pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename base_type::const_pointer}}
\par
{\bkmkstart AAAAAAAGLD}
{\bkmkend AAAAAAAGLD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMG" }{}}{\fldrslt {\cs37\ul\cf2 386}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v const_reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename base_type::const_reference}}
\par
{\bkmkstart AAAAAAAGLF}
{\bkmkend AAAAAAAGLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMH" }{}}{\fldrslt {\cs37\ul\cf2 388}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v const_reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename base_type::const_reference}}
\par
{\bkmkstart AAAAAAAGLF}
{\bkmkend AAAAAAAGLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMI" }{}}{\fldrslt {\cs37\ul\cf2 388}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v const_reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename base_type::const_reference}}
\par
{\bkmkstart AAAAAAAGLF}
{\bkmkend AAAAAAAGLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMJ" }{}}{\fldrslt {\cs37\ul\cf2 388}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v const_reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename base_type::const_reference}}
\par
{\bkmkstart AAAAAAAGLF}
{\bkmkend AAAAAAAGLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMK" }{}}{\fldrslt {\cs37\ul\cf2 388}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v copier_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:copier_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using copier_type =  typename std::decay<Copier>::type}}
\par
{\bkmkstart AAAAAAAGLJ}
{\bkmkend AAAAAAAGLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGML" }{}}{\fldrslt {\cs37\ul\cf2 392}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v copier_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:copier_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using copier_type =  typename std::decay<Copier>::type}}
\par
{\bkmkstart AAAAAAAGLJ}
{\bkmkend AAAAAAAGLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMM" }{}}{\fldrslt {\cs37\ul\cf2 392}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v copier_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:copier_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using copier_type =  typename std::decay<Copier>::type}}
\par
{\bkmkstart AAAAAAAGLJ}
{\bkmkend AAAAAAAGLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMN" }{}}{\fldrslt {\cs37\ul\cf2 392}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v copier_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:copier_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using copier_type =  typename std::decay<Copier>::type}}
\par
{\bkmkstart AAAAAAAGLJ}
{\bkmkend AAAAAAAGLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMO" }{}}{\fldrslt {\cs37\ul\cf2 392}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v deleter_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename base_type::deleter_type}}
\par
{\bkmkstart AAAAAAAGLH}
{\bkmkend AAAAAAAGLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMP" }{}}{\fldrslt {\cs37\ul\cf2 390}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v deleter_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename base_type::deleter_type}}
\par
{\bkmkstart AAAAAAAGLH}
{\bkmkend AAAAAAAGLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMQ" }{}}{\fldrslt {\cs37\ul\cf2 390}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v deleter_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename base_type::deleter_type}}
\par
{\bkmkstart AAAAAAAGLH}
{\bkmkend AAAAAAAGLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMR" }{}}{\fldrslt {\cs37\ul\cf2 390}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v deleter_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename base_type::deleter_type}}
\par
{\bkmkstart AAAAAAAGLH}
{\bkmkend AAAAAAAGLH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMS" }{}}{\fldrslt {\cs37\ul\cf2 390}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v element_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  typename base_type::element_type}}
\par
{\bkmkstart AAAAAAAGLG}
{\bkmkend AAAAAAAGLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMT" }{}}{\fldrslt {\cs37\ul\cf2 389}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v element_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  typename base_type::element_type}}
\par
{\bkmkstart AAAAAAAGLG}
{\bkmkend AAAAAAAGLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMU" }{}}{\fldrslt {\cs37\ul\cf2 389}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v element_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  typename base_type::element_type}}
\par
{\bkmkstart AAAAAAAGLG}
{\bkmkend AAAAAAAGLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMV" }{}}{\fldrslt {\cs37\ul\cf2 389}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v element_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  typename base_type::element_type}}
\par
{\bkmkstart AAAAAAAGLG}
{\bkmkend AAAAAAAGLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMW" }{}}{\fldrslt {\cs37\ul\cf2 389}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type, copier_type>}}
\par
{\bkmkstart AAAAAAAGLK}
{\bkmkend AAAAAAAGLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMX" }{}}{\fldrslt {\cs37\ul\cf2 393}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type, copier_type>}}
\par
{\bkmkstart AAAAAAAGLK}
{\bkmkend AAAAAAAGLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMY" }{}}{\fldrslt {\cs37\ul\cf2 393}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type, copier_type>}}
\par
{\bkmkstart AAAAAAAGLK}
{\bkmkend AAAAAAAGLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGMZ" }{}}{\fldrslt {\cs37\ul\cf2 393}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type, copier_type>}}
\par
{\bkmkstart AAAAAAAGLK}
{\bkmkend AAAAAAAGLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNA" }{}}{\fldrslt {\cs37\ul\cf2 393}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  typename base_type::pointer}}
\par
{\bkmkstart AAAAAAAGLC}
{\bkmkend AAAAAAAGLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNB" }{}}{\fldrslt {\cs37\ul\cf2 385}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  typename base_type::pointer}}
\par
{\bkmkstart AAAAAAAGLC}
{\bkmkend AAAAAAAGLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNC" }{}}{\fldrslt {\cs37\ul\cf2 385}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  typename base_type::pointer}}
\par
{\bkmkstart AAAAAAAGLC}
{\bkmkend AAAAAAAGLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGND" }{}}{\fldrslt {\cs37\ul\cf2 385}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v pointer\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  typename base_type::pointer}}
\par
{\bkmkstart AAAAAAAGLC}
{\bkmkend AAAAAAAGLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNE" }{}}{\fldrslt {\cs37\ul\cf2 385}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  typename base_type::reference}}
\par
{\bkmkstart AAAAAAAGLE}
{\bkmkend AAAAAAAGLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNF" }{}}{\fldrslt {\cs37\ul\cf2 387}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  typename base_type::reference}}
\par
{\bkmkstart AAAAAAAGLE}
{\bkmkend AAAAAAAGLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNG" }{}}{\fldrslt {\cs37\ul\cf2 387}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  typename base_type::reference}}
\par
{\bkmkstart AAAAAAAGLE}
{\bkmkend AAAAAAAGLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNH" }{}}{\fldrslt {\cs37\ul\cf2 387}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v reference\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  typename base_type::reference}}
\par
{\bkmkstart AAAAAAAGLE}
{\bkmkend AAAAAAAGLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNI" }{}}{\fldrslt {\cs37\ul\cf2 387}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  typename base_type::unique_ptr_type}}
\par
{\bkmkstart AAAAAAAGLI}
{\bkmkend AAAAAAAGLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNJ" }{}}{\fldrslt {\cs37\ul\cf2 391}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  typename base_type::unique_ptr_type}}
\par
{\bkmkstart AAAAAAAGLI}
{\bkmkend AAAAAAAGLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNK" }{}}{\fldrslt {\cs37\ul\cf2 391}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  typename base_type::unique_ptr_type}}
\par
{\bkmkstart AAAAAAAGLI}
{\bkmkend AAAAAAAGLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNL" }{}}{\fldrslt {\cs37\ul\cf2 391}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  typename base_type::unique_ptr_type}}
\par
{\bkmkstart AAAAAAAGLI}
{\bkmkend AAAAAAAGLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNM" }{}}{\fldrslt {\cs37\ul\cf2 391}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGNN}
{\bkmkend AAAAAAAGNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNO" }{}}{\fldrslt {\cs37\ul\cf2 395}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLL}
{\bkmkend AAAAAAAGLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNP" }{}}{\fldrslt {\cs37\ul\cf2 398}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, C &&  {\i c}, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type  = {\f2 typename\~ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLM}
{\bkmkend AAAAAAAGLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNQ" }{}}{\fldrslt {\cs37\ul\cf2 402}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLN}
{\bkmkend AAAAAAAGLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNR" }{}}{\fldrslt {\cs37\ul\cf2 411}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLO}
{\bkmkend AAAAAAAGLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNS" }{}}{\fldrslt {\cs37\ul\cf2 419}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLQ}
{\bkmkend AAAAAAAGLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNT" }{}}{\fldrslt {\cs37\ul\cf2 441}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, C &&  {\i c}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLR}
{\bkmkend AAAAAAAGLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNU" }{}}{\fldrslt {\cs37\ul\cf2 450}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLS}
{\bkmkend AAAAAAAGLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNV" }{}}{\fldrslt {\cs37\ul\cf2 459}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGNN}
{\bkmkend AAAAAAAGNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNW" }{}}{\fldrslt {\cs37\ul\cf2 395}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLL}
{\bkmkend AAAAAAAGLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNX" }{}}{\fldrslt {\cs37\ul\cf2 398}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, C &&  {\i c}, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type  = {\f2 typename\~ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLM}
{\bkmkend AAAAAAAGLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNY" }{}}{\fldrslt {\cs37\ul\cf2 402}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLN}
{\bkmkend AAAAAAAGLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNZ" }{}}{\fldrslt {\cs37\ul\cf2 411}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLO}
{\bkmkend AAAAAAAGLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOA" }{}}{\fldrslt {\cs37\ul\cf2 419}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLQ}
{\bkmkend AAAAAAAGLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOB" }{}}{\fldrslt {\cs37\ul\cf2 441}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, C &&  {\i c}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLR}
{\bkmkend AAAAAAAGLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOC" }{}}{\fldrslt {\cs37\ul\cf2 450}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLS}
{\bkmkend AAAAAAAGLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOD" }{}}{\fldrslt {\cs37\ul\cf2 459}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGNN}
{\bkmkend AAAAAAAGNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOE" }{}}{\fldrslt {\cs37\ul\cf2 395}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLL}
{\bkmkend AAAAAAAGLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOF" }{}}{\fldrslt {\cs37\ul\cf2 398}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, C &&  {\i c}, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type  = {\f2 typename\~ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLM}
{\bkmkend AAAAAAAGLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOG" }{}}{\fldrslt {\cs37\ul\cf2 402}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLN}
{\bkmkend AAAAAAAGLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOH" }{}}{\fldrslt {\cs37\ul\cf2 411}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLO}
{\bkmkend AAAAAAAGLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOI" }{}}{\fldrslt {\cs37\ul\cf2 419}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLQ}
{\bkmkend AAAAAAAGLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOJ" }{}}{\fldrslt {\cs37\ul\cf2 441}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, C &&  {\i c}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLR}
{\bkmkend AAAAAAAGLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOK" }{}}{\fldrslt {\cs37\ul\cf2 450}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLS}
{\bkmkend AAAAAAAGLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOL" }{}}{\fldrslt {\cs37\ul\cf2 459}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGNN}
{\bkmkend AAAAAAAGNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOM" }{}}{\fldrslt {\cs37\ul\cf2 395}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLL}
{\bkmkend AAAAAAAGLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGON" }{}}{\fldrslt {\cs37\ul\cf2 398}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, C &&  {\i c}, typename std::enable_if< std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, typename {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
 >::type  = {\f2 typename\~ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLM}
{\bkmkend AAAAAAAGLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOO" }{}}{\fldrslt {\cs37\ul\cf2 402}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLN}
{\bkmkend AAAAAAAGLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOP" }{}}{\fldrslt {\cs37\ul\cf2 411}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLO}
{\bkmkend AAAAAAAGLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOQ" }{}}{\fldrslt {\cs37\ul\cf2 419}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLQ}
{\bkmkend AAAAAAAGLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOR" }{}}{\fldrslt {\cs37\ul\cf2 441}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, C &&  {\i c}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLR}
{\bkmkend AAAAAAAGLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOS" }{}}{\fldrslt {\cs37\ul\cf2 450}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v impl_ptr\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, dummy_t_ >::type  = {\f2 dummy_t_()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLS}
{\bkmkend AAAAAAAGLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOT" }{}}{\fldrslt {\cs37\ul\cf2 459}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v clone\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 clone () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLZ}
{\bkmkend AAAAAAAGLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOU" }{}}{\fldrslt {\cs37\ul\cf2 540}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v clone\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 clone () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLZ}
{\bkmkend AAAAAAAGLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOV" }{}}{\fldrslt {\cs37\ul\cf2 540}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v clone\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 clone () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLZ}
{\bkmkend AAAAAAAGLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOW" }{}}{\fldrslt {\cs37\ul\cf2 540}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v clone\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 clone () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLZ}
{\bkmkend AAAAAAAGLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOX" }{}}{\fldrslt {\cs37\ul\cf2 540}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< copier_type >::type & get_copier () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMA}
{\bkmkend AAAAAAAGMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOY" }{}}{\fldrslt {\cs37\ul\cf2 548}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< copier_type >::type & get_copier () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMA}
{\bkmkend AAAAAAAGMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGOZ" }{}}{\fldrslt {\cs37\ul\cf2 548}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< copier_type >::type & get_copier () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMA}
{\bkmkend AAAAAAAGMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPA" }{}}{\fldrslt {\cs37\ul\cf2 548}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< copier_type >::type & get_copier () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMA}
{\bkmkend AAAAAAAGMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPB" }{}}{\fldrslt {\cs37\ul\cf2 548}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< copier_type >::type & get_copier (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMB}
{\bkmkend AAAAAAAGMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPC" }{}}{\fldrslt {\cs37\ul\cf2 549}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< copier_type >::type & get_copier (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMB}
{\bkmkend AAAAAAAGMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPD" }{}}{\fldrslt {\cs37\ul\cf2 549}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< copier_type >::type & get_copier (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMB}
{\bkmkend AAAAAAAGMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPE" }{}}{\fldrslt {\cs37\ul\cf2 549}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get_copier\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:get_copier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< copier_type >::type & get_copier (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGMB}
{\bkmkend AAAAAAAGMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPF" }{}}{\fldrslt {\cs37\ul\cf2 549}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLT}
{\bkmkend AAAAAAAGLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPG" }{}}{\fldrslt {\cs37\ul\cf2 467}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLT}
{\bkmkend AAAAAAAGLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPH" }{}}{\fldrslt {\cs37\ul\cf2 467}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLT}
{\bkmkend AAAAAAAGLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPI" }{}}{\fldrslt {\cs37\ul\cf2 467}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLT}
{\bkmkend AAAAAAAGLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPJ" }{}}{\fldrslt {\cs37\ul\cf2 467}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &  {\i u}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLV}
{\bkmkend AAAAAAAGLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPK" }{}}{\fldrslt {\cs37\ul\cf2 491}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &  {\i u}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLV}
{\bkmkend AAAAAAAGLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPL" }{}}{\fldrslt {\cs37\ul\cf2 491}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &  {\i u}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLV}
{\bkmkend AAAAAAAGLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPM" }{}}{\fldrslt {\cs37\ul\cf2 491}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &  {\i u}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGLV}
{\bkmkend AAAAAAAGLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPN" }{}}{\fldrslt {\cs37\ul\cf2 491}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLX}
{\bkmkend AAAAAAAGLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPO" }{}}{\fldrslt {\cs37\ul\cf2 526}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLX}
{\bkmkend AAAAAAAGLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPP" }{}}{\fldrslt {\cs37\ul\cf2 526}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLX}
{\bkmkend AAAAAAAGLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPQ" }{}}{\fldrslt {\cs37\ul\cf2 526}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value &&std::is_convertible< C, copier_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< U, D, C > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLX}
{\bkmkend AAAAAAAGLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPR" }{}}{\fldrslt {\cs37\ul\cf2 526}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLW}
{\bkmkend AAAAAAAGLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPS" }{}}{\fldrslt {\cs37\ul\cf2 515}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLW}
{\bkmkend AAAAAAAGLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPT" }{}}{\fldrslt {\cs37\ul\cf2 515}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLW}
{\bkmkend AAAAAAAGLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPU" }{}}{\fldrslt {\cs37\ul\cf2 515}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator=\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLW}
{\bkmkend AAAAAAAGLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPV" }{}}{\fldrslt {\cs37\ul\cf2 515}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v swap\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLY}
{\bkmkend AAAAAAAGLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPW" }{}}{\fldrslt {\cs37\ul\cf2 533}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v swap\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLY}
{\bkmkend AAAAAAAGLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPX" }{}}{\fldrslt {\cs37\ul\cf2 533}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v swap\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLY}
{\bkmkend AAAAAAAGLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPY" }{}}{\fldrslt {\cs37\ul\cf2 533}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v swap\:impl_ptr< T, Deleter, Copier >}
{\xe \v impl_ptr< T, Deleter, Copier >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
< T, Deleter, Copier > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGLY}
{\bkmkend AAAAAAAGLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPZ" }{}}{\fldrslt {\cs37\ul\cf2 533}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Integer\par \pard\plain 
{\tc\tcl2 \v Integer}
{\xe \v Integer}
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} numbers. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from an string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIL" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (const char *value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from an char array. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFID" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (short value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a short number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIF" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (int value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a int number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIH" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (long value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a long number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIJ" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (long long value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a long long number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 isShort}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEW" }{}}{\fldrslt {\cs37\ul\cf2 isInt}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 isLong}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 isLongLong}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} numbers. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number is an integer, not decimal, number, positive or negative \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEX" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from an string. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEY" }{}}{\fldrslt {\cs37\ul\cf2 12}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAFIL}
{\bkmkend AAAAAAAFIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from an char array. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGEZ" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
.}\par
}
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (short  {\i value})}}
\par
{\bkmkstart AAAAAAAFID}
{\bkmkend AAAAAAAFID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a short number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFA" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
.}\par
}
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (int  {\i value})}}
\par
{\bkmkstart AAAAAAAFIF}
{\bkmkend AAAAAAAFIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a int number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFB" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
.}\par
}
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (long  {\i value})}}
\par
{\bkmkstart AAAAAAAFIH}
{\bkmkend AAAAAAAFIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a long number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFC" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
.}\par
}
{\xe \v Integer\:Integer}
{\xe \v Integer\:Integer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 (long long  {\i value})}}
\par
{\bkmkstart AAAAAAAFIJ}
{\bkmkend AAAAAAAFIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} number from a long long number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFD" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFHO" }{}}{\fldrslt {\cs37\ul\cf2 integer.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v isInt\:Integer}
{\xe \v Integer\:isInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isInt (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGEW}
{\bkmkend AAAAAAAGEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFE" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
{\xe \v isLong\:Integer}
{\xe \v Integer\:isLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isLong (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} fit in a primitive long type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFF" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
{\xe \v isLongLong\:Integer}
{\xe \v Integer\:isLongLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isLongLong (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} fit in a primitive long long type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFG" }{}}{\fldrslt {\cs37\ul\cf2 21}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
{\xe \v isShort\:Integer}
{\xe \v Integer\:isShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isShort (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}} fit in a primitive short type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFH" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIY" }{}}{\fldrslt {\cs37\ul\cf2 integer.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Estructura is_default_manageable< T, D, C >\par \pard\plain 
{\tc\tcl2 \v is_default_manageable< T, D, C >}
{\xe \v is_default_manageable< T, D, C >}
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
Diagrama de herencias de is_default_manageable< T, D, C >{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d26/structspimpl_1_1details_1_1is__default__manageable__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para is_default_manageable< T, D, C >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d4/dc8/structspimpl_1_1details_1_1is__default__manageable__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class D, class C = details::default_copier_t<T>>\par
struct spimpl::details::is_default_manageable< T, D, C >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWF" }{}}{\fldrslt {\cs37\ul\cf2 94}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Natural\par \pard\plain 
{\tc\tcl2 \v Natural}
{\xe \v Natural}
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}} numbers. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from an string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJZ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (const char *value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from an char array. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJR" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (short value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a short number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJT" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (int value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a int number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJV" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (long value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a long number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJX" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (long long value)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a long long number. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 isShort}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFI" }{}}{\fldrslt {\cs37\ul\cf2 isInt}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 isLong}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 isLongLong}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}} numbers. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A natural number is a positive and intenger number (including zero) \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFJ" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from an string. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFK" }{}}{\fldrslt {\cs37\ul\cf2 12}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAFJZ}
{\bkmkend AAAAAAAFJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from an char array. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFL" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
.}\par
}
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (short  {\i value})}}
\par
{\bkmkstart AAAAAAAFJR}
{\bkmkend AAAAAAAFJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a short number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFM" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
.}\par
}
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (int  {\i value})}}
\par
{\bkmkstart AAAAAAAFJT}
{\bkmkend AAAAAAAFJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a int number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFN" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
.}\par
}
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (long  {\i value})}}
\par
{\bkmkstart AAAAAAAFJV}
{\bkmkend AAAAAAAFJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a long number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFO" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
.}\par
}
{\xe \v Natural\:Natural}
{\xe \v Natural\:Natural}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 (long long  {\i value})}}
\par
{\bkmkstart AAAAAAAFJX}
{\bkmkend AAAAAAAFJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a natural number from a long long number. }}\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFP" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJC" }{}}{\fldrslt {\cs37\ul\cf2 natural.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v isInt\:Natural}
{\xe \v Natural\:isInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isInt (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGFI}
{\bkmkend AAAAAAAGFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFQ" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
{\xe \v isLong\:Natural}
{\xe \v Natural\:isLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isLong (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if natural fit in a primitive long type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFR" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
{\xe \v isLongLong\:Natural}
{\xe \v Natural\:isLongLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isLongLong (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if natural fit in a primitive long long type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFS" }{}}{\fldrslt {\cs37\ul\cf2 21}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
{\xe \v isShort\:Natural}
{\xe \v Natural\:isShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
isShort (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
TRUE if natural fit in a primitive short type \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFT" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAMZ" }{}}{\fldrslt {\cs37\ul\cf2 natural.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Path\par \pard\plain 
{\tc\tcl2 \v Path}
{\xe \v Path}
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFU" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 (string value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFV" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 (const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFW" }{}}{\fldrslt {\cs37\ul\cf2 isDir}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFX" }{}}{\fldrslt {\cs37\ul\cf2 isFile}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFY" }{}}{\fldrslt {\cs37\ul\cf2 exists}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGFZ" }{}}{\fldrslt {\cs37\ul\cf2 getDrive}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGA" }{}}{\fldrslt {\cs37\ul\cf2 getDir}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGB" }{}}{\fldrslt {\cs37\ul\cf2 getName}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGC" }{}}{\fldrslt {\cs37\ul\cf2 getExt}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGD" }{}}{\fldrslt {\cs37\ul\cf2 getPath}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGE" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOG" }{}}{\fldrslt {\cs37\ul\cf2 path.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Path\:Path}
{\xe \v Path\:Path}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 (string  {\i value})}}
\par
{\bkmkstart AAAAAAAGFU}
{\bkmkend AAAAAAAGFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGF" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v Path\:Path}
{\xe \v Path\:Path}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 (const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAGFV}
{\bkmkend AAAAAAAGFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGG" }{}}{\fldrslt {\cs37\ul\cf2 10}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v exists\:Path}
{\xe \v Path\:exists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool exists ()}}
\par
{\bkmkstart AAAAAAAGFY}
{\bkmkend AAAAAAAGFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGH" }{}}{\fldrslt {\cs37\ul\cf2 13}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v getDir\:Path}
{\xe \v Path\:getDir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getDir ()}}
\par
{\bkmkstart AAAAAAAGGA}
{\bkmkend AAAAAAAGGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGI" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v getDrive\:Path}
{\xe \v Path\:getDrive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getDrive ()}}
\par
{\bkmkstart AAAAAAAGFZ}
{\bkmkend AAAAAAAGFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGJ" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v getExt\:Path}
{\xe \v Path\:getExt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getExt ()}}
\par
{\bkmkstart AAAAAAAGGC}
{\bkmkend AAAAAAAGGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGK" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v getName\:Path}
{\xe \v Path\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getName ()}}
\par
{\bkmkstart AAAAAAAGGB}
{\bkmkend AAAAAAAGGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGL" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v getPath\:Path}
{\xe \v Path\:getPath}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string getPath ()}}
\par
{\bkmkstart AAAAAAAGGD}
{\bkmkend AAAAAAAGGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGM" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v isDir\:Path}
{\xe \v Path\:isDir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isDir ()}}
\par
{\bkmkstart AAAAAAAGFW}
{\bkmkend AAAAAAAGFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGN" }{}}{\fldrslt {\cs37\ul\cf2 11}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
{\xe \v isFile\:Path}
{\xe \v Path\:isFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isFile ()}}
\par
{\bkmkstart AAAAAAAGFX}
{\bkmkend AAAAAAAGFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGO" }{}}{\fldrslt {\cs37\ul\cf2 12}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFKV" }{}}{\fldrslt {\cs37\ul\cf2 path.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Real\par \pard\plain 
{\tc\tcl2 \v Real}
{\xe \v Real}
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGP" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGQ" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGR" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (float value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGT" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (long double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGU" }{}}{\fldrslt {\cs37\ul\cf2 isFloat}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGV" }{}}{\fldrslt {\cs37\ul\cf2 isDouble}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGW" }{}}{\fldrslt {\cs37\ul\cf2 isLongDouble}}}
 ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGX" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Real\:Real}
{\xe \v Real\:Real}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i value}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGGP}
{\bkmkend AAAAAAAGGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGY" }{}}{\fldrslt {\cs37\ul\cf2 12}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
.}\par
}
{\xe \v Real\:Real}
{\xe \v Real\:Real}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAGGQ}
{\bkmkend AAAAAAAGGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGGZ" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNM" }{}}{\fldrslt {\cs37\ul\cf2 real.cpp}}}
.}\par
}
{\xe \v Real\:Real}
{\xe \v Real\:Real}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (float  {\i value})}}
\par
{\bkmkstart AAAAAAAGGR}
{\bkmkend AAAAAAAGGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHA" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNM" }{}}{\fldrslt {\cs37\ul\cf2 real.cpp}}}
.}\par
}
{\xe \v Real\:Real}
{\xe \v Real\:Real}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (double  {\i value})}}
\par
{\bkmkstart AAAAAAAGGS}
{\bkmkend AAAAAAAGGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHB" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNM" }{}}{\fldrslt {\cs37\ul\cf2 real.cpp}}}
.}\par
}
{\xe \v Real\:Real}
{\xe \v Real\:Real}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 (long double  {\i value})}}
\par
{\bkmkstart AAAAAAAGGT}
{\bkmkend AAAAAAAGGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHC" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFNM" }{}}{\fldrslt {\cs37\ul\cf2 real.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v isDouble\:Real}
{\xe \v Real\:isDouble}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isDouble (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGGV}
{\bkmkend AAAAAAAGGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHD" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
.}\par
}
{\xe \v isFloat\:Real}
{\xe \v Real\:isFloat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isFloat (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGGU}
{\bkmkend AAAAAAAGGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHE" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
.}\par
}
{\xe \v isLongDouble\:Real}
{\xe \v Real\:isLongDouble}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isLongDouble (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGGW}
{\bkmkend AAAAAAAGGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHF" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPI" }{}}{\fldrslt {\cs37\ul\cf2 real.hpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase sstring\par \pard\plain 
{\tc\tcl2 \v sstring}
{\xe \v sstring}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subclsase de string con metoos auxiliares. }}\par
Diagrama de herencias de sstring{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/d29/classjggtools_1_1sstring__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para sstring:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/d88/classjggtools_1_1sstring__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHG" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (string str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHH" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 &obj)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHI" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const char *src)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHJ" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (char *src)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHK" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const string &str, size_type pos, size_type n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\b ltrim} (){\bkmkstart AAAAAAAGHL}
{\bkmkend AAAAAAAGHL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\b rtrim} (){\bkmkstart AAAAAAAGHM}
{\bkmkend AAAAAAAGHM}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\b trim} (){\bkmkstart AAAAAAAGHN}
{\bkmkend AAAAAAAGHN}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\b toUpper} (){\bkmkstart AAAAAAAGHO}
{\bkmkend AAAAAAAGHO}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\b toLower} (){\bkmkstart AAAAAAAGHP}
{\bkmkend AAAAAAAGHP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * {\b toString} (){\bkmkstart AAAAAAAGHQ}
{\bkmkend AAAAAAAGHQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b toChar} (){\bkmkstart AAAAAAAGHR}
{\bkmkend AAAAAAAGHR}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char * {\b toArr} (){\bkmkstart AAAAAAAGHS}
{\bkmkend AAAAAAAGHS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b contains} (const char *par){\bkmkstart AAAAAAAGHT}
{\bkmkend AAAAAAAGHT}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b makeBoolean} (){\bkmkstart AAAAAAAGHU}
{\bkmkend AAAAAAAGHU}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

vector< char * > {\b tokenize} (const char *pat){\bkmkstart AAAAAAAGHV}
{\bkmkend AAAAAAAGHV}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

vector< {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 > {\b tokenize} (string pat){\bkmkstart AAAAAAAGHW}
{\bkmkend AAAAAAAGHW}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< int > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHX" }{}}{\fldrslt {\cs37\ul\cf2 tokenizeNumber}}}
 (const char *pat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGHY" }{}}{\fldrslt {\cs37\ul\cf2 paste}}}
 (const char *sep,...)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\b concat} (const char *sep,...){\bkmkstart AAAAAAAGHZ}
{\bkmkend AAAAAAAGHZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Subclsase de string con metoos auxiliares. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<>\par
Extiende la clase String con utilidades para su manejo \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIA" }{}}{\fldrslt {\cs37\ul\cf2 10}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGIB}
{\bkmkend AAAAAAAGIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIC" }{}}{\fldrslt {\cs37\ul\cf2 13}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (string  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGHG}
{\bkmkend AAAAAAAGHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGID" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 &  {\i obj}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGHH}
{\bkmkend AAAAAAAGHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIE" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const char *  {\i src}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGHI}
{\bkmkend AAAAAAAGHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIF" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (char *  {\i src}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGHJ}
{\bkmkend AAAAAAAGHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIG" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const string &  {\i str}, size_type  {\i pos}, size_type  {\i n}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGHK}
{\bkmkend AAAAAAAGHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIH" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEEB" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v paste\:sstring}
{\xe \v sstring\:paste}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 paste (const char *  {\i sep},   {\i ...})}}
\par
{\bkmkstart AAAAAAAGHY}
{\bkmkend AAAAAAAGHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGII" }{}}{\fldrslt {\cs37\ul\cf2 93}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v tokenizeNumber\:sstring}
{\xe \v sstring\:tokenizeNumber}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< int > tokenizeNumber (const char *  {\i pat})}}
\par
{\bkmkstart AAAAAAAGHX}
{\bkmkend AAAAAAAGHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIJ" }{}}{\fldrslt {\cs37\ul\cf2 78}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase sstring\par \pard\plain 
{\tc\tcl2 \v sstring}
{\xe \v sstring}
{\bkmkstart AAAAAAAEGV}
{\bkmkend AAAAAAAEGV}
Diagrama de herencias de sstring{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d9/d7d/classjggtoools_1_1sstring__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para sstring:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "db/da6/classjggtoools_1_1sstring__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJN" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (string str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJO" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 &obj)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJP" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const char *src)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJQ" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (char *src)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJR" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const string &str, size_type pos, size_type n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJS" }{}}{\fldrslt {\cs37\ul\cf2 ltrim}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJT" }{}}{\fldrslt {\cs37\ul\cf2 rtrim}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJU" }{}}{\fldrslt {\cs37\ul\cf2 trim}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJV" }{}}{\fldrslt {\cs37\ul\cf2 toUpper}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJW" }{}}{\fldrslt {\cs37\ul\cf2 toLower}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJX" }{}}{\fldrslt {\cs37\ul\cf2 makeLower}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJY" }{}}{\fldrslt {\cs37\ul\cf2 makeUpper}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJZ" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKA" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKB" }{}}{\fldrslt {\cs37\ul\cf2 toArr}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKC" }{}}{\fldrslt {\cs37\ul\cf2 contains}}}
 (const char *par)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKD" }{}}{\fldrslt {\cs37\ul\cf2 makeBoolean}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< char * > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKE" }{}}{\fldrslt {\cs37\ul\cf2 tokenize}}}
 (const char *pat)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKF" }{}}{\fldrslt {\cs37\ul\cf2 tokenize}}}
 (string pat)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKG" }{}}{\fldrslt {\cs37\ul\cf2 10}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGKH}
{\bkmkend AAAAAAAGKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKI" }{}}{\fldrslt {\cs37\ul\cf2 13}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (string  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGJN}
{\bkmkend AAAAAAAGJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKJ" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 &  {\i obj}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGJO}
{\bkmkend AAAAAAAGJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKK" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const char *  {\i src}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGJP}
{\bkmkend AAAAAAAGJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKL" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (char *  {\i src}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGJQ}
{\bkmkend AAAAAAAGJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKM" }{}}{\fldrslt {\cs37\ul\cf2 17}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\xe \v sstring\:sstring}
{\xe \v sstring\:sstring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 (const string &  {\i str}, size_type  {\i pos}, size_type  {\i n}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGJR}
{\bkmkend AAAAAAAGJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKN" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGK" }{}}{\fldrslt {\cs37\ul\cf2 sstring.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v contains\:sstring}
{\xe \v sstring\:contains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool contains (const char *  {\i par})}}
\par
{\bkmkstart AAAAAAAGKC}
{\bkmkend AAAAAAAGKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKO" }{}}{\fldrslt {\cs37\ul\cf2 90}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFTR" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v ltrim\:sstring}
{\xe \v sstring\:ltrim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & ltrim ()}}
\par
{\bkmkstart AAAAAAAGJS}
{\bkmkend AAAAAAAGJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKP" }{}}{\fldrslt {\cs37\ul\cf2 13}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v makeBoolean\:sstring}
{\xe \v sstring\:makeBoolean}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool makeBoolean ()}}
\par
{\bkmkstart AAAAAAAGKD}
{\bkmkend AAAAAAAGKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKQ" }{}}{\fldrslt {\cs37\ul\cf2 84}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v makeLower\:sstring}
{\xe \v sstring\:makeLower}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * makeLower ()}}
\par
{\bkmkstart AAAAAAAGJX}
{\bkmkend AAAAAAAGJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKR" }{}}{\fldrslt {\cs37\ul\cf2 55}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFTR" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v makeUpper\:sstring}
{\xe \v sstring\:makeUpper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * makeUpper ()}}
\par
{\bkmkstart AAAAAAAGJY}
{\bkmkend AAAAAAAGJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKS" }{}}{\fldrslt {\cs37\ul\cf2 60}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFTR" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v rtrim\:sstring}
{\xe \v sstring\:rtrim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & rtrim ()}}
\par
{\bkmkstart AAAAAAAGJT}
{\bkmkend AAAAAAAGJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKT" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v toArr\:sstring}
{\xe \v sstring\:toArr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * toArr ()}}
\par
{\bkmkstart AAAAAAAGKB}
{\bkmkend AAAAAAAGKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKU" }{}}{\fldrslt {\cs37\ul\cf2 49}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v toChar\:sstring}
{\xe \v sstring\:toChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * toChar ()}}
\par
{\bkmkstart AAAAAAAGKA}
{\bkmkend AAAAAAAGKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKV" }{}}{\fldrslt {\cs37\ul\cf2 60}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v tokenize\:sstring}
{\xe \v sstring\:tokenize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< char * > tokenize (const char *  {\i pat})}}
\par
{\bkmkstart AAAAAAAGKE}
{\bkmkend AAAAAAAGKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKW" }{}}{\fldrslt {\cs37\ul\cf2 63}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v tokenize\:sstring}
{\xe \v sstring\:tokenize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 > tokenize (string  {\i pat})}}
\par
{\bkmkstart AAAAAAAGKF}
{\bkmkend AAAAAAAGKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKX" }{}}{\fldrslt {\cs37\ul\cf2 69}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v toLower\:sstring}
{\xe \v sstring\:toLower}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & toLower ()}}
\par
{\bkmkstart AAAAAAAGJW}
{\bkmkend AAAAAAAGJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKY" }{}}{\fldrslt {\cs37\ul\cf2 42}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v toString\:sstring}
{\xe \v sstring\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 * toString ()}}
\par
{\bkmkstart AAAAAAAGJZ}
{\bkmkend AAAAAAAGJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGKZ" }{}}{\fldrslt {\cs37\ul\cf2 46}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v toUpper\:sstring}
{\xe \v sstring\:toUpper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & toUpper ()}}
\par
{\bkmkstart AAAAAAAGJV}
{\bkmkend AAAAAAAGJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLA" }{}}{\fldrslt {\cs37\ul\cf2 38}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
{\xe \v trim\:sstring}
{\xe \v sstring\:trim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 & trim ()}}
\par
{\bkmkstart AAAAAAAGJU}
{\bkmkend AAAAAAAGJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLB" }{}}{\fldrslt {\cs37\ul\cf2 35}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFPA" }{}}{\fldrslt {\cs37\ul\cf2 sstring.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Time\par \pard\plain 
{\tc\tcl2 \v Time}
{\xe \v Time}
{\bkmkstart AAAAAAAEJH}
{\bkmkend AAAAAAAEJH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIK" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 &src)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIL" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (string str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIM" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (const char *str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct tm * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYD" }{}}{\fldrslt {\cs37\ul\cf2 getTM}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pointer to an struct tm when time pieces are associated with the object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYF" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 (const char *fmt="%X")\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} as H:M:S. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYH" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
 (const char *fmt="%X")\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} as H:M:S. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Abstraction of a time {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} is represented as H:M:S \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIN" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEIS" }{}}{\fldrslt {\cs37\ul\cf2 time.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Time\:Time}
{\xe \v Time\:Time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 &  {\i src})}}
\par
{\bkmkstart AAAAAAAGIK}
{\bkmkend AAAAAAAGIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIO" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
{\xe \v Time\:Time}
{\xe \v Time\:Time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (string  {\i str})}}
\par
{\bkmkstart AAAAAAAGIL}
{\bkmkend AAAAAAAGIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIP" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
{\xe \v Time\:Time}
{\xe \v Time\:Time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 (const char *  {\i str})}}
\par
{\bkmkstart AAAAAAAGIM}
{\bkmkend AAAAAAAGIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIQ" }{}}{\fldrslt {\cs37\ul\cf2 15}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v getTM\:Time}
{\xe \v Time\:getTM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int struct tm * getTM ()}}
\par
{\bkmkstart AAAAAAAFYD}
{\bkmkend AAAAAAAFYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a pointer to an struct tm when time pieces are associated with the object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Other fields at struct can be associated with current date\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
a poinetr to struct tm \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIR" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
{\xe \v toChar\:Time}
{\xe \v Time\:toChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * toChar (const char *  {\i fmt} = {\f2 "%X"})}}
\par
{\bkmkstart AAAAAAAFYH}
{\bkmkend AAAAAAAFYH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} as H:M:S. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A {\b new copy}  as H:M:S \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIS" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
{\xe \v toString\:Time}
{\xe \v Time\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString (const char *  {\i fmt} = {\f2 "%X"})}}
\par
{\bkmkstart AAAAAAAFYF}
{\bkmkend AAAAAAAFYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}} as H:M:S. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
An string as H:M:S \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIT" }{}}{\fldrslt {\cs37\ul\cf2 19}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXK" }{}}{\fldrslt {\cs37\ul\cf2 time.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase Timestamp\par \pard\plain 
{\tc\tcl2 \v Timestamp}
{\xe \v Timestamp}
{\bkmkstart AAAAAAAEKM}
{\bkmkend AAAAAAAEKM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}. }}\par
Diagrama de herencias de Timestamp{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d2/dde/classjggtools_1_1_timestamp__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para Timestamp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d6/dce/classjggtools_1_1_timestamp__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZC" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZL" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor from an string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIU" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 (const char *str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZO" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}} as string. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clase {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A timestamp is a date time structure containing:\par
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}: Year, Month, Day {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}: Hout, minutes, seconds microseconds\par
Format is always an string:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
"%Y-%m-%d-%H:%M:%S.nnnnnn" \par}
\par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIV" }{}}{\fldrslt {\cs37\ul\cf2 16}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJV" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v Timestamp\:Timestamp}
{\xe \v Timestamp\:Timestamp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 ()}}
\par
{\bkmkstart AAAAAAAFZC}
{\bkmkend AAAAAAAFZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for a {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialize the instance to current {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}} \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIW" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYJ" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.cpp}}}
.}\par
}
{\xe \v Timestamp\:Timestamp}
{\xe \v Timestamp\:Timestamp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
  {\i str})}}
\par
{\bkmkstart AAAAAAAFZL}
{\bkmkend AAAAAAAFZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor from an string. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E1metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i str} \cell }{An string according timestamp format \cell }
{\row }
}
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIX" }{}}{\fldrslt {\cs37\ul\cf2 26}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYJ" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.cpp}}}
.}\par
}
{\xe \v Timestamp\:Timestamp}
{\xe \v Timestamp\:Timestamp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 (const char *  {\i str})}}
\par
{\bkmkstart AAAAAAAGIU}
{\bkmkend AAAAAAAGIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIY" }{}}{\fldrslt {\cs37\ul\cf2 27}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYJ" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v toString\:Timestamp}
{\xe \v Timestamp\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString ()}}
\par
{\bkmkstart AAAAAAAFZO}
{\bkmkend AAAAAAAFZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a representation of {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}} as string. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Devuelve\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
An string as Y/m/D H:M:S \par
}}}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGIZ" }{}}{\fldrslt {\cs37\ul\cf2 28}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYJ" }{}}{\fldrslt {\cs37\ul\cf2 timestamp.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase ToolsCastException\par \pard\plain 
{\tc\tcl2 \v ToolsCastException}
{\xe \v ToolsCastException}
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when it is not possible construct the object using data passed to constructor. }}\par
Diagrama de herencias de ToolsCastException{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dd/dfc/classjggtools_1_1_tools_cast_exception__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para ToolsCastException:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d8/dfe/classjggtools_1_1_tools_cast_exception__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJA" }{}}{\fldrslt {\cs37\ul\cf2 ToolsCastException}}}
 (const char *fmt,...)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Otros miembros heredados\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when it is not possible construct the object using data passed to constructor. \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJB" }{}}{\fldrslt {\cs37\ul\cf2 22}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v ToolsCastException\:ToolsCastException}
{\xe \v ToolsCastException\:ToolsCastException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 ToolsCastException}}}
 (const char *  {\i fmt},   {\i ...})}}
\par
{\bkmkstart AAAAAAAGJA}
{\bkmkend AAAAAAAGJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJC" }{}}{\fldrslt {\cs37\ul\cf2 45}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase ToolsException\par \pard\plain 
{\tc\tcl2 \v ToolsException}
{\xe \v ToolsException}
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Base clase for exception into the library. }}\par
Diagrama de herencias de ToolsException{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d5/df8/classjggtools_1_1_tools_exception__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para ToolsException:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "de/dfd/classjggtools_1_1_tools_exception__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJD" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 (const char *fmt,...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJE" }{}}{\fldrslt {\cs37\ul\cf2 what}}}
 ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJF" }{}}{\fldrslt {\cs37\ul\cf2 mountMessage}}}
 (const char *fmt, va_list list)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Base clase for exception into the library. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
<> \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJG" }{}}{\fldrslt {\cs37\ul\cf2 9}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v ToolsException\:ToolsException}
{\xe \v ToolsException\:ToolsException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 (const char *  {\i fmt},   {\i ...})}}
\par
{\bkmkstart AAAAAAAGJD}
{\bkmkend AAAAAAAGJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJH" }{}}{\fldrslt {\cs37\ul\cf2 14}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v mountMessage\:ToolsException}
{\xe \v ToolsException\:mountMessage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mountMessage (const char *  {\i fmt}, va_list  {\i list}){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAGJF}
{\bkmkend AAAAAAAGJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJI" }{}}{\fldrslt {\cs37\ul\cf2 24}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
.}\par
}
{\xe \v what\:ToolsException}
{\xe \v ToolsException\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * what ()}}
\par
{\bkmkstart AAAAAAAGJE}
{\bkmkend AAAAAAAGJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJJ" }{}}{\fldrslt {\cs37\ul\cf2 20}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la Clase ToolsValueException\par \pard\plain 
{\tc\tcl2 \v ToolsValueException}
{\xe \v ToolsValueException}
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when data not fit the range of values. }}\par
Diagrama de herencias de ToolsValueException{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d5/d46/classjggtools_1_1_tools_value_exception__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboraci\'F3n para ToolsValueException:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "dc/d44/classjggtools_1_1_tools_value_exception__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJK" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
 (const char *fmt,...)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Otros miembros heredados\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exception when data not fit the range of values. \par
}{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJL" }{}}{\fldrslt {\cs37\ul\cf2 18}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAHT" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v ToolsValueException\:ToolsValueException}
{\xe \v ToolsValueException\:ToolsValueException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
 (const char *  {\i fmt},   {\i ...})}}
\par
{\bkmkstart AAAAAAAGJK}
{\bkmkend AAAAAAAGJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGJM" }{}}{\fldrslt {\cs37\ul\cf2 39}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFAZ" }{}}{\fldrslt {\cs37\ul\cf2 exceptions.cpp}}}
.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia de la plantilla de la Clase unique_impl_ptr< T, Deleter >\par \pard\plain 
{\tc\tcl2 \v unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >}
{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Clases\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQA" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = T *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQB" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename std::add_const< T >::type *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = T &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQD" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename std::add_const< T >::type &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = T\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQF" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename std::decay< Deleter >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQG" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = std::unique_ptr< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQH" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQA" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = T *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQB" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename std::add_const< T >::type *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = T &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQD" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename std::add_const< T >::type &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = T\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQF" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename std::decay< Deleter >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQG" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = std::unique_ptr< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQH" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQA" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = T *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQB" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename std::add_const< T >::type *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = T &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQD" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename std::add_const< T >::type &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = T\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQF" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename std::decay< Deleter >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQG" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = std::unique_ptr< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQH" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQA" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
 = T *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQB" }{}}{\fldrslt {\cs37\ul\cf2 const_pointer}}}
 = typename std::add_const< T >::type *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 reference}}}
 = T &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQD" }{}}{\fldrslt {\cs37\ul\cf2 const_reference}}}
 = typename std::add_const< T >::type &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
 = T\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQF" }{}}{\fldrslt {\cs37\ul\cf2 deleter_type}}}
 = typename std::decay< Deleter >::type\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQG" }{}}{\fldrslt {\cs37\ul\cf2 unique_ptr_type}}}
 = std::unique_ptr< T, deleter_type >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQH" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
< T, deleter_type >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
M\'E9todos p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQI" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQJ" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer p, D &&d, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQK" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQL}
{\bkmkend AAAAAAAGQL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQM" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQN" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQO" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQP}
{\bkmkend AAAAAAAGQP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQQ}
{\bkmkend AAAAAAAGQQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQR" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

reference {\b operator=} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQS}
{\bkmkend AAAAAAAGQS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQT" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQU" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQV" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQW" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQX" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQY" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQZ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRA" }{}}{\fldrslt {\cs37\ul\cf2 release}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unique_ptr_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRB" }{}}{\fldrslt {\cs37\ul\cf2 release_unique}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRC" }{}}{\fldrslt {\cs37\ul\cf2 operator bool}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRD" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRE" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQI" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQJ" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer p, D &&d, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQK" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQL}
{\bkmkend AAAAAAAGQL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQM" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQN" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQO" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQP}
{\bkmkend AAAAAAAGQP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQQ}
{\bkmkend AAAAAAAGQQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQR" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

reference {\b operator=} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQS}
{\bkmkend AAAAAAAGQS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQT" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQU" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQV" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQW" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQX" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQY" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQZ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRA" }{}}{\fldrslt {\cs37\ul\cf2 release}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unique_ptr_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRB" }{}}{\fldrslt {\cs37\ul\cf2 release_unique}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRC" }{}}{\fldrslt {\cs37\ul\cf2 operator bool}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRD" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRE" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQI" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQJ" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer p, D &&d, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQK" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQL}
{\bkmkend AAAAAAAGQL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQM" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQN" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQO" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQP}
{\bkmkend AAAAAAAGQP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQQ}
{\bkmkend AAAAAAAGQQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQR" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

reference {\b operator=} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQS}
{\bkmkend AAAAAAAGQS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQT" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQU" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQV" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQW" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQX" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQY" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQZ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRA" }{}}{\fldrslt {\cs37\ul\cf2 release}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unique_ptr_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRB" }{}}{\fldrslt {\cs37\ul\cf2 release_unique}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRC" }{}}{\fldrslt {\cs37\ul\cf2 operator bool}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRD" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRE" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQI" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQJ" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer p, D &&d, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQK" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQL}
{\bkmkend AAAAAAAGQL}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQM" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQN" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U , class D > {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQO" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&u, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type={\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b unique_impl_ptr} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQP}
{\bkmkend AAAAAAAGQP}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & {\b operator=} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &&r) noexcept=default{\bkmkstart AAAAAAAGQQ}
{\bkmkend AAAAAAAGQQ}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class U > std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQR" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
 (std::unique_ptr< U > &&u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

reference {\b operator=} (const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &)=delete{\bkmkstart AAAAAAAGQS}
{\bkmkend AAAAAAAGQS}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQT" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_reference {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQU" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
 () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQV" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQW" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQX" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const_pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQY" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQZ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 &u) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pointer {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRA" }{}}{\fldrslt {\cs37\ul\cf2 release}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unique_ptr_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRB" }{}}{\fldrslt {\cs37\ul\cf2 release_unique}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRC" }{}}{\fldrslt {\cs37\ul\cf2 operator bool}}}
 () const noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRD" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::remove_reference< deleter_type >::type & {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRE" }{}}{\fldrslt {\cs37\ul\cf2 get_deleter}}}
 () const noexcept\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unique_ptr_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRF" }{}}{\fldrslt {\cs37\ul\cf2 ptr_}}}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T, class Deleter = details::default_deleter_t<T>>\par
class spimpl::unique_impl_ptr< T, Deleter >\par
}
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRG" }{}}{\fldrslt {\cs37\ul\cf2 102}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los 'Typedef' miembros de la clase\par
\pard\plain 
{\xe \v const_pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename std::add_const<T>::type *}}
\par
{\bkmkstart AAAAAAAGQB}
{\bkmkend AAAAAAAGQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRH" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v const_pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename std::add_const<T>::type *}}
\par
{\bkmkstart AAAAAAAGQB}
{\bkmkend AAAAAAAGQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRI" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v const_pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename std::add_const<T>::type *}}
\par
{\bkmkstart AAAAAAAGQB}
{\bkmkend AAAAAAAGQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRJ" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v const_pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_pointer =  typename std::add_const<T>::type *}}
\par
{\bkmkstart AAAAAAAGQB}
{\bkmkend AAAAAAAGQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRK" }{}}{\fldrslt {\cs37\ul\cf2 110}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v const_reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename std::add_const<T>::type &}}
\par
{\bkmkstart AAAAAAAGQD}
{\bkmkend AAAAAAAGQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRL" }{}}{\fldrslt {\cs37\ul\cf2 112}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v const_reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename std::add_const<T>::type &}}
\par
{\bkmkstart AAAAAAAGQD}
{\bkmkend AAAAAAAGQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRM" }{}}{\fldrslt {\cs37\ul\cf2 112}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v const_reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename std::add_const<T>::type &}}
\par
{\bkmkstart AAAAAAAGQD}
{\bkmkend AAAAAAAGQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRN" }{}}{\fldrslt {\cs37\ul\cf2 112}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v const_reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:const_reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using const_reference =  typename std::add_const<T>::type &}}
\par
{\bkmkstart AAAAAAAGQD}
{\bkmkend AAAAAAAGQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRO" }{}}{\fldrslt {\cs37\ul\cf2 112}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v deleter_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename std::decay<Deleter>::type}}
\par
{\bkmkstart AAAAAAAGQF}
{\bkmkend AAAAAAAGQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRP" }{}}{\fldrslt {\cs37\ul\cf2 114}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v deleter_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename std::decay<Deleter>::type}}
\par
{\bkmkstart AAAAAAAGQF}
{\bkmkend AAAAAAAGQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRQ" }{}}{\fldrslt {\cs37\ul\cf2 114}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v deleter_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename std::decay<Deleter>::type}}
\par
{\bkmkstart AAAAAAAGQF}
{\bkmkend AAAAAAAGQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRR" }{}}{\fldrslt {\cs37\ul\cf2 114}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v deleter_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:deleter_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using deleter_type =  typename std::decay<Deleter>::type}}
\par
{\bkmkstart AAAAAAAGQF}
{\bkmkend AAAAAAAGQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRS" }{}}{\fldrslt {\cs37\ul\cf2 114}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v element_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  T}}
\par
{\bkmkstart AAAAAAAGQE}
{\bkmkend AAAAAAAGQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRT" }{}}{\fldrslt {\cs37\ul\cf2 113}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v element_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  T}}
\par
{\bkmkstart AAAAAAAGQE}
{\bkmkend AAAAAAAGQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRU" }{}}{\fldrslt {\cs37\ul\cf2 113}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v element_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  T}}
\par
{\bkmkstart AAAAAAAGQE}
{\bkmkend AAAAAAAGQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRV" }{}}{\fldrslt {\cs37\ul\cf2 113}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v element_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:element_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using element_type =  T}}
\par
{\bkmkstart AAAAAAAGQE}
{\bkmkend AAAAAAAGQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRW" }{}}{\fldrslt {\cs37\ul\cf2 113}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQH}
{\bkmkend AAAAAAAGQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRX" }{}}{\fldrslt {\cs37\ul\cf2 116}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQH}
{\bkmkend AAAAAAAGQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRY" }{}}{\fldrslt {\cs37\ul\cf2 116}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQH}
{\bkmkend AAAAAAAGQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGRZ" }{}}{\fldrslt {\cs37\ul\cf2 116}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v is_default_manageable\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:is_default_manageable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 =  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable}}}
<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQH}
{\bkmkend AAAAAAAGQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSA" }{}}{\fldrslt {\cs37\ul\cf2 116}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  T*}}
\par
{\bkmkstart AAAAAAAGQA}
{\bkmkend AAAAAAAGQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSB" }{}}{\fldrslt {\cs37\ul\cf2 109}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  T*}}
\par
{\bkmkstart AAAAAAAGQA}
{\bkmkend AAAAAAAGQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSC" }{}}{\fldrslt {\cs37\ul\cf2 109}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  T*}}
\par
{\bkmkstart AAAAAAAGQA}
{\bkmkend AAAAAAAGQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSD" }{}}{\fldrslt {\cs37\ul\cf2 109}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v pointer\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using pointer =  T*}}
\par
{\bkmkstart AAAAAAAGQA}
{\bkmkend AAAAAAAGQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSE" }{}}{\fldrslt {\cs37\ul\cf2 109}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  T&}}
\par
{\bkmkstart AAAAAAAGQC}
{\bkmkend AAAAAAAGQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSF" }{}}{\fldrslt {\cs37\ul\cf2 111}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  T&}}
\par
{\bkmkstart AAAAAAAGQC}
{\bkmkend AAAAAAAGQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSG" }{}}{\fldrslt {\cs37\ul\cf2 111}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  T&}}
\par
{\bkmkstart AAAAAAAGQC}
{\bkmkend AAAAAAAGQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSH" }{}}{\fldrslt {\cs37\ul\cf2 111}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v reference\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using reference =  T&}}
\par
{\bkmkstart AAAAAAAGQC}
{\bkmkend AAAAAAAGQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSI" }{}}{\fldrslt {\cs37\ul\cf2 111}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  std::unique_ptr<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQG}
{\bkmkend AAAAAAAGQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSJ" }{}}{\fldrslt {\cs37\ul\cf2 115}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  std::unique_ptr<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQG}
{\bkmkend AAAAAAAGQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSK" }{}}{\fldrslt {\cs37\ul\cf2 115}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  std::unique_ptr<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQG}
{\bkmkend AAAAAAAGQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSL" }{}}{\fldrslt {\cs37\ul\cf2 115}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_ptr_type\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_ptr_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using unique_ptr_type =  std::unique_ptr<T, deleter_type>}}
\par
{\bkmkstart AAAAAAAGQG}
{\bkmkend AAAAAAAGQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSM" }{}}{\fldrslt {\cs37\ul\cf2 115}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n del constructor y destructor\par
\pard\plain 
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGSN}
{\bkmkend AAAAAAAGSN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSO" }{}}{\fldrslt {\cs37\ul\cf2 118}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQI}
{\bkmkend AAAAAAAGQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSP" }{}}{\fldrslt {\cs37\ul\cf2 121}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQJ}
{\bkmkend AAAAAAAGQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSQ" }{}}{\fldrslt {\cs37\ul\cf2 125}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQK}
{\bkmkend AAAAAAAGQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSR" }{}}{\fldrslt {\cs37\ul\cf2 133}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQM}
{\bkmkend AAAAAAAGQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSS" }{}}{\fldrslt {\cs37\ul\cf2 160}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQN}
{\bkmkend AAAAAAAGQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGST" }{}}{\fldrslt {\cs37\ul\cf2 169}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQO}
{\bkmkend AAAAAAAGQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSU" }{}}{\fldrslt {\cs37\ul\cf2 178}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGSN}
{\bkmkend AAAAAAAGSN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSV" }{}}{\fldrslt {\cs37\ul\cf2 118}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQI}
{\bkmkend AAAAAAAGQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSW" }{}}{\fldrslt {\cs37\ul\cf2 121}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQJ}
{\bkmkend AAAAAAAGQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSX" }{}}{\fldrslt {\cs37\ul\cf2 125}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQK}
{\bkmkend AAAAAAAGQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSY" }{}}{\fldrslt {\cs37\ul\cf2 133}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQM}
{\bkmkend AAAAAAAGQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGSZ" }{}}{\fldrslt {\cs37\ul\cf2 160}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQN}
{\bkmkend AAAAAAAGQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTA" }{}}{\fldrslt {\cs37\ul\cf2 169}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQO}
{\bkmkend AAAAAAAGQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTB" }{}}{\fldrslt {\cs37\ul\cf2 178}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGSN}
{\bkmkend AAAAAAAGSN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTC" }{}}{\fldrslt {\cs37\ul\cf2 118}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQI}
{\bkmkend AAAAAAAGQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTD" }{}}{\fldrslt {\cs37\ul\cf2 121}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQJ}
{\bkmkend AAAAAAAGQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTE" }{}}{\fldrslt {\cs37\ul\cf2 125}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQK}
{\bkmkend AAAAAAAGQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTF" }{}}{\fldrslt {\cs37\ul\cf2 133}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQM}
{\bkmkend AAAAAAAGQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTG" }{}}{\fldrslt {\cs37\ul\cf2 160}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQN}
{\bkmkend AAAAAAAGQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 169}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQO}
{\bkmkend AAAAAAAGQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTI" }{}}{\fldrslt {\cs37\ul\cf2 178}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGSN}
{\bkmkend AAAAAAAGSN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTJ" }{}}{\fldrslt {\cs37\ul\cf2 118}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::nullptr_t ){\f2 [inline]}, {\f2 [constexpr]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQI}
{\bkmkend AAAAAAAGQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTK" }{}}{\fldrslt {\cs37\ul\cf2 121}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (pointer  {\i p}, D &&  {\i d}, typename std::enable_if< std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQJ}
{\bkmkend AAAAAAAGQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTL" }{}}{\fldrslt {\cs37\ul\cf2 125}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (U *  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQK}
{\bkmkend AAAAAAAGQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTM" }{}}{\fldrslt {\cs37\ul\cf2 133}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQM}
{\bkmkend AAAAAAAGQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTN" }{}}{\fldrslt {\cs37\ul\cf2 160}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 (std::unique_ptr< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQN}
{\bkmkend AAAAAAAGQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTO" }{}}{\fldrslt {\cs37\ul\cf2 169}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v unique_impl_ptr\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:unique_impl_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< U, D > &&  {\i u}, typename std::enable_if< std::is_convertible< U *, pointer >::value &&std::is_convertible< D, deleter_type >::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 >::type  = {\f2 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
()}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQO}
{\bkmkend AAAAAAAGQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTP" }{}}{\fldrslt {\cs37\ul\cf2 178}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones miembro\par
\pard\plain 
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer get () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQY}
{\bkmkend AAAAAAAGQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTQ" }{}}{\fldrslt {\cs37\ul\cf2 228}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer get () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQY}
{\bkmkend AAAAAAAGQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTR" }{}}{\fldrslt {\cs37\ul\cf2 228}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer get () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQY}
{\bkmkend AAAAAAAGQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTS" }{}}{\fldrslt {\cs37\ul\cf2 228}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer get () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQY}
{\bkmkend AAAAAAAGQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTT" }{}}{\fldrslt {\cs37\ul\cf2 228}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer get (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQX}
{\bkmkend AAAAAAAGQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTU" }{}}{\fldrslt {\cs37\ul\cf2 227}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer get (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQX}
{\bkmkend AAAAAAAGQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTV" }{}}{\fldrslt {\cs37\ul\cf2 227}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer get (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQX}
{\bkmkend AAAAAAAGQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTW" }{}}{\fldrslt {\cs37\ul\cf2 227}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer get (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQX}
{\bkmkend AAAAAAAGQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTX" }{}}{\fldrslt {\cs37\ul\cf2 227}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< deleter_type >::type & get_deleter () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRE}
{\bkmkend AAAAAAAGRE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTY" }{}}{\fldrslt {\cs37\ul\cf2 243}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< deleter_type >::type & get_deleter () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRE}
{\bkmkend AAAAAAAGRE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTZ" }{}}{\fldrslt {\cs37\ul\cf2 243}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< deleter_type >::type & get_deleter () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRE}
{\bkmkend AAAAAAAGRE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUA" }{}}{\fldrslt {\cs37\ul\cf2 243}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::remove_reference< deleter_type >::type & get_deleter () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRE}
{\bkmkend AAAAAAAGRE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUB" }{}}{\fldrslt {\cs37\ul\cf2 243}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< deleter_type >::type & get_deleter (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRD}
{\bkmkend AAAAAAAGRD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUC" }{}}{\fldrslt {\cs37\ul\cf2 242}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< deleter_type >::type & get_deleter (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRD}
{\bkmkend AAAAAAAGRD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUD" }{}}{\fldrslt {\cs37\ul\cf2 242}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< deleter_type >::type & get_deleter (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRD}
{\bkmkend AAAAAAAGRD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUE" }{}}{\fldrslt {\cs37\ul\cf2 242}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v get_deleter\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:get_deleter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::remove_reference< deleter_type >::type & get_deleter (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRD}
{\bkmkend AAAAAAAGRD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUF" }{}}{\fldrslt {\cs37\ul\cf2 242}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator bool\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
operator bool () const{\f2 [inline]}, {\f2 [explicit]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRC}
{\bkmkend AAAAAAAGRC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUG" }{}}{\fldrslt {\cs37\ul\cf2 240}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator bool\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
operator bool () const{\f2 [inline]}, {\f2 [explicit]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRC}
{\bkmkend AAAAAAAGRC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUH" }{}}{\fldrslt {\cs37\ul\cf2 240}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator bool\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
operator bool () const{\f2 [inline]}, {\f2 [explicit]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRC}
{\bkmkend AAAAAAAGRC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUI" }{}}{\fldrslt {\cs37\ul\cf2 240}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator bool\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
operator bool () const{\f2 [inline]}, {\f2 [explicit]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRC}
{\bkmkend AAAAAAAGRC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUJ" }{}}{\fldrslt {\cs37\ul\cf2 240}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
reference operator* (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQT}
{\bkmkend AAAAAAAGQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUK" }{}}{\fldrslt {\cs37\ul\cf2 221}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
reference operator* (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQT}
{\bkmkend AAAAAAAGQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUL" }{}}{\fldrslt {\cs37\ul\cf2 221}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
reference operator* (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQT}
{\bkmkend AAAAAAAGQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUM" }{}}{\fldrslt {\cs37\ul\cf2 221}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
reference operator* (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQT}
{\bkmkend AAAAAAAGQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUN" }{}}{\fldrslt {\cs37\ul\cf2 221}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_reference operator* () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQU}
{\bkmkend AAAAAAAGQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUO" }{}}{\fldrslt {\cs37\ul\cf2 222}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_reference operator* () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQU}
{\bkmkend AAAAAAAGQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUP" }{}}{\fldrslt {\cs37\ul\cf2 222}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_reference operator* () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQU}
{\bkmkend AAAAAAAGQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUQ" }{}}{\fldrslt {\cs37\ul\cf2 222}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator*\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_reference operator* () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAGQU}
{\bkmkend AAAAAAAGQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUR" }{}}{\fldrslt {\cs37\ul\cf2 222}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer operator-> () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQW}
{\bkmkend AAAAAAAGQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUS" }{}}{\fldrslt {\cs37\ul\cf2 225}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer operator-> () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQW}
{\bkmkend AAAAAAAGQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUT" }{}}{\fldrslt {\cs37\ul\cf2 225}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer operator-> () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQW}
{\bkmkend AAAAAAAGQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUU" }{}}{\fldrslt {\cs37\ul\cf2 225}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const_pointer operator-> () const{\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQW}
{\bkmkend AAAAAAAGQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUV" }{}}{\fldrslt {\cs37\ul\cf2 225}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer operator-> (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQV}
{\bkmkend AAAAAAAGQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUW" }{}}{\fldrslt {\cs37\ul\cf2 224}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer operator-> (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQV}
{\bkmkend AAAAAAAGQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUX" }{}}{\fldrslt {\cs37\ul\cf2 224}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer operator-> (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQV}
{\bkmkend AAAAAAAGQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUY" }{}}{\fldrslt {\cs37\ul\cf2 224}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator->\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer operator-> (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQV}
{\bkmkend AAAAAAAGQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUZ" }{}}{\fldrslt {\cs37\ul\cf2 224}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v operator=\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQR}
{\bkmkend AAAAAAAGQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVA" }{}}{\fldrslt {\cs37\ul\cf2 214}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v operator=\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQR}
{\bkmkend AAAAAAAGQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVB" }{}}{\fldrslt {\cs37\ul\cf2 214}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v operator=\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQR}
{\bkmkend AAAAAAAGQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVC" }{}}{\fldrslt {\cs37\ul\cf2 214}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v operator=\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::enable_if< std::is_convertible< U *, pointer >::value &&is_default_manageable::value, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
 & >::type operator= (std::unique_ptr< U > &&  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQR}
{\bkmkend AAAAAAAGQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVD" }{}}{\fldrslt {\cs37\ul\cf2 214}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v release\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer release (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRA}
{\bkmkend AAAAAAAGRA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVE" }{}}{\fldrslt {\cs37\ul\cf2 236}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v release\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer release (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRA}
{\bkmkend AAAAAAAGRA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVF" }{}}{\fldrslt {\cs37\ul\cf2 236}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v release\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer release (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRA}
{\bkmkend AAAAAAAGRA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVG" }{}}{\fldrslt {\cs37\ul\cf2 236}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v release\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pointer release (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRA}
{\bkmkend AAAAAAAGRA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVH" }{}}{\fldrslt {\cs37\ul\cf2 236}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v release_unique\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release_unique}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unique_ptr_type release_unique (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRB}
{\bkmkend AAAAAAAGRB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVI" }{}}{\fldrslt {\cs37\ul\cf2 238}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v release_unique\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release_unique}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unique_ptr_type release_unique (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRB}
{\bkmkend AAAAAAAGRB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVJ" }{}}{\fldrslt {\cs37\ul\cf2 238}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v release_unique\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release_unique}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unique_ptr_type release_unique (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRB}
{\bkmkend AAAAAAAGRB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVK" }{}}{\fldrslt {\cs37\ul\cf2 238}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v release_unique\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:release_unique}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unique_ptr_type release_unique (){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGRB}
{\bkmkend AAAAAAAGRB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVL" }{}}{\fldrslt {\cs37\ul\cf2 238}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\xe \v swap\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQZ}
{\bkmkend AAAAAAAGQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVM" }{}}{\fldrslt {\cs37\ul\cf2 230}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}
{\xe \v swap\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQZ}
{\bkmkend AAAAAAAGQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVN" }{}}{\fldrslt {\cs37\ul\cf2 230}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNN" }{}}{\fldrslt {\cs37\ul\cf2 spimpl.hpp}}}
.}\par
}
{\xe \v swap\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQZ}
{\bkmkend AAAAAAAGQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVO" }{}}{\fldrslt {\cs37\ul\cf2 230}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAACKJ" }{}}{\fldrslt {\cs37\ul\cf2 spimplc.hpp}}}
.}\par
}
{\xe \v swap\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:swap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swap ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
< T, Deleter > &  {\i u}){\f2 [inline]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAGQZ}
{\bkmkend AAAAAAAGQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVP" }{}}{\fldrslt {\cs37\ul\cf2 230}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAADHF" }{}}{\fldrslt {\cs37\ul\cf2 spimplmc.hpp}}}
.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de los datos miembro\par
\pard\plain 
{\xe \v ptr_\:unique_impl_ptr< T, Deleter >}
{\xe \v unique_impl_ptr< T, Deleter >\:ptr_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unique_ptr_type ptr_{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAGRF}
{\bkmkend AAAAAAAGRF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVQ" }{}}{\fldrslt {\cs37\ul\cf2 246}}}
 del archivo {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQJ" }{}}{\fldrslt {\cs37\ul\cf2 smimplm.hpp}}}
.}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentaci\'F3n de archivos{\tc \v Documentaci\'F3n de archivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
config.h\par \pard\plain 
{\tc\tcl2 \v code/include/config.h}
{\xe \v code/include/config.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAB}{\bkmkend AAAAAAAAAB}
00001 {\cf21 #ifndef __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAAC}{\bkmkend AAAAAAAAAC}
00002 {\cf21 #define __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAAD}{\bkmkend AAAAAAAAAD}
00003 \par
{\bkmkstart AAAAAAAAAE}{\bkmkend AAAAAAAAAE}
00004 {\cf21 #ifndef JGGTOOLS_ERRNO}\par
{\bkmkstart AAAAAAAAAF}{\bkmkend AAAAAAAAAF}
00005 {\cf21 #define JGGTOOLS_ERRNO 16000}\par
{\bkmkstart AAAAAAAAAG}{\bkmkend AAAAAAAAAG}
00006 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAAH}{\bkmkend AAAAAAAAAH}
00007 \par
{\bkmkstart AAAAAAAAAI}{\bkmkend AAAAAAAAAI}
00008 {\cf21 #ifndef JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAAAJ}{\bkmkend AAAAAAAAAJ}
00009 {\cf21 #define JGGTOOLS_NS jggtools}\par
{\bkmkstart AAAAAAAAAK}{\bkmkend AAAAAAAAAK}
00010 {\cf21 #define NST         JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAAAL}{\bkmkend AAAAAAAAAL}
00011 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAAM}{\bkmkend AAAAAAAAAM}
00012 \par
{\bkmkstart AAAAAAAAAN}{\bkmkend AAAAAAAAAN}
00013 {\cf21 #ifndef JGGTOOLS_MAX_ERR}\par
{\bkmkstart AAAAAAAAAO}{\bkmkend AAAAAAAAAO}
00014 {\cf21 #define MAX_SIZE_ERR 255}\par
{\bkmkstart AAAAAAAAAP}{\bkmkend AAAAAAAAAP}
00015 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAAQ}{\bkmkend AAAAAAAAAQ}
00016 \par
{\bkmkstart AAAAAAAAAR}{\bkmkend AAAAAAAAAR}
00017 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
config.h\par \pard\plain 
{\tc\tcl2 \v old/config.h}
{\xe \v old/config.h}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAAT}{\bkmkend AAAAAAAAAT}
00001 {\cf21 #ifndef __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAAU}{\bkmkend AAAAAAAAAU}
00002 {\cf21 #define __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAAV}{\bkmkend AAAAAAAAAV}
00003 \par
{\bkmkstart AAAAAAAAAW}{\bkmkend AAAAAAAAAW}
00004 {\cf21 #ifndef JGGTOOLS_ERRNO}\par
{\bkmkstart AAAAAAAAAX}{\bkmkend AAAAAAAAAX}
00005 {\cf21 #define JGGTOOLS_ERRNO 16000}\par
{\bkmkstart AAAAAAAAAY}{\bkmkend AAAAAAAAAY}
00006 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAAZ}{\bkmkend AAAAAAAAAZ}
00007 \par
{\bkmkstart AAAAAAAABA}{\bkmkend AAAAAAAABA}
00008 {\cf21 #ifndef JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAABB}{\bkmkend AAAAAAAABB}
00009 {\cf21 #define JGGTOOLS_NS jggtoools}\par
{\bkmkstart AAAAAAAABC}{\bkmkend AAAAAAAABC}
00010 {\cf21 #define NST         JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAABD}{\bkmkend AAAAAAAABD}
00011 {\cf21 #endif}\par
{\bkmkstart AAAAAAAABE}{\bkmkend AAAAAAAABE}
00012 \par
{\bkmkstart AAAAAAAABF}{\bkmkend AAAAAAAABF}
00013 {\cf21 #ifndef JGGTOOLS_MAX_ERR}\par
{\bkmkstart AAAAAAAABG}{\bkmkend AAAAAAAABG}
00014 {\cf21 #define MAX_SIZE_ERR 255}\par
{\bkmkstart AAAAAAAABH}{\bkmkend AAAAAAAABH}
00015 {\cf21 #endif}\par
{\bkmkstart AAAAAAAABI}{\bkmkend AAAAAAAABI}
00016 \par
{\bkmkstart AAAAAAAABJ}{\bkmkend AAAAAAAABJ}
00017 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
date.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/date.hpp}
{\xe \v code/include/date.hpp}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAABL}{\bkmkend AAAAAAAABL}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAABM}{\bkmkend AAAAAAAABM}
00002 \par
{\bkmkstart AAAAAAAABN}{\bkmkend AAAAAAAABN}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAABO}{\bkmkend AAAAAAAABO}
00004 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAABP}{\bkmkend AAAAAAAABP}
00005 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAAABQ}{\bkmkend AAAAAAAABQ}
00006 \par
{\bkmkstart AAAAAAAABR}{\bkmkend AAAAAAAABR}
00007 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAABS}{\bkmkend AAAAAAAABS}
00008 {\cf21 #include "datetimebase.hpp"}\par
{\bkmkstart AAAAAAAABT}{\bkmkend AAAAAAAABT}
00009 \par
{\bkmkstart AAAAAAAABU}{\bkmkend AAAAAAAABU}
00010 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAABV}{\bkmkend AAAAAAAABV}
00011 \par
{\bkmkstart AAAAAAAABW}{\bkmkend AAAAAAAABW}
00012 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAABX}{\bkmkend AAAAAAAABX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 00013}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
 \{\par
{\bkmkstart AAAAAAAABZ}{\bkmkend AAAAAAAABZ}
00014 {\cf17 public}:\par
{\bkmkstart AAAAAAAACA}{\bkmkend AAAAAAAACA}
00015    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
() = {\cf19 default};\par
{\bkmkstart AAAAAAAACB}{\bkmkend AAAAAAAACB}
00016    {\cf20 // Date(const Date& src);}\par
{\bkmkstart AAAAAAAACC}{\bkmkend AAAAAAAACC}
00017    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str     , {\cf18 int} fmt = -1);\par
{\bkmkstart AAAAAAAACE}{\bkmkend AAAAAAAACE}
00018    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 Date}}}
({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt = -1);\par
{\bkmkstart AAAAAAAACF}{\bkmkend AAAAAAAACF}
00019    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAABY" }{}}{\fldrslt {\cs37\ul\cf2 ~Date}}}
();\par
{\bkmkstart AAAAAAAACG}{\bkmkend AAAAAAAACG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 00020}}}
    {\cf17 struct }tm *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACH" }{}}{\fldrslt {\cs37\ul\cf2 getTM}}}
();\par
{\bkmkstart AAAAAAAACI}{\bkmkend AAAAAAAACI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 00021}}}
    {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACJ" }{}}{\fldrslt {\cs37\ul\cf2 getYear}}}
  ();\par
{\bkmkstart AAAAAAAACK}{\bkmkend AAAAAAAACK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 00022}}}
    {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACL" }{}}{\fldrslt {\cs37\ul\cf2 getMonth}}}
 ();\par
{\bkmkstart AAAAAAAACM}{\bkmkend AAAAAAAACM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 00023}}}
    {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACN" }{}}{\fldrslt {\cs37\ul\cf2 getDay}}}
   ();\par
{\bkmkstart AAAAAAAACO}{\bkmkend AAAAAAAACO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 00024}}}
    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
      {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACP" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
 ({\cf17 const} {\cf18 char} *fmt = {\cf22 "%F"});\par
{\bkmkstart AAAAAAAACQ}{\bkmkend AAAAAAAACQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 00025}}}
    {\cf17 const} {\cf18 char} * {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACR" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
   ({\cf17 const} {\cf18 char} *fmt = {\cf22 "%F"});\par
{\bkmkstart AAAAAAAACS}{\bkmkend AAAAAAAACS}
00026 {\cf17 private}:\par
{\bkmkstart AAAAAAAACT}{\bkmkend AAAAAAAACT}
00027    {\cf17 class }DateImpl;\par
{\bkmkstart AAAAAAAACU}{\bkmkend AAAAAAAACU}
00028    unique_ptr<DateImpl> impl_;\par
{\bkmkstart AAAAAAAACV}{\bkmkend AAAAAAAACV}
00029 {\cf20 //   DateTimeBase dtb = DateTimeBase();}\par
{\bkmkstart AAAAAAAACW}{\bkmkend AAAAAAAACW}
00030 {\cf20 //   struct tm *ptm = dtb.getTM();}\par
{\bkmkstart AAAAAAAACX}{\bkmkend AAAAAAAACX}
00031 \};\par
{\bkmkstart AAAAAAAACY}{\bkmkend AAAAAAAACY}
00032 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
datetime.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/datetime.hpp}
{\xe \v code/include/datetime.hpp}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAADA}{\bkmkend AAAAAAAADA}
00001 {\cf21 #pragma once }\par
{\bkmkstart AAAAAAAADB}{\bkmkend AAAAAAAADB}
00002 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAAADC}{\bkmkend AAAAAAAADC}
00003 \par
{\bkmkstart AAAAAAAADD}{\bkmkend AAAAAAAADD}
00004 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAADE}{\bkmkend AAAAAAAADE}
00005 \par
{\bkmkstart AAAAAAAADF}{\bkmkend AAAAAAAADF}
00006 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAADG}{\bkmkend AAAAAAAADG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 00007}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 \{\par
{\bkmkstart AAAAAAAADI}{\bkmkend AAAAAAAADI}
00008    {\cf17 public}:\par
{\bkmkstart AAAAAAAADJ}{\bkmkend AAAAAAAADJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADK" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
();\par
{\bkmkstart AAAAAAAADL}{\bkmkend AAAAAAAADL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 00010}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADM" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str);\par
{\bkmkstart AAAAAAAADN}{\bkmkend AAAAAAAADN}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
({\cf17 const} {\cf18 char} *str);\par
{\bkmkstart AAAAAAAADO}{\bkmkend AAAAAAAADO}
00012       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 ~DateTime}}}
();\par
{\bkmkstart AAAAAAAADP}{\bkmkend AAAAAAAADP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 00013}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADQ" }{}}{\fldrslt {\cs37\ul\cf2 toString}}}
();\par
{\bkmkstart AAAAAAAADR}{\bkmkend AAAAAAAADR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 00014}}}
       {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADS" }{}}{\fldrslt {\cs37\ul\cf2 toChar}}}
();\par
{\bkmkstart AAAAAAAADT}{\bkmkend AAAAAAAADT}
00015    {\cf17 private}:\par
{\bkmkstart AAAAAAAADU}{\bkmkend AAAAAAAADU}
00016       {\cf17 class }DateTimeImpl;\par
{\bkmkstart AAAAAAAADV}{\bkmkend AAAAAAAADV}
00017       unique_ptr<DateTimeImpl, void (*)(DateTimeImpl *)> impl_;\par
{\bkmkstart AAAAAAAADW}{\bkmkend AAAAAAAADW}
00018    \};\par
{\bkmkstart AAAAAAAADX}{\bkmkend AAAAAAAADX}
00019 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
datetimebase.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/datetimebase.hpp}
{\xe \v code/include/datetimebase.hpp}
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAADZ}{\bkmkend AAAAAAAADZ}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAEA}{\bkmkend AAAAAAAAEA}
00002 {\cf21 #include <ctime>}\par
{\bkmkstart AAAAAAAAEB}{\bkmkend AAAAAAAAEB}
00003 \par
{\bkmkstart AAAAAAAAEC}{\bkmkend AAAAAAAAEC}
00004 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAED}{\bkmkend AAAAAAAAED}
00005 \par
{\bkmkstart AAAAAAAAEE}{\bkmkend AAAAAAAAEE}
00006 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAEF}{\bkmkend AAAAAAAAEF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 00007}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 \{\par
{\bkmkstart AAAAAAAAEH}{\bkmkend AAAAAAAAEH}
00008    {\cf17 public}:   \par
{\bkmkstart AAAAAAAAEI}{\bkmkend AAAAAAAAEI}
00009       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
();\par
{\bkmkstart AAAAAAAAEJ}{\bkmkend AAAAAAAAEJ}
00010       {\cf17 struct }tm* getTM();\par
{\bkmkstart AAAAAAAAEK}{\bkmkend AAAAAAAAEK}
00011       {\cf18 void} validateDate({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt = -1);\par
{\bkmkstart AAAAAAAAEL}{\bkmkend AAAAAAAAEL}
00012       {\cf18 void}  validateTime({\cf17 const} {\cf18 char} *str);\par
{\bkmkstart AAAAAAAAEM}{\bkmkend AAAAAAAAEM}
00013       {\cf18 bool}       isLeap({\cf18 int} year);\par
{\bkmkstart AAAAAAAAEN}{\bkmkend AAAAAAAAEN}
00014 \par
{\bkmkstart AAAAAAAAEO}{\bkmkend AAAAAAAAEO}
00015 \par
{\bkmkstart AAAAAAAAEP}{\bkmkend AAAAAAAAEP}
00016       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
    format({\cf17 const} {\cf18 char} *fmt);\par
{\bkmkstart AAAAAAAAEQ}{\bkmkend AAAAAAAAEQ}
00017       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
& setTM({\cf17 struct} tm *ptm);\par
{\bkmkstart AAAAAAAAER}{\bkmkend AAAAAAAAER}
00018     {\cf17 private}:\par
{\bkmkstart AAAAAAAAES}{\bkmkend AAAAAAAAES}
00019       {\cf17 struct }tm mtm;\par
{\bkmkstart AAAAAAAAET}{\bkmkend AAAAAAAAET}
00020       {\cf18 void}       validateDateValues ({\cf17 const} {\cf18 char} *str);\par
{\bkmkstart AAAAAAAAEU}{\bkmkend AAAAAAAAEU}
00021       {\cf18 void}       validateTimeValues ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 str);\par
{\bkmkstart AAAAAAAAEV}{\bkmkend AAAAAAAAEV}
00022       {\cf18 void}       fillTmDate({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt);\par
{\bkmkstart AAAAAAAAEW}{\bkmkend AAAAAAAAEW}
00023       {\cf18 void}       fillTmTime(vector<int> toks);\par
{\bkmkstart AAAAAAAAEX}{\bkmkend AAAAAAAAEX}
00024    \};\par
{\bkmkstart AAAAAAAAEY}{\bkmkend AAAAAAAAEY}
00025 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
decimal.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/decimal.hpp}
{\xe \v code/include/decimal.hpp}
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAFA}{\bkmkend AAAAAAAAFA}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAFB}{\bkmkend AAAAAAAAFB}
00002 \par
{\bkmkstart AAAAAAAAFC}{\bkmkend AAAAAAAAFC}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAFD}{\bkmkend AAAAAAAAFD}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAAFE}{\bkmkend AAAAAAAAFE}
00005 \par
{\bkmkstart AAAAAAAAFF}{\bkmkend AAAAAAAAFF}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAAFG}{\bkmkend AAAAAAAAFG}
00007 \par
{\bkmkstart AAAAAAAAFH}{\bkmkend AAAAAAAAFH}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAFI}{\bkmkend AAAAAAAAFI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 \{\par
{\bkmkstart AAAAAAAAFK}{\bkmkend AAAAAAAAFK}
00010    {\cf17 public}:\par
{\bkmkstart AAAAAAAAFL}{\bkmkend AAAAAAAAFL}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
() = {\cf17 delete};\par
{\bkmkstart AAAAAAAAFM}{\bkmkend AAAAAAAAFM}
00012       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value) \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
(value.c_str()); \}\par
{\bkmkstart AAAAAAAAFN}{\bkmkend AAAAAAAAFN}
00013       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAAFO}{\bkmkend AAAAAAAAFO}
00014       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 float} value);\par
{\bkmkstart AAAAAAAAFP}{\bkmkend AAAAAAAAFP}
00015       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 double} value);\par
{\bkmkstart AAAAAAAAFQ}{\bkmkend AAAAAAAAFQ}
00016       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 long} {\cf18 double} value);\par
{\bkmkstart AAAAAAAAFR}{\bkmkend AAAAAAAAFR}
00017       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 int} value);\par
{\bkmkstart AAAAAAAAFS}{\bkmkend AAAAAAAAFS}
00018       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 long} value);\par
{\bkmkstart AAAAAAAAFT}{\bkmkend AAAAAAAAFT}
00019       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAAFU}{\bkmkend AAAAAAAAFU}
00020       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     toString();\par
{\bkmkstart AAAAAAAAFV}{\bkmkend AAAAAAAAFV}
00021       {\cf18 char}*       toChar();\par
{\bkmkstart AAAAAAAAFW}{\bkmkend AAAAAAAAFW}
00022       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     toStringRounded({\cf18 int} scale = 0);   \par
{\bkmkstart AAAAAAAAFX}{\bkmkend AAAAAAAAFX}
00023       {\cf18 char}*       toCharRounded({\cf18 int} scale = 0);   \par
{\bkmkstart AAAAAAAAFY}{\bkmkend AAAAAAAAFY}
00024       {\cf18 float}       toFloat();\par
{\bkmkstart AAAAAAAAFZ}{\bkmkend AAAAAAAAFZ}
00025       {\cf18 double}      toDouble();\par
{\bkmkstart AAAAAAAAGA}{\bkmkend AAAAAAAAGA}
00026       {\cf18 long} {\cf18 double} toLongDouble();\par
{\bkmkstart AAAAAAAAGB}{\bkmkend AAAAAAAAGB}
00027       {\cf18 long}        toFloor();\par
{\bkmkstart AAAAAAAAGC}{\bkmkend AAAAAAAAGC}
00028       {\cf18 long}        toCeil();\par
{\bkmkstart AAAAAAAAGD}{\bkmkend AAAAAAAAGD}
00029       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
     round({\cf18 int} scale = 0);\par
{\bkmkstart AAAAAAAAGE}{\bkmkend AAAAAAAAGE}
00030 {\cf20 //      const char* format(int scale = -1, int fmt = -1);}\par
{\bkmkstart AAAAAAAAGF}{\bkmkend AAAAAAAAGF}
00031 \par
{\bkmkstart AAAAAAAAGG}{\bkmkend AAAAAAAAGG}
00032         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator+({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGH}{\bkmkend AAAAAAAAGH}
00033         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator-({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGI}{\bkmkend AAAAAAAAGI}
00034         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator*({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGJ}{\bkmkend AAAAAAAAGJ}
00035         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator/({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGK}{\bkmkend AAAAAAAAGK}
00036 \par
{\bkmkstart AAAAAAAAGL}{\bkmkend AAAAAAAAGL}
00037         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator +=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGM}{\bkmkend AAAAAAAAGM}
00038         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator -=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGN}{\bkmkend AAAAAAAAGN}
00039         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator *=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGO}{\bkmkend AAAAAAAAGO}
00040         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 operator /=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&);\par
{\bkmkstart AAAAAAAAGP}{\bkmkend AAAAAAAAGP}
00041 \par
{\bkmkstart AAAAAAAAGQ}{\bkmkend AAAAAAAAGQ}
00042         {\cf18 bool} operator==({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGR}{\bkmkend AAAAAAAAGR}
00043         {\cf18 bool} operator!=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGS}{\bkmkend AAAAAAAAGS}
00044         {\cf18 bool} operator<({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGT}{\bkmkend AAAAAAAAGT}
00045         {\cf18 bool} operator<=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGU}{\bkmkend AAAAAAAAGU}
00046         {\cf18 bool} operator>({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGV}{\bkmkend AAAAAAAAGV}
00047         {\cf18 bool} operator>=({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&) ;\par
{\bkmkstart AAAAAAAAGW}{\bkmkend AAAAAAAAGW}
00048    {\cf17 private}:\par
{\bkmkstart AAAAAAAAGX}{\bkmkend AAAAAAAAGX}
00049       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
({\cf18 long} {\cf18 long} value, {\cf18 int} scale); \par
{\bkmkstart AAAAAAAAGY}{\bkmkend AAAAAAAAGY}
00050       {\cf18 int} scale = 0;\par
{\bkmkstart AAAAAAAAGZ}{\bkmkend AAAAAAAAGZ}
00051       {\cf18 long} {\cf18 long} number = 0; \par
{\bkmkstart AAAAAAAAHA}{\bkmkend AAAAAAAAHA}
00052       {\cf18 char} buffer[512] = \{0x0\}; {\cf20 // Common bufffer}\par
{\bkmkstart AAAAAAAAHB}{\bkmkend AAAAAAAAHB}
00053       {\cf20 // Store values for binary operations }\par
{\bkmkstart AAAAAAAAHC}{\bkmkend AAAAAAAAHC}
00054       {\cf17 struct }opers \{\par
{\bkmkstart AAAAAAAAHD}{\bkmkend AAAAAAAAHD}
00055          {\cf18 long} {\cf18 long} number1;\par
{\bkmkstart AAAAAAAAHE}{\bkmkend AAAAAAAAHE}
00056          {\cf18 long} {\cf18 long} number2;\par
{\bkmkstart AAAAAAAAHF}{\bkmkend AAAAAAAAHF}
00057          {\cf18 int}       scale1;\par
{\bkmkstart AAAAAAAAHG}{\bkmkend AAAAAAAAHG}
00058          {\cf18 int}       scale2;\par
{\bkmkstart AAAAAAAAHH}{\bkmkend AAAAAAAAHH}
00059       \};\par
{\bkmkstart AAAAAAAAHI}{\bkmkend AAAAAAAAHI}
00060       {\cf18 void}    adjustScales({\cf17 struct} opers *);\par
{\bkmkstart AAAAAAAAHJ}{\bkmkend AAAAAAAAHJ}
00061       {\cf18 void}    calculateScale({\cf17 struct} opers *);\par
{\bkmkstart AAAAAAAAHK}{\bkmkend AAAAAAAAHK}
00062       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 add        ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& a, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
&b);\par
{\bkmkstart AAAAAAAAHL}{\bkmkend AAAAAAAAHL}
00063       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 subtract   ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& a, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& b);\par
{\bkmkstart AAAAAAAAHM}{\bkmkend AAAAAAAAHM}
00064       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 multiply   ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& a, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& b);\par
{\bkmkstart AAAAAAAAHN}{\bkmkend AAAAAAAAHN}
00065       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
 divide     ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& a, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAFJ" }{}}{\fldrslt {\cs37\ul\cf2 Decimal}}}
& b);\par
{\bkmkstart AAAAAAAAHO}{\bkmkend AAAAAAAAHO}
00066       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 makeString ({\cf18 long} {\cf18 long} value, {\cf18 int} scale);\par
{\bkmkstart AAAAAAAAHP}{\bkmkend AAAAAAAAHP}
00067       {\cf18 long} {\cf18 long} makeRound({\cf18 int} scale);\par
{\bkmkstart AAAAAAAAHQ}{\bkmkend AAAAAAAAHQ}
00068       {\cf18 void}    setValues();  \par
{\bkmkstart AAAAAAAAHR}{\bkmkend AAAAAAAAHR}
00069    \};\par
{\bkmkstart AAAAAAAAHS}{\bkmkend AAAAAAAAHS}
00070 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
exceptions.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/exceptions.hpp}
{\xe \v code/include/exceptions.hpp}
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAHU}{\bkmkend AAAAAAAAHU}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAHV}{\bkmkend AAAAAAAAHV}
00002 {\cf21 #include <stdexcept>}\par
{\bkmkstart AAAAAAAAHW}{\bkmkend AAAAAAAAHW}
00003 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAAHX}{\bkmkend AAAAAAAAHX}
00004 \par
{\bkmkstart AAAAAAAAHY}{\bkmkend AAAAAAAAHY}
00005 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAHZ}{\bkmkend AAAAAAAAHZ}
00006 {\cf21 #include "msg_locale.hpp"}\par
{\bkmkstart AAAAAAAAIA}{\bkmkend AAAAAAAAIA}
00007 \par
{\bkmkstart AAAAAAAAIB}{\bkmkend AAAAAAAAIB}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAIC}{\bkmkend AAAAAAAAIC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 : {\cf17 public} std::domain_error \{\par
{\bkmkstart AAAAAAAAIE}{\bkmkend AAAAAAAAIE}
00010       {\cf17 public}:\par
{\bkmkstart AAAAAAAAIF}{\bkmkend AAAAAAAAIF}
00011          {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
({\cf17 const} {\cf18 char} *fmt, ...);\par
{\bkmkstart AAAAAAAAIG}{\bkmkend AAAAAAAAIG}
00012          {\cf17 const} {\cf18 char}* what();\par
{\bkmkstart AAAAAAAAIH}{\bkmkend AAAAAAAAIH}
00013       {\cf17 protected}:   \par
{\bkmkstart AAAAAAAAII}{\bkmkend AAAAAAAAII}
00014          {\cf18 void} mountMessage({\cf17 const} {\cf18 char}* fmt, va_list list);\par
{\bkmkstart AAAAAAAAIJ}{\bkmkend AAAAAAAAIJ}
00015       {\cf17 private}:\par
{\bkmkstart AAAAAAAAIK}{\bkmkend AAAAAAAAIK}
00016          std::string message;\par
{\bkmkstart AAAAAAAAIL}{\bkmkend AAAAAAAAIL}
00017    \};\par
{\bkmkstart AAAAAAAAIM}{\bkmkend AAAAAAAAIM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 \{\par
{\bkmkstart AAAAAAAAIO}{\bkmkend AAAAAAAAIO}
00019       {\cf17 public}:\par
{\bkmkstart AAAAAAAAIP}{\bkmkend AAAAAAAAIP}
00020          {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
({\cf17 const} {\cf18 char} *fmt, ...);\par
{\bkmkstart AAAAAAAAIQ}{\bkmkend AAAAAAAAIQ}
00021    \};\par
{\bkmkstart AAAAAAAAIR}{\bkmkend AAAAAAAAIR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 00022}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 ToolsCastException}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAID" }{}}{\fldrslt {\cs37\ul\cf2 ToolsException}}}
 \{\par
{\bkmkstart AAAAAAAAIT}{\bkmkend AAAAAAAAIT}
00023       {\cf17 public}:\par
{\bkmkstart AAAAAAAAIU}{\bkmkend AAAAAAAAIU}
00024          {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIS" }{}}{\fldrslt {\cs37\ul\cf2 ToolsCastException}}}
({\cf17 const} {\cf18 char} *fmt, ...);\par
{\bkmkstart AAAAAAAAIV}{\bkmkend AAAAAAAAIV}
00025    \};\par
{\bkmkstart AAAAAAAAIW}{\bkmkend AAAAAAAAIW}
00026 \par
{\bkmkstart AAAAAAAAIX}{\bkmkend AAAAAAAAIX}
00027 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
integer.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/integer.hpp}
{\xe \v code/include/integer.hpp}
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAIZ}{\bkmkend AAAAAAAAIZ}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAJA}{\bkmkend AAAAAAAAJA}
00002 \par
{\bkmkstart AAAAAAAAJB}{\bkmkend AAAAAAAAJB}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAJC}{\bkmkend AAAAAAAAJC}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAAJD}{\bkmkend AAAAAAAAJD}
00005 \par
{\bkmkstart AAAAAAAAJE}{\bkmkend AAAAAAAAJE}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAAJF}{\bkmkend AAAAAAAAJF}
00007 \par
{\bkmkstart AAAAAAAAJG}{\bkmkend AAAAAAAAJG}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAJH}{\bkmkend AAAAAAAAJH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
 \{\par
{\bkmkstart AAAAAAAAJJ}{\bkmkend AAAAAAAAJJ}
00010    {\cf17 public}:\par
{\bkmkstart AAAAAAAAJK}{\bkmkend AAAAAAAAJK}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
() = {\cf17 delete};\par
{\bkmkstart AAAAAAAAJL}{\bkmkend AAAAAAAAJL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 00012}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value) \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJM" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
(value.c_str()); \}\par
{\bkmkstart AAAAAAAAJN}{\bkmkend AAAAAAAAJN}
00013       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAAJO}{\bkmkend AAAAAAAAJO}
00014       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\cf18 short} value);\par
{\bkmkstart AAAAAAAAJP}{\bkmkend AAAAAAAAJP}
00015       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\cf18 int} value);\par
{\bkmkstart AAAAAAAAJQ}{\bkmkend AAAAAAAAJQ}
00016       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\cf18 long} value);\par
{\bkmkstart AAAAAAAAJR}{\bkmkend AAAAAAAAJR}
00017       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJI" }{}}{\fldrslt {\cs37\ul\cf2 Integer}}}
({\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAAJS}{\bkmkend AAAAAAAAJS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJT" }{}}{\fldrslt {\cs37\ul\cf2 isShort}}}
   () \{ {\cf19 return} mask & 1; \}\par
{\bkmkstart AAAAAAAAJU}{\bkmkend AAAAAAAAJU}
00019       {\cf18 bool} isInt     () \{ {\cf19 return} mask & 2; \}\par
{\bkmkstart AAAAAAAAJV}{\bkmkend AAAAAAAAJV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 00020}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJW" }{}}{\fldrslt {\cs37\ul\cf2 isLong}}}
    () \{ {\cf19 return} mask & 4; \}\par
{\bkmkstart AAAAAAAAJX}{\bkmkend AAAAAAAAJX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 00021}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAJY" }{}}{\fldrslt {\cs37\ul\cf2 isLongLong}}}
() \{ {\cf19 return} mask & 8; \}\par
{\bkmkstart AAAAAAAAJZ}{\bkmkend AAAAAAAAJZ}
00022    {\cf17 private}:\par
{\bkmkstart AAAAAAAAKA}{\bkmkend AAAAAAAAKA}
00023       {\cf18 long} {\cf18 long} value;\par
{\bkmkstart AAAAAAAAKB}{\bkmkend AAAAAAAAKB}
00024       {\cf18 char} mask = 0x01;\par
{\bkmkstart AAAAAAAAKC}{\bkmkend AAAAAAAAKC}
00025       {\cf18 void} validateInteger({\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAAKD}{\bkmkend AAAAAAAAKD}
00026    \};\par
{\bkmkstart AAAAAAAAKE}{\bkmkend AAAAAAAAKE}
00027 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
jggtools.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/jggtools.hpp}
{\xe \v code/include/jggtools.hpp}
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAKG}{\bkmkend AAAAAAAAKG}
00001 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAKH}{\bkmkend AAAAAAAAKH}
00002 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAAKI}{\bkmkend AAAAAAAAKI}
00003 {\cf21 #include "timestamp.hpp"}\par
{\bkmkstart AAAAAAAAKJ}{\bkmkend AAAAAAAAKJ}
00004 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAAKK}{\bkmkend AAAAAAAAKK}
00005 {\cf21 #include "date.hpp"}\par
{\bkmkstart AAAAAAAAKL}{\bkmkend AAAAAAAAKL}
00006 {\cf21 #include "path.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
libconfig.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/libconfig.hpp}
{\xe \v code/include/libconfig.hpp}
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAKN}{\bkmkend AAAAAAAAKN}
00001 {\cf21 #ifndef __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAKO}{\bkmkend AAAAAAAAKO}
00002 {\cf21 #define __JGGTOOLS_CONFIG__}\par
{\bkmkstart AAAAAAAAKP}{\bkmkend AAAAAAAAKP}
00003 \par
{\bkmkstart AAAAAAAAKQ}{\bkmkend AAAAAAAAKQ}
00004 {\cf21 #ifndef JGGTOOLS_ERRNO}\par
{\bkmkstart AAAAAAAAKR}{\bkmkend AAAAAAAAKR}
00005 {\cf21 #define JGGTOOLS_ERRNO 16000}\par
{\bkmkstart AAAAAAAAKS}{\bkmkend AAAAAAAAKS}
00006 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAKT}{\bkmkend AAAAAAAAKT}
00007 \par
{\bkmkstart AAAAAAAAKU}{\bkmkend AAAAAAAAKU}
00008 {\cf21 #ifndef JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAAKV}{\bkmkend AAAAAAAAKV}
00009 {\cf21 #define JGGTOOLS_NS jggtoools}\par
{\bkmkstart AAAAAAAAKW}{\bkmkend AAAAAAAAKW}
00010 {\cf21 #define NST         JGGTOOLS_NS}\par
{\bkmkstart AAAAAAAAKX}{\bkmkend AAAAAAAAKX}
00011 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAKY}{\bkmkend AAAAAAAAKY}
00012 \par
{\bkmkstart AAAAAAAAKZ}{\bkmkend AAAAAAAAKZ}
00013 {\cf21 #ifndef JGGTOOLS_MAX_ERR}\par
{\bkmkstart AAAAAAAALA}{\bkmkend AAAAAAAALA}
00014 {\cf21 #define MAX_SIZE_ERR 255}\par
{\bkmkstart AAAAAAAALB}{\bkmkend AAAAAAAALB}
00015 {\cf21 #endif}\par
{\bkmkstart AAAAAAAALC}{\bkmkend AAAAAAAALC}
00016 \par
{\bkmkstart AAAAAAAALD}{\bkmkend AAAAAAAALD}
00017 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
msg_locale.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/msg_locale.hpp}
{\xe \v code/include/msg_locale.hpp}
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAALF}{\bkmkend AAAAAAAALF}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAALG}{\bkmkend AAAAAAAALG}
00002 \par
{\bkmkstart AAAAAAAALH}{\bkmkend AAAAAAAALH}
00003 {\cf17 constexpr} {\cf17 auto} TXT_ERROR        = {\cf22 "ERROR: "}                                         ;\par
{\bkmkstart AAAAAAAALI}{\bkmkend AAAAAAAALI}
00004 {\cf17 constexpr} {\cf17 auto} TXT_HELP         = {\cf22 "Help requested"}                                  ;\par
{\bkmkstart AAAAAAAALJ}{\bkmkend AAAAAAAALJ}
00005 {\cf17 constexpr} {\cf17 auto} TXT_HELP_DETAIL  = {\cf22 "Help detailed requested"}                         ;\par
{\bkmkstart AAAAAAAALK}{\bkmkend AAAAAAAALK}
00006 {\cf17 constexpr} {\cf17 auto} TXT_ARG_INVALID  = {\cf22 "Invalid argument: '%s'"}                          ;\par
{\bkmkstart AAAAAAAALL}{\bkmkend AAAAAAAALL}
00007 {\cf17 constexpr} {\cf17 auto} TXT_ARG_EXPECTED = {\cf22 "Invalid argument: '%s'. Expected '%s'"}           ;\par
{\bkmkstart AAAAAAAALM}{\bkmkend AAAAAAAALM}
00008 {\cf17 constexpr} {\cf17 auto} TXT_VAL_INVALID  = {\cf22 "Invalid value: '%s'"}                             ;\par
{\bkmkstart AAAAAAAALN}{\bkmkend AAAAAAAALN}
00009 {\cf17 constexpr} {\cf17 auto} TXT_VAL_EXPECTED = {\cf22 "Invalid value: '%s'. Expected '%s'"}              ;\par
{\bkmkstart AAAAAAAALO}{\bkmkend AAAAAAAALO}
00010 {\cf17 constexpr} {\cf17 auto} TXT_ARG_SET      = {\cf22 "Parameter already set: %s"}                       ;\par
{\bkmkstart AAAAAAAALP}{\bkmkend AAAAAAAALP}
00011 {\cf17 constexpr} {\cf17 auto} TXT_ARG_NFND     = {\cf22 "Argument invalid: '%s'"}                          ;\par
{\bkmkstart AAAAAAAALQ}{\bkmkend AAAAAAAALQ}
00012 {\cf17 constexpr} {\cf17 auto} TXT_ARG_NFND1    = {\cf22 "Argument invalid: '%s'. Maybe you tried '%s'"}    ;\par
{\bkmkstart AAAAAAAALR}{\bkmkend AAAAAAAALR}
00013 {\cf17 constexpr} {\cf17 auto} TXT_ARG_NFND2    = {\cf22 "Argument invalid: '%s'. Maybe you tried '%s%s'"}  ;\par
{\bkmkstart AAAAAAAALS}{\bkmkend AAAAAAAALS}
00014 {\cf17 constexpr} {\cf17 auto} TXT_ARG_NFND3    = {\cf22 "Argument invalid: '%s'. Maybe is incomplete"}     ;\par
{\bkmkstart AAAAAAAALT}{\bkmkend AAAAAAAALT}
00015 {\cf17 constexpr} {\cf17 auto} INV_DEFINITION   = {\cf22 "Invalid definition: '%s'"}                        ;\par
{\bkmkstart AAAAAAAALU}{\bkmkend AAAAAAAALU}
00016 {\cf17 constexpr} {\cf17 auto} ERR_ARG_MISSING  = {\cf22 "Missing value for: '%s'"}                         ;\par
{\bkmkstart AAAAAAAALV}{\bkmkend AAAAAAAALV}
00017 {\cf17 constexpr} {\cf17 auto} ERR_ARG_ERR      = {\cf22 "Invalid argument: '%s'"}                          ;\par
{\bkmkstart AAAAAAAALW}{\bkmkend AAAAAAAALW}
00018 {\cf17 constexpr} {\cf17 auto} ERR_ARG_MULT     = {\cf22 "Ambiguous argument: '%s'"}                        ;\par
{\bkmkstart AAAAAAAALX}{\bkmkend AAAAAAAALX}
00019 {\cf17 constexpr} {\cf17 auto} ERR_INV_OPTION   = {\cf22 "Invalid option: '%s'"}                            ;\par
{\bkmkstart AAAAAAAALY}{\bkmkend AAAAAAAALY}
00020 {\cf17 constexpr} {\cf17 auto} ERR_NOT_FND      = {\cf22 "Parameter not found: '%s'"}                       ;\par
{\bkmkstart AAAAAAAALZ}{\bkmkend AAAAAAAALZ}
00021 {\cf17 constexpr} {\cf17 auto} ERR_INV_TYPE     = {\cf22 "Invalid type. Expected '%s'"}                     ;\par
{\bkmkstart AAAAAAAAMA}{\bkmkend AAAAAAAAMA}
00022 {\cf17 constexpr} {\cf17 auto} ERR_ARG_DUP      = {\cf22 "Parameter already set: '%s'"}                     ;\par
{\bkmkstart AAAAAAAAMB}{\bkmkend AAAAAAAAMB}
00023 {\cf17 constexpr} {\cf17 auto} TXT_NO_DIR       = {\cf22 "Is not a directory"}                              ;\par
{\bkmkstart AAAAAAAAMC}{\bkmkend AAAAAAAAMC}
00024 {\cf17 constexpr} {\cf17 auto} TXT_DIR_NOTFND   = {\cf22 "Directory not found"}                             ;\par
{\bkmkstart AAAAAAAAMD}{\bkmkend AAAAAAAAMD}
00025 {\cf17 constexpr} {\cf17 auto} TXT_FILE_NOTFND  = {\cf22 "File not found"}                                  ;\par
{\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00026 {\cf17 constexpr} {\cf17 auto} TXT_FILE_DIR     = {\cf22 "Is a directory"}                                  ;\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00027 \par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00028 {\cf17 constexpr} {\cf17 auto} TXT_DATE         = {\cf22 "Date"}                                            ;\par
{\bkmkstart AAAAAAAAMH}{\bkmkend AAAAAAAAMH}
00029 {\cf17 constexpr} {\cf17 auto} TXT_TIME         = {\cf22 "Time"}                                            ;\par
{\bkmkstart AAAAAAAAMI}{\bkmkend AAAAAAAAMI}
00030 {\cf17 constexpr} {\cf17 auto} TXT_DATETIME     = {\cf22 "Datetime"}                                        ;\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00031 {\cf17 constexpr} {\cf17 auto} TXT_TMS          = {\cf22 "Timestamp"}                                       ;\par
{\bkmkstart AAAAAAAAMK}{\bkmkend AAAAAAAAMK}
00032 {\cf17 constexpr} {\cf17 auto} TXT_NUMBER       = {\cf22 "Number"}                                          ;\par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00033 {\cf17 constexpr} {\cf17 auto} TXT_DECIMAL      = {\cf22 "Decimal"}                                         ;\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00034 {\cf17 constexpr} {\cf17 auto} TXT_LONGNUMBER   = {\cf22 "Long Number"}                                     ;\par
{\bkmkstart AAAAAAAAMN}{\bkmkend AAAAAAAAMN}
00035 {\cf17 constexpr} {\cf17 auto} TXT_LONGDECIMAL  = {\cf22 "Long Decimal"}                                    ;\par
{\bkmkstart AAAAAAAAMO}{\bkmkend AAAAAAAAMO}
00036 {\cf17 constexpr} {\cf17 auto} TXT_DIR          = {\cf22 "Directory"}      ;\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00037 {\cf17 constexpr} {\cf17 auto} TXT_FILE         = {\cf22 "File"}           ;\par
{\bkmkstart AAAAAAAAMQ}{\bkmkend AAAAAAAAMQ}
00038 \par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00039 {\cf17 constexpr} {\cf17 auto} BAD_TIMESTAMP    = {\cf22 "'%s' Is not a valid timestamp"}                   ;\par
{\bkmkstart AAAAAAAAMS}{\bkmkend AAAAAAAAMS}
00040 {\cf17 constexpr} {\cf17 auto} BAD_DATE         = {\cf22 "'%s' Is not a valid date"}                        ;\par
{\bkmkstart AAAAAAAAMT}{\bkmkend AAAAAAAAMT}
00041 {\cf17 constexpr} {\cf17 auto} BAD_TIME         = {\cf22 "'%s' Is not a valid time"}                        ;\par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00042 {\cf17 constexpr} {\cf17 auto} BAD_DATETIME     = {\cf22 "'%s' Is not a valid datetime"}                    ;\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00043 {\cf17 constexpr} {\cf17 auto} BAD_NATURAL      = {\cf22 "'%s' Is not a natural number"}                    ;\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00044 {\cf17 constexpr} {\cf17 auto} BAD_INTEGER      = {\cf22 "'%s' Is not an integer number"}                   ;\par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00045 {\cf17 constexpr} {\cf17 auto} BAD_REAL         = {\cf22 "'%s' Is not a real number"}                       ;\par
{\bkmkstart AAAAAAAAMY}{\bkmkend AAAAAAAAMY}
00046 {\cf17 constexpr} {\cf17 auto} BAD_DECIMAL      = {\cf22 "'%s' Is not a decimal number"}                    ;\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
natural.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/natural.hpp}
{\xe \v code/include/natural.hpp}
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAANB}{\bkmkend AAAAAAAANB}
00002 \par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00005 \par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAANG}{\bkmkend AAAAAAAANG}
00007 \par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAANI}{\bkmkend AAAAAAAANI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
 \{\par
{\bkmkstart AAAAAAAANK}{\bkmkend AAAAAAAANK}
00010    {\cf17 public}:\par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
() = {\cf17 delete};\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 00012}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value) \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANN" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
(value.c_str()); \}\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00013       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00014       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\cf18 short} value);\par
{\bkmkstart AAAAAAAANQ}{\bkmkend AAAAAAAANQ}
00015       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\cf18 int} value);\par
{\bkmkstart AAAAAAAANR}{\bkmkend AAAAAAAANR}
00016       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\cf18 long} value);\par
{\bkmkstart AAAAAAAANS}{\bkmkend AAAAAAAANS}
00017       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANJ" }{}}{\fldrslt {\cs37\ul\cf2 Natural}}}
({\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANU" }{}}{\fldrslt {\cs37\ul\cf2 isShort}}}
   () \{ {\cf19 return} mask & 1; \}\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00019       {\cf18 bool} isInt     () \{ {\cf19 return} mask & 2; \}\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 00020}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANX" }{}}{\fldrslt {\cs37\ul\cf2 isLong}}}
    () \{ {\cf19 return} mask & 4; \}\par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 00021}}}
       {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAANZ" }{}}{\fldrslt {\cs37\ul\cf2 isLongLong}}}
() \{ {\cf19 return} mask & 8; \}\par
{\bkmkstart AAAAAAAAOA}{\bkmkend AAAAAAAAOA}
00022    {\cf17 private}:\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00023       {\cf18 long} {\cf18 long} value;\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00024       {\cf18 char} mask = 0x01;\par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00025       {\cf18 void} validateNatural({\cf18 unsigned} {\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00026    \};\par
{\bkmkstart AAAAAAAAOF}{\bkmkend AAAAAAAAOF}
00027 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
path.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/path.hpp}
{\xe \v code/include/path.hpp}
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAOI}{\bkmkend AAAAAAAAOI}
00002 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAAOJ}{\bkmkend AAAAAAAAOJ}
00003 \par
{\bkmkstart AAAAAAAAOK}{\bkmkend AAAAAAAAOK}
00004 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00005 \par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAAON}{\bkmkend AAAAAAAAON}
00007 \par
{\bkmkstart AAAAAAAAOO}{\bkmkend AAAAAAAAOO}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
 \{\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00010    {\cf17 public}:\par
{\bkmkstart AAAAAAAAOS}{\bkmkend AAAAAAAAOS}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
() = {\cf17 delete};\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00012       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
({\cf18 string} value);\par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00013       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAOQ" }{}}{\fldrslt {\cs37\ul\cf2 Path}}}
({\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAAOV}{\bkmkend AAAAAAAAOV}
00014       {\cf18 bool} isDir();\par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00015       {\cf18 bool} isFile();\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00016       {\cf18 bool} exists();\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00017       {\cf18 string} getDrive();\par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00018       {\cf18 string} getDir();\par
{\bkmkstart AAAAAAAAPA}{\bkmkend AAAAAAAAPA}
00019       {\cf18 string} getName();\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00020       {\cf18 string} getExt(); \par
{\bkmkstart AAAAAAAAPC}{\bkmkend AAAAAAAAPC}
00021       {\cf18 string} getPath();\par
{\bkmkstart AAAAAAAAPD}{\bkmkend AAAAAAAAPD}
00022    {\cf17 private}:\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00023       {\cf18 string} path;\par
{\bkmkstart AAAAAAAAPF}{\bkmkend AAAAAAAAPF}
00024 \par
{\bkmkstart AAAAAAAAPG}{\bkmkend AAAAAAAAPG}
00025    \};\par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00026 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
real.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/real.hpp}
{\xe \v code/include/real.hpp}
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAPJ}{\bkmkend AAAAAAAAPJ}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAPK}{\bkmkend AAAAAAAAPK}
00002 \par
{\bkmkstart AAAAAAAAPL}{\bkmkend AAAAAAAAPL}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAAPM}{\bkmkend AAAAAAAAPM}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00005 \par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAAPP}{\bkmkend AAAAAAAAPP}
00007 \par
{\bkmkstart AAAAAAAAPQ}{\bkmkend AAAAAAAAPQ}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAAPR}{\bkmkend AAAAAAAAPR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 00009}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
 \{\par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00010    {\cf17 public}:\par
{\bkmkstart AAAAAAAAPU}{\bkmkend AAAAAAAAPU}
00011       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
() = {\cf17 delete};\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00012       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 value) \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
(value.c_str()); \}\par
{\bkmkstart AAAAAAAAPW}{\bkmkend AAAAAAAAPW}
00013       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
({\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00014       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
({\cf18 float} value);\par
{\bkmkstart AAAAAAAAPY}{\bkmkend AAAAAAAAPY}
00015       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
({\cf18 double} value);\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00016       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAPS" }{}}{\fldrslt {\cs37\ul\cf2 Real}}}
({\cf18 long} {\cf18 double} value);\par
{\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00017       {\cf18 bool} isFloat   () \{ {\cf19 return} mask & 1; \}\par
{\bkmkstart AAAAAAAAQB}{\bkmkend AAAAAAAAQB}
00018       {\cf18 bool} isDouble     () \{ {\cf19 return} mask & 2; \}\par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00019       {\cf18 bool} isLongDouble    () \{ {\cf19 return} mask & 4; \}\par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00020    {\cf17 private}:\par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00021       {\cf18 long} {\cf18 long} value;\par
{\bkmkstart AAAAAAAAQF}{\bkmkend AAAAAAAAQF}
00022       {\cf18 char} mask = 0x01;\par
{\bkmkstart AAAAAAAAQG}{\bkmkend AAAAAAAAQG}
00023       {\cf18 void} validateReal({\cf18 long} {\cf18 long} value);\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00024    \};\par
{\bkmkstart AAAAAAAAQI}{\bkmkend AAAAAAAAQI}
00025 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
smimplm.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/smimplm.hpp}
{\xe \v code/include/smimplm.hpp}
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00002 {\cf20 *   Smart Pointer to IMPL Moveable}\par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00003 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAAAQN}{\bkmkend AAAAAAAAQN}
00004 {\cf20     A Smart Pointer to IMPLementation (i.e. Smart PIMPL or just SPIMPL).}\par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00005 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00006 {\cf20 }\par
{\bkmkstart AAAAAAAAQQ}{\bkmkend AAAAAAAAQQ}
00007 {\cf20     Version: 1.2}\par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00008 {\cf20 }\par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00009 {\cf20     Latest version:}\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00010 {\cf20         https://github.com/oliora/samples/blob/master/spimpl.h}\par
{\bkmkstart AAAAAAAAQU}{\bkmkend AAAAAAAAQU}
00011 {\cf20     Rationale and description:}\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00012 {\cf20         http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html}\par
{\bkmkstart AAAAAAAAQW}{\bkmkend AAAAAAAAQW}
00013 {\cf20 }\par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00014 {\cf20     Copyright (c) 2015 Andrey Upadyshev (oliora@gmail.com)}\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00015 {\cf20 }\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00016 {\cf20     Distributed under the Boost Software License, Version 1.0.}\par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00017 {\cf20     See http://www.boost.org/LICENSE_1_0.txt}\par
{\bkmkstart AAAAAAAARB}{\bkmkend AAAAAAAARB}
00018 {\cf20 }\par
{\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00019 {\cf20     Changes history}\par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00020 {\cf20     ---------------}\par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00021 {\cf20     v1.2:}\par
{\bkmkstart AAAAAAAARF}{\bkmkend AAAAAAAARF}
00022 {\cf20         - const correctness}\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00023 {\cf20     v1.1:}\par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00024 {\cf20         - auto_ptr support is disabled by default for C++17 compatibility}\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00025 {\cf20     v1.0:}\par
{\bkmkstart AAAAAAAARJ}{\bkmkend AAAAAAAARJ}
00026 {\cf20         - Released}\par
{\bkmkstart AAAAAAAARK}{\bkmkend AAAAAAAARK}
00027 {\cf20  */}\par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00028 \par
{\bkmkstart AAAAAAAARM}{\bkmkend AAAAAAAARM}
00029 {\cf21 #ifndef __SPIMPLM_HPP__}\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00030 {\cf21 #define __SPIMPLM_HPP__}\par
{\bkmkstart AAAAAAAARO}{\bkmkend AAAAAAAARO}
00031 \par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00032 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAAARQ}{\bkmkend AAAAAAAARQ}
00033 {\cf21 #include <type_traits>}\par
{\bkmkstart AAAAAAAARR}{\bkmkend AAAAAAAARR}
00034 {\cf21 #include <cassert>}\par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00035 \par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00036 \par
{\bkmkstart AAAAAAAARU}{\bkmkend AAAAAAAARU}
00037 {\cf21 #if defined _MSC_VER && _MSC_VER < 1900  }{\cf20 // MS Visual Studio before VS2015}\par
{\bkmkstart AAAAAAAARV}{\bkmkend AAAAAAAARV}
00038 {\cf21 #define SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAAARW}{\bkmkend AAAAAAAARW}
00039 {\cf21 #define SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAAARX}{\bkmkend AAAAAAAARX}
00040 {\cf21 #define SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAAARY}{\bkmkend AAAAAAAARY}
00041 {\cf21 #endif}\par
{\bkmkstart AAAAAAAARZ}{\bkmkend AAAAAAAARZ}
00042 \par
{\bkmkstart AAAAAAAASA}{\bkmkend AAAAAAAASA}
00043 {\cf21 #if ! defined SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAAASB}{\bkmkend AAAAAAAASB}
00044 {\cf21 #define SPIMPL_NOEXCEPT noexcept}\par
{\bkmkstart AAAAAAAASC}{\bkmkend AAAAAAAASC}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAAASD}{\bkmkend AAAAAAAASD}
00046 {\cf21 #define SPIMPL_NOEXCEPT}\par
{\bkmkstart AAAAAAAASE}{\bkmkend AAAAAAAASE}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAAASF}{\bkmkend AAAAAAAASF}
00048 \par
{\bkmkstart AAAAAAAASG}{\bkmkend AAAAAAAASG}
00049 {\cf21 #if ! defined SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAAASH}{\bkmkend AAAAAAAASH}
00050 {\cf21 #define SPIMPL_CONSTEXPR constexpr}\par
{\bkmkstart AAAAAAAASI}{\bkmkend AAAAAAAASI}
00051 {\cf21 #else}\par
{\bkmkstart AAAAAAAASJ}{\bkmkend AAAAAAAASJ}
00052 {\cf21 #define SPIMPL_CONSTEXPR}\par
{\bkmkstart AAAAAAAASK}{\bkmkend AAAAAAAASK}
00053 {\cf21 #endif}\par
{\bkmkstart AAAAAAAASL}{\bkmkend AAAAAAAASL}
00054 \par
{\bkmkstart AAAAAAAASM}{\bkmkend AAAAAAAASM}
00055 {\cf20 // define SPIMPL_HAS_AUTO_PTR to enable constructor and assignment operator that accept std::auto_ptr}\par
{\bkmkstart AAAAAAAASN}{\bkmkend AAAAAAAASN}
00056 {\cf20 // TODO: auto detect std::auto_ptr support}\par
{\bkmkstart AAAAAAAASO}{\bkmkend AAAAAAAASO}
00057 \par
{\bkmkstart AAAAAAAASP}{\bkmkend AAAAAAAASP}
00058 \par
{\bkmkstart AAAAAAAASQ}{\bkmkend AAAAAAAASQ}
00059 {\cf17 namespace }spimpl  \{\par
{\bkmkstart AAAAAAAASR}{\bkmkend AAAAAAAASR}
00060     {\cf17 namespace }details \{\par
{\bkmkstart AAAAAAAASS}{\bkmkend AAAAAAAASS}
00061         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAAST}{\bkmkend AAAAAAAAST}
00062         T *default_copy(T *src)\par
{\bkmkstart AAAAAAAASU}{\bkmkend AAAAAAAASU}
00063         \{\par
{\bkmkstart AAAAAAAASV}{\bkmkend AAAAAAAASV}
00064             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAAASW}{\bkmkend AAAAAAAASW}
00065             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAAASX}{\bkmkend AAAAAAAASX}
00066             {\cf19 return} {\cf17 new} T(*src);\par
{\bkmkstart AAAAAAAASY}{\bkmkend AAAAAAAASY}
00067         \}\par
{\bkmkstart AAAAAAAASZ}{\bkmkend AAAAAAAASZ}
00068 \par
{\bkmkstart AAAAAAAATA}{\bkmkend AAAAAAAATA}
00069         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAATB}{\bkmkend AAAAAAAATB}
00070         {\cf18 void} default_delete(T *p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAATC}{\bkmkend AAAAAAAATC}
00071         \{\par
{\bkmkstart AAAAAAAATD}{\bkmkend AAAAAAAATD}
00072             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAAATE}{\bkmkend AAAAAAAATE}
00073             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAAATF}{\bkmkend AAAAAAAATF}
00074             {\cf17 delete} p;\par
{\bkmkstart AAAAAAAATG}{\bkmkend AAAAAAAATG}
00075         \}\par
{\bkmkstart AAAAAAAATH}{\bkmkend AAAAAAAATH}
00076 \par
{\bkmkstart AAAAAAAATI}{\bkmkend AAAAAAAATI}
00077         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAATJ}{\bkmkend AAAAAAAATJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATK" }{}}{\fldrslt {\cs37\ul\cf2 00078}}}
         {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATK" }{}}{\fldrslt {\cs37\ul\cf2 default_deleter}}}
 \{\par
{\bkmkstart AAAAAAAATL}{\bkmkend AAAAAAAATL}
00079             {\cf17 using} type = void (*)(T*);\par
{\bkmkstart AAAAAAAATM}{\bkmkend AAAAAAAATM}
00080         \};\par
{\bkmkstart AAAAAAAATN}{\bkmkend AAAAAAAATN}
00081 \par
{\bkmkstart AAAAAAAATO}{\bkmkend AAAAAAAATO}
00082         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAATP}{\bkmkend AAAAAAAATP}
00083         {\cf17 using} default_deleter_t = {\cf17 typename} default_deleter<T>::type;\par
{\bkmkstart AAAAAAAATQ}{\bkmkend AAAAAAAATQ}
00084 \par
{\bkmkstart AAAAAAAATR}{\bkmkend AAAAAAAATR}
00085         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAATS}{\bkmkend AAAAAAAATS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 00086}}}
         {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAATT" }{}}{\fldrslt {\cs37\ul\cf2 default_copier}}}
 \{\par
{\bkmkstart AAAAAAAATU}{\bkmkend AAAAAAAATU}
00087             {\cf17 using} type = T* (*)(T*);\par
{\bkmkstart AAAAAAAATV}{\bkmkend AAAAAAAATV}
00088         \};\par
{\bkmkstart AAAAAAAATW}{\bkmkend AAAAAAAATW}
00089 \par
{\bkmkstart AAAAAAAATX}{\bkmkend AAAAAAAATX}
00090         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAATY}{\bkmkend AAAAAAAATY}
00091         {\cf17 using} default_copier_t = {\cf17 typename} default_copier<T>::type;\par
{\bkmkstart AAAAAAAATZ}{\bkmkend AAAAAAAATZ}
00092 \par
{\bkmkstart AAAAAAAAUA}{\bkmkend AAAAAAAAUA}
00093         {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAAAUB}{\bkmkend AAAAAAAAUB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 00094}}}
         {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
: {\cf17 public} std::integral_constant<bool,\par
{\bkmkstart AAAAAAAAUD}{\bkmkend AAAAAAAAUD}
00095             std::is_same<D, default_deleter_t<T>>::value &&\par
{\bkmkstart AAAAAAAAUE}{\bkmkend AAAAAAAAUE}
00096             std::is_same<C, default_copier_t<T>>::value\par
{\bkmkstart AAAAAAAAUF}{\bkmkend AAAAAAAAUF}
00097         > \{\};\par
{\bkmkstart AAAAAAAAUG}{\bkmkend AAAAAAAAUG}
00098     \}\par
{\bkmkstart AAAAAAAAUH}{\bkmkend AAAAAAAAUH}
00099 \par
{\bkmkstart AAAAAAAAUI}{\bkmkend AAAAAAAAUI}
00100 \par
{\bkmkstart AAAAAAAAUJ}{\bkmkend AAAAAAAAUJ}
00101     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>>\par
{\bkmkstart AAAAAAAAUK}{\bkmkend AAAAAAAAUK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 00102}}}
     {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
\par
{\bkmkstart AAAAAAAAUM}{\bkmkend AAAAAAAAUM}
00103     \{\par
{\bkmkstart AAAAAAAAUN}{\bkmkend AAAAAAAAUN}
00104         {\cf17 protected}:\par
{\bkmkstart AAAAAAAAUO}{\bkmkend AAAAAAAAUO}
00105         {\cf17 static_assert}(!std::is_array<T>::value, {\cf22 "unique_impl_ptr specialization for arrays is not implemented"});\par
{\bkmkstart AAAAAAAAUP}{\bkmkend AAAAAAAAUP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 00106}}}
         {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 dummy_t_}}}
 \{{\cf18 int} dummy__;\};\par
{\bkmkstart AAAAAAAAUR}{\bkmkend AAAAAAAAUR}
00107 \par
{\bkmkstart AAAAAAAAUS}{\bkmkend AAAAAAAAUS}
00108     {\cf17 public}:\par
{\bkmkstart AAAAAAAAUT}{\bkmkend AAAAAAAAUT}
00109         {\cf17 using} pointer = T*;\par
{\bkmkstart AAAAAAAAUU}{\bkmkend AAAAAAAAUU}
00110         {\cf17 using} const_pointer = {\cf17 typename} std::add_const<T>::type *;\par
{\bkmkstart AAAAAAAAUV}{\bkmkend AAAAAAAAUV}
00111         {\cf17 using} reference = T&;\par
{\bkmkstart AAAAAAAAUW}{\bkmkend AAAAAAAAUW}
00112         {\cf17 using} const_reference = {\cf17 typename} std::add_const<T>::type &;\par
{\bkmkstart AAAAAAAAUX}{\bkmkend AAAAAAAAUX}
00113         {\cf17 using} element_type = T;\par
{\bkmkstart AAAAAAAAUY}{\bkmkend AAAAAAAAUY}
00114         {\cf17 using} deleter_type = {\cf17 typename} std::decay<Deleter>::type;\par
{\bkmkstart AAAAAAAAUZ}{\bkmkend AAAAAAAAUZ}
00115         {\cf17 using} unique_ptr_type = std::unique_ptr<T, deleter_type>;\par
{\bkmkstart AAAAAAAAVA}{\bkmkend AAAAAAAAVA}
00116         {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable<T, deleter_type>}}}
;\par
{\bkmkstart AAAAAAAAVB}{\bkmkend AAAAAAAAVB}
00117 \par
{\bkmkstart AAAAAAAAVC}{\bkmkend AAAAAAAAVC}
00118         SPIMPL_CONSTEXPR {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAVD}{\bkmkend AAAAAAAAVD}
00119         : ptr_({\cf18 nullptr}, deleter_type\{\}) \{\}\par
{\bkmkstart AAAAAAAAVE}{\bkmkend AAAAAAAAVE}
00120 \par
{\bkmkstart AAAAAAAAVF}{\bkmkend AAAAAAAAVF}
00121         SPIMPL_CONSTEXPR unique_impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAVG}{\bkmkend AAAAAAAAVG}
00122         : unique_impl_ptr() \{\}\par
{\bkmkstart AAAAAAAAVH}{\bkmkend AAAAAAAAVH}
00123 \par
{\bkmkstart AAAAAAAAVI}{\bkmkend AAAAAAAAVI}
00124         {\cf17 template}<{\cf17 class} D>\par
{\bkmkstart AAAAAAAAVJ}{\bkmkend AAAAAAAAVJ}
00125         unique_impl_ptr(pointer p, D&& d,\par
{\bkmkstart AAAAAAAAVK}{\bkmkend AAAAAAAAVK}
00126                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAVL}{\bkmkend AAAAAAAAVL}
00127                     std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAAAVM}{\bkmkend AAAAAAAAVM}
00128                     dummy_t_\par
{\bkmkstart AAAAAAAAVN}{\bkmkend AAAAAAAAVN}
00129                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAVO}{\bkmkend AAAAAAAAVO}
00130         : ptr_(std::move(p), std::forward<D>(d)) \{\}\par
{\bkmkstart AAAAAAAAVP}{\bkmkend AAAAAAAAVP}
00131 \par
{\bkmkstart AAAAAAAAVQ}{\bkmkend AAAAAAAAVQ}
00132         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAAVR}{\bkmkend AAAAAAAAVR}
00133         unique_impl_ptr(U *u,\par
{\bkmkstart AAAAAAAAVS}{\bkmkend AAAAAAAAVS}
00134                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAVT}{\bkmkend AAAAAAAAVT}
00135                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAVU}{\bkmkend AAAAAAAAVU}
00136                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAAAVV}{\bkmkend AAAAAAAAVV}
00137                     dummy_t_\par
{\bkmkstart AAAAAAAAVW}{\bkmkend AAAAAAAAVW}
00138                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAVX}{\bkmkend AAAAAAAAVX}
00139         : unique_impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAAAVY}{\bkmkend AAAAAAAAVY}
00140 \par
{\bkmkstart AAAAAAAAVZ}{\bkmkend AAAAAAAAVZ}
00141 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAAAWA}{\bkmkend AAAAAAAAWA}
00142         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAAAWB}{\bkmkend AAAAAAAAWB}
00143 {\cf21 #else}\par
{\bkmkstart AAAAAAAAWC}{\bkmkend AAAAAAAAWC}
00144         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAWD}{\bkmkend AAAAAAAAWD}
00145         : ptr_(std::move(r.ptr_)) \{\}\par
{\bkmkstart AAAAAAAAWE}{\bkmkend AAAAAAAAWE}
00146 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAWF}{\bkmkend AAAAAAAAWF}
00147 \par
{\bkmkstart AAAAAAAAWG}{\bkmkend AAAAAAAAWG}
00148 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAAAWH}{\bkmkend AAAAAAAAWH}
00149         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAAWI}{\bkmkend AAAAAAAAWI}
00150         unique_impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAAAWJ}{\bkmkend AAAAAAAAWJ}
00151                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAWK}{\bkmkend AAAAAAAAWK}
00152                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAWL}{\bkmkend AAAAAAAAWL}
00153                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAAAWM}{\bkmkend AAAAAAAAWM}
00154                     dummy_t_\par
{\bkmkstart AAAAAAAAWN}{\bkmkend AAAAAAAAWN}
00155                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAWO}{\bkmkend AAAAAAAAWO}
00156         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAAAWP}{\bkmkend AAAAAAAAWP}
00157 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAWQ}{\bkmkend AAAAAAAAWQ}
00158 \par
{\bkmkstart AAAAAAAAWR}{\bkmkend AAAAAAAAWR}
00159         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAAWS}{\bkmkend AAAAAAAAWS}
00160         unique_impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAAAWT}{\bkmkend AAAAAAAAWT}
00161                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAWU}{\bkmkend AAAAAAAAWU}
00162                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAWV}{\bkmkend AAAAAAAAWV}
00163                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAAAWW}{\bkmkend AAAAAAAAWW}
00164                     dummy_t_\par
{\bkmkstart AAAAAAAAWX}{\bkmkend AAAAAAAAWX}
00165                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAWY}{\bkmkend AAAAAAAAWY}
00166         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAAAWZ}{\bkmkend AAAAAAAAWZ}
00167 \par
{\bkmkstart AAAAAAAAXA}{\bkmkend AAAAAAAAXA}
00168         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAAAXB}{\bkmkend AAAAAAAAXB}
00169         unique_impl_ptr(std::unique_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAAAXC}{\bkmkend AAAAAAAAXC}
00170                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAXD}{\bkmkend AAAAAAAAXD}
00171                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAXE}{\bkmkend AAAAAAAAXE}
00172                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAAAXF}{\bkmkend AAAAAAAAXF}
00173                     dummy_t_\par
{\bkmkstart AAAAAAAAXG}{\bkmkend AAAAAAAAXG}
00174                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAXH}{\bkmkend AAAAAAAAXH}
00175         : ptr_(std::move(u)) \{\}\par
{\bkmkstart AAAAAAAAXI}{\bkmkend AAAAAAAAXI}
00176 \par
{\bkmkstart AAAAAAAAXJ}{\bkmkend AAAAAAAAXJ}
00177         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAAAXK}{\bkmkend AAAAAAAAXK}
00178         unique_impl_ptr(unique_impl_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAAAXL}{\bkmkend AAAAAAAAXL}
00179                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAXM}{\bkmkend AAAAAAAAXM}
00180                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAXN}{\bkmkend AAAAAAAAXN}
00181                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAAAXO}{\bkmkend AAAAAAAAXO}
00182                     dummy_t_\par
{\bkmkstart AAAAAAAAXP}{\bkmkend AAAAAAAAXP}
00183                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAXQ}{\bkmkend AAAAAAAAXQ}
00184         : ptr_(std::move(u.ptr_)) \{\}\par
{\bkmkstart AAAAAAAAXR}{\bkmkend AAAAAAAAXR}
00185 \par
{\bkmkstart AAAAAAAAXS}{\bkmkend AAAAAAAAXS}
00186         unique_impl_ptr({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAAAXT}{\bkmkend AAAAAAAAXT}
00187 \par
{\bkmkstart AAAAAAAAXU}{\bkmkend AAAAAAAAXU}
00188 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAAAXV}{\bkmkend AAAAAAAAXV}
00189         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAAAXW}{\bkmkend AAAAAAAAXW}
00190 {\cf21 #else}\par
{\bkmkstart AAAAAAAAXX}{\bkmkend AAAAAAAAXX}
00191         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAAAXY}{\bkmkend AAAAAAAAXY}
00192             ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAAAXZ}{\bkmkend AAAAAAAAXZ}
00193             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAAYA}{\bkmkend AAAAAAAAYA}
00194         \}\par
{\bkmkstart AAAAAAAAYB}{\bkmkend AAAAAAAAYB}
00195 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAYC}{\bkmkend AAAAAAAAYC}
00196 \par
{\bkmkstart AAAAAAAAYD}{\bkmkend AAAAAAAAYD}
00197 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAAAYE}{\bkmkend AAAAAAAAYE}
00198         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAAYF}{\bkmkend AAAAAAAAYF}
00199         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAYG}{\bkmkend AAAAAAAAYG}
00200             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAYH}{\bkmkend AAAAAAAAYH}
00201                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAAAYI}{\bkmkend AAAAAAAAYI}
00202             unique_impl_ptr&\par
{\bkmkstart AAAAAAAAYJ}{\bkmkend AAAAAAAAYJ}
00203         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAYK}{\bkmkend AAAAAAAAYK}
00204         \{\par
{\bkmkstart AAAAAAAAYL}{\bkmkend AAAAAAAAYL}
00205             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAAAYM}{\bkmkend AAAAAAAAYM}
00206         \}\par
{\bkmkstart AAAAAAAAYN}{\bkmkend AAAAAAAAYN}
00207 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAYO}{\bkmkend AAAAAAAAYO}
00208 \par
{\bkmkstart AAAAAAAAYP}{\bkmkend AAAAAAAAYP}
00209         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAAYQ}{\bkmkend AAAAAAAAYQ}
00210         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAAYR}{\bkmkend AAAAAAAAYR}
00211             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAAYS}{\bkmkend AAAAAAAAYS}
00212                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAAAYT}{\bkmkend AAAAAAAAYT}
00213             unique_impl_ptr&\par
{\bkmkstart AAAAAAAAYU}{\bkmkend AAAAAAAAYU}
00214         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAYV}{\bkmkend AAAAAAAAYV}
00215         \{\par
{\bkmkstart AAAAAAAAYW}{\bkmkend AAAAAAAAYW}
00216             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAAAYX}{\bkmkend AAAAAAAAYX}
00217         \}\par
{\bkmkstart AAAAAAAAYY}{\bkmkend AAAAAAAAYY}
00218 \par
{\bkmkstart AAAAAAAAYZ}{\bkmkend AAAAAAAAYZ}
00219         reference operator=({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAAAZA}{\bkmkend AAAAAAAAZA}
00220 \par
{\bkmkstart AAAAAAAAZB}{\bkmkend AAAAAAAAZB}
00221         reference operator*() \{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAAAZC}{\bkmkend AAAAAAAAZC}
00222         const_reference operator*(){\cf17  const }\{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAAAZD}{\bkmkend AAAAAAAAZD}
00223 \par
{\bkmkstart AAAAAAAAZE}{\bkmkend AAAAAAAAZE}
00224         pointer operator->() SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAAAZF}{\bkmkend AAAAAAAAZF}
00225         const_pointer operator->() const SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAAAZG}{\bkmkend AAAAAAAAZG}
00226 \par
{\bkmkstart AAAAAAAAZH}{\bkmkend AAAAAAAAZH}
00227         pointer get() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAAAZI}{\bkmkend AAAAAAAAZI}
00228         const_pointer get() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAAAZJ}{\bkmkend AAAAAAAAZJ}
00229 \par
{\bkmkstart AAAAAAAAZK}{\bkmkend AAAAAAAAZK}
00230         {\cf18 void} swap(unique_impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAAZL}{\bkmkend AAAAAAAAZL}
00231         \{\par
{\bkmkstart AAAAAAAAZM}{\bkmkend AAAAAAAAZM}
00232             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAAAZN}{\bkmkend AAAAAAAAZN}
00233             ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAAAZO}{\bkmkend AAAAAAAAZO}
00234         \}\par
{\bkmkstart AAAAAAAAZP}{\bkmkend AAAAAAAAZP}
00235 \par
{\bkmkstart AAAAAAAAZQ}{\bkmkend AAAAAAAAZQ}
00236         pointer release() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.release(); \}\par
{\bkmkstart AAAAAAAAZR}{\bkmkend AAAAAAAAZR}
00237 \par
{\bkmkstart AAAAAAAAZS}{\bkmkend AAAAAAAAZS}
00238         unique_ptr_type release_unique() SPIMPL_NOEXCEPT \{ {\cf19 return} std::move(ptr_); \}\par
{\bkmkstart AAAAAAAAZT}{\bkmkend AAAAAAAAZT}
00239 \par
{\bkmkstart AAAAAAAAZU}{\bkmkend AAAAAAAAZU}
00240         {\cf17 explicit} {\cf17 operator} bool() const SPIMPL_NOEXCEPT \{ {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(ptr_); \}\par
{\bkmkstart AAAAAAAAZV}{\bkmkend AAAAAAAAZV}
00241 \par
{\bkmkstart AAAAAAAAZW}{\bkmkend AAAAAAAAZW}
00242         {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAAAZX}{\bkmkend AAAAAAAAZX}
00243         {\cf17 const} {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAAAZY}{\bkmkend AAAAAAAAZY}
00244 \par
{\bkmkstart AAAAAAAAZZ}{\bkmkend AAAAAAAAZZ}
00245     {\cf17 protected}:\par
{\bkmkstart AAAAAAABAA}{\bkmkend AAAAAAABAA}
00246         unique_ptr_type ptr_;\par
{\bkmkstart AAAAAAABAB}{\bkmkend AAAAAAABAB}
00247     \};\par
{\bkmkstart AAAAAAABAC}{\bkmkend AAAAAAABAC}
00248 \par
{\bkmkstart AAAAAAABAD}{\bkmkend AAAAAAABAD}
00249 \par
{\bkmkstart AAAAAAABAE}{\bkmkend AAAAAAABAE}
00250     {\cf17 template}<{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABAF}{\bkmkend AAAAAAABAF}
00251     {\cf17 inline} {\cf18 void} swap(unique_impl_ptr<T, D>& l, unique_impl_ptr<T, D>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABAG}{\bkmkend AAAAAAABAG}
00252     \{\par
{\bkmkstart AAAAAAABAH}{\bkmkend AAAAAAABAH}
00253         l.swap(r);\par
{\bkmkstart AAAAAAABAI}{\bkmkend AAAAAAABAI}
00254     \}\par
{\bkmkstart AAAAAAABAJ}{\bkmkend AAAAAAABAJ}
00255 \par
{\bkmkstart AAAAAAABAK}{\bkmkend AAAAAAABAK}
00256 \par
{\bkmkstart AAAAAAABAL}{\bkmkend AAAAAAABAL}
00257     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABAM}{\bkmkend AAAAAAABAM}
00258     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABAN}{\bkmkend AAAAAAABAN}
00259     \{\par
{\bkmkstart AAAAAAABAO}{\bkmkend AAAAAAABAO}
00260         {\cf19 return} l.get() == r.get();\par
{\bkmkstart AAAAAAABAP}{\bkmkend AAAAAAABAP}
00261     \}\par
{\bkmkstart AAAAAAABAQ}{\bkmkend AAAAAAABAQ}
00262 \par
{\bkmkstart AAAAAAABAR}{\bkmkend AAAAAAABAR}
00263     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} C1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABAS}{\bkmkend AAAAAAABAS}
00264     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABAT}{\bkmkend AAAAAAABAT}
00265     \{\par
{\bkmkstart AAAAAAABAU}{\bkmkend AAAAAAABAU}
00266         {\cf19 return} !(l == r);\par
{\bkmkstart AAAAAAABAV}{\bkmkend AAAAAAABAV}
00267     \}\par
{\bkmkstart AAAAAAABAW}{\bkmkend AAAAAAABAW}
00268 \par
{\bkmkstart AAAAAAABAX}{\bkmkend AAAAAAABAX}
00269     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABAY}{\bkmkend AAAAAAABAY}
00270     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABAZ}{\bkmkend AAAAAAABAZ}
00271     \{\par
{\bkmkstart AAAAAAABBA}{\bkmkend AAAAAAABBA}
00272         {\cf17 using} P1 = {\cf17 typename} unique_impl_ptr<T1, D1>::pointer;\par
{\bkmkstart AAAAAAABBB}{\bkmkend AAAAAAABBB}
00273         {\cf17 using} P2 = {\cf17 typename} unique_impl_ptr<T2, D2>::pointer;\par
{\bkmkstart AAAAAAABBC}{\bkmkend AAAAAAABBC}
00274         {\cf17 using} CT = {\cf17 typename} std::common_type<P1, P2>::type;\par
{\bkmkstart AAAAAAABBD}{\bkmkend AAAAAAABBD}
00275         {\cf19 return} std::less<CT>()(l.get(), r.get());\par
{\bkmkstart AAAAAAABBE}{\bkmkend AAAAAAABBE}
00276     \}\par
{\bkmkstart AAAAAAABBF}{\bkmkend AAAAAAABBF}
00277 \par
{\bkmkstart AAAAAAABBG}{\bkmkend AAAAAAABBG}
00278     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABBH}{\bkmkend AAAAAAABBH}
00279     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABBI}{\bkmkend AAAAAAABBI}
00280     \{\par
{\bkmkstart AAAAAAABBJ}{\bkmkend AAAAAAABBJ}
00281         {\cf19 return} r < l;\par
{\bkmkstart AAAAAAABBK}{\bkmkend AAAAAAABBK}
00282     \}\par
{\bkmkstart AAAAAAABBL}{\bkmkend AAAAAAABBL}
00283 \par
{\bkmkstart AAAAAAABBM}{\bkmkend AAAAAAABBM}
00284     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABBN}{\bkmkend AAAAAAABBN}
00285     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABBO}{\bkmkend AAAAAAABBO}
00286     \{\par
{\bkmkstart AAAAAAABBP}{\bkmkend AAAAAAABBP}
00287         {\cf19 return} !(r < l);\par
{\bkmkstart AAAAAAABBQ}{\bkmkend AAAAAAABBQ}
00288     \}\par
{\bkmkstart AAAAAAABBR}{\bkmkend AAAAAAABBR}
00289 \par
{\bkmkstart AAAAAAABBS}{\bkmkend AAAAAAABBS}
00290     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABBT}{\bkmkend AAAAAAABBT}
00291     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABBU}{\bkmkend AAAAAAABBU}
00292     \{\par
{\bkmkstart AAAAAAABBV}{\bkmkend AAAAAAABBV}
00293         {\cf19 return} !(l < r);\par
{\bkmkstart AAAAAAABBW}{\bkmkend AAAAAAABBW}
00294     \}\par
{\bkmkstart AAAAAAABBX}{\bkmkend AAAAAAABBX}
00295 \par
{\bkmkstart AAAAAAABBY}{\bkmkend AAAAAAABBY}
00296     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABBZ}{\bkmkend AAAAAAABBZ}
00297     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABCA}{\bkmkend AAAAAAABCA}
00298     \{\par
{\bkmkstart AAAAAAABCB}{\bkmkend AAAAAAABCB}
00299         {\cf19 return} !p;\par
{\bkmkstart AAAAAAABCC}{\bkmkend AAAAAAABCC}
00300     \}\par
{\bkmkstart AAAAAAABCD}{\bkmkend AAAAAAABCD}
00301 \par
{\bkmkstart AAAAAAABCE}{\bkmkend AAAAAAABCE}
00302     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABCF}{\bkmkend AAAAAAABCF}
00303     {\cf17 inline} {\cf18 bool} operator==(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABCG}{\bkmkend AAAAAAABCG}
00304     \{\par
{\bkmkstart AAAAAAABCH}{\bkmkend AAAAAAABCH}
00305         {\cf19 return} !p;\par
{\bkmkstart AAAAAAABCI}{\bkmkend AAAAAAABCI}
00306     \}\par
{\bkmkstart AAAAAAABCJ}{\bkmkend AAAAAAABCJ}
00307 \par
{\bkmkstart AAAAAAABCK}{\bkmkend AAAAAAABCK}
00308     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABCL}{\bkmkend AAAAAAABCL}
00309     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABCM}{\bkmkend AAAAAAABCM}
00310     \{\par
{\bkmkstart AAAAAAABCN}{\bkmkend AAAAAAABCN}
00311         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAABCO}{\bkmkend AAAAAAABCO}
00312     \}\par
{\bkmkstart AAAAAAABCP}{\bkmkend AAAAAAABCP}
00313 \par
{\bkmkstart AAAAAAABCQ}{\bkmkend AAAAAAABCQ}
00314     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABCR}{\bkmkend AAAAAAABCR}
00315     {\cf17 inline} {\cf18 bool} operator!=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABCS}{\bkmkend AAAAAAABCS}
00316     \{\par
{\bkmkstart AAAAAAABCT}{\bkmkend AAAAAAABCT}
00317         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAABCU}{\bkmkend AAAAAAABCU}
00318     \}\par
{\bkmkstart AAAAAAABCV}{\bkmkend AAAAAAABCV}
00319 \par
{\bkmkstart AAAAAAABCW}{\bkmkend AAAAAAABCW}
00320     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABCX}{\bkmkend AAAAAAABCX}
00321     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T, D>& l, std::nullptr_t)\par
{\bkmkstart AAAAAAABCY}{\bkmkend AAAAAAABCY}
00322     \{\par
{\bkmkstart AAAAAAABCZ}{\bkmkend AAAAAAABCZ}
00323         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAABDA}{\bkmkend AAAAAAABDA}
00324         {\cf19 return} std::less<P>()(l.get(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAABDB}{\bkmkend AAAAAAABDB}
00325     \}\par
{\bkmkstart AAAAAAABDC}{\bkmkend AAAAAAABDC}
00326 \par
{\bkmkstart AAAAAAABDD}{\bkmkend AAAAAAABDD}
00327     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABDE}{\bkmkend AAAAAAABDE}
00328     {\cf17 inline} {\cf18 bool} operator< (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAABDF}{\bkmkend AAAAAAABDF}
00329     \{\par
{\bkmkstart AAAAAAABDG}{\bkmkend AAAAAAABDG}
00330         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAABDH}{\bkmkend AAAAAAABDH}
00331         {\cf19 return} std::less<P>()({\cf17 nullptr}, p.get());\par
{\bkmkstart AAAAAAABDI}{\bkmkend AAAAAAABDI}
00332     \}\par
{\bkmkstart AAAAAAABDJ}{\bkmkend AAAAAAABDJ}
00333 \par
{\bkmkstart AAAAAAABDK}{\bkmkend AAAAAAABDK}
00334     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABDL}{\bkmkend AAAAAAABDL}
00335     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAABDM}{\bkmkend AAAAAAABDM}
00336     \{\par
{\bkmkstart AAAAAAABDN}{\bkmkend AAAAAAABDN}
00337         {\cf19 return} {\cf17 nullptr} < p;\par
{\bkmkstart AAAAAAABDO}{\bkmkend AAAAAAABDO}
00338     \}\par
{\bkmkstart AAAAAAABDP}{\bkmkend AAAAAAABDP}
00339 \par
{\bkmkstart AAAAAAABDQ}{\bkmkend AAAAAAABDQ}
00340     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABDR}{\bkmkend AAAAAAABDR}
00341     {\cf17 inline} {\cf18 bool} operator> (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAABDS}{\bkmkend AAAAAAABDS}
00342     \{\par
{\bkmkstart AAAAAAABDT}{\bkmkend AAAAAAABDT}
00343         {\cf19 return} p < {\cf17 nullptr};\par
{\bkmkstart AAAAAAABDU}{\bkmkend AAAAAAABDU}
00344     \}\par
{\bkmkstart AAAAAAABDV}{\bkmkend AAAAAAABDV}
00345 \par
{\bkmkstart AAAAAAABDW}{\bkmkend AAAAAAABDW}
00346     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABDX}{\bkmkend AAAAAAABDX}
00347     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAABDY}{\bkmkend AAAAAAABDY}
00348     \{\par
{\bkmkstart AAAAAAABDZ}{\bkmkend AAAAAAABDZ}
00349         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAABEA}{\bkmkend AAAAAAABEA}
00350     \}\par
{\bkmkstart AAAAAAABEB}{\bkmkend AAAAAAABEB}
00351 \par
{\bkmkstart AAAAAAABEC}{\bkmkend AAAAAAABEC}
00352     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABED}{\bkmkend AAAAAAABED}
00353     {\cf17 inline} {\cf18 bool} operator<=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAABEE}{\bkmkend AAAAAAABEE}
00354     \{\par
{\bkmkstart AAAAAAABEF}{\bkmkend AAAAAAABEF}
00355         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAABEG}{\bkmkend AAAAAAABEG}
00356     \}\par
{\bkmkstart AAAAAAABEH}{\bkmkend AAAAAAABEH}
00357 \par
{\bkmkstart AAAAAAABEI}{\bkmkend AAAAAAABEI}
00358     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABEJ}{\bkmkend AAAAAAABEJ}
00359     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAABEK}{\bkmkend AAAAAAABEK}
00360     \{\par
{\bkmkstart AAAAAAABEL}{\bkmkend AAAAAAABEL}
00361         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAABEM}{\bkmkend AAAAAAABEM}
00362     \}\par
{\bkmkstart AAAAAAABEN}{\bkmkend AAAAAAABEN}
00363 \par
{\bkmkstart AAAAAAABEO}{\bkmkend AAAAAAABEO}
00364     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABEP}{\bkmkend AAAAAAABEP}
00365     {\cf17 inline} {\cf18 bool} operator>=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAABEQ}{\bkmkend AAAAAAABEQ}
00366     \{\par
{\bkmkstart AAAAAAABER}{\bkmkend AAAAAAABER}
00367         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAABES}{\bkmkend AAAAAAABES}
00368     \}\par
{\bkmkstart AAAAAAABET}{\bkmkend AAAAAAABET}
00369 \par
{\bkmkstart AAAAAAABEU}{\bkmkend AAAAAAABEU}
00370 \par
{\bkmkstart AAAAAAABEV}{\bkmkend AAAAAAABEV}
00371     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAABEW}{\bkmkend AAAAAAABEW}
00372     {\cf17 inline} unique_impl_ptr<T> make_unique_impl(Args&&... args)\par
{\bkmkstart AAAAAAABEX}{\bkmkend AAAAAAABEX}
00373     \{\par
{\bkmkstart AAAAAAABEY}{\bkmkend AAAAAAABEY}
00374         {\cf19 return} unique_impl_ptr<T>({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>);\par
{\bkmkstart AAAAAAABEZ}{\bkmkend AAAAAAABEZ}
00375     \}\par
{\bkmkstart AAAAAAABFA}{\bkmkend AAAAAAABFA}
00376 \par
{\bkmkstart AAAAAAABFB}{\bkmkend AAAAAAABFB}
00377 \par
{\bkmkstart AAAAAAABFC}{\bkmkend AAAAAAABFC}
00378     {\cf20 // Helpers to manage unique impl, stored in std::unique_ptr}\par
{\bkmkstart AAAAAAABFD}{\bkmkend AAAAAAABFD}
00379     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>, {\cf17 class} Copier = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAABFE}{\bkmkend AAAAAAABFE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 00380}}}
     {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr}}}
<T, Deleter>\par
{\bkmkstart AAAAAAABFG}{\bkmkend AAAAAAABFG}
00381     \{\par
{\bkmkstart AAAAAAABFH}{\bkmkend AAAAAAABFH}
00382         {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 unique_impl_ptr<T, Deleter>}}}
;\par
{\bkmkstart AAAAAAABFI}{\bkmkend AAAAAAABFI}
00383         {\cf17 using} dummy_t_ = {\cf17 typename} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
;\par
{\bkmkstart AAAAAAABFJ}{\bkmkend AAAAAAABFJ}
00384     {\cf17 public}:\par
{\bkmkstart AAAAAAABFK}{\bkmkend AAAAAAABFK}
00385         {\cf17 using} pointer = {\cf17 typename} base_type::pointer;\par
{\bkmkstart AAAAAAABFL}{\bkmkend AAAAAAABFL}
00386         {\cf17 using} const_pointer = {\cf17 typename} base_type::const_pointer;\par
{\bkmkstart AAAAAAABFM}{\bkmkend AAAAAAABFM}
00387         {\cf17 using} reference = {\cf17 typename} base_type::reference;\par
{\bkmkstart AAAAAAABFN}{\bkmkend AAAAAAABFN}
00388         {\cf17 using} const_reference = {\cf17 typename} base_type::const_reference;\par
{\bkmkstart AAAAAAABFO}{\bkmkend AAAAAAABFO}
00389         {\cf17 using} element_type = {\cf17 typename} base_type::element_type;\par
{\bkmkstart AAAAAAABFP}{\bkmkend AAAAAAABFP}
00390         {\cf17 using} deleter_type = {\cf17 typename} base_type::deleter_type;\par
{\bkmkstart AAAAAAABFQ}{\bkmkend AAAAAAABFQ}
00391         {\cf17 using} unique_ptr_type = {\cf17 typename} base_type::unique_ptr_type;\par
{\bkmkstart AAAAAAABFR}{\bkmkend AAAAAAABFR}
00392         {\cf17 using} copier_type = {\cf17 typename} std::decay<Copier>::type;\par
{\bkmkstart AAAAAAABFS}{\bkmkend AAAAAAABFS}
00393         {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 is_default_manageable}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUC" }{}}{\fldrslt {\cs37\ul\cf2 details::is_default_manageable<T, deleter_type, copier_type>}}}
;\par
{\bkmkstart AAAAAAABFT}{\bkmkend AAAAAAABFT}
00394 \par
{\bkmkstart AAAAAAABFU}{\bkmkend AAAAAAABFU}
00395         SPIMPL_CONSTEXPR {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABFV}{\bkmkend AAAAAAABFV}
00396         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
({\cf17 nullptr}, deleter_type\{\}), copier_(copier_type\{\}) \{\}\par
{\bkmkstart AAAAAAABFW}{\bkmkend AAAAAAABFW}
00397 \par
{\bkmkstart AAAAAAABFX}{\bkmkend AAAAAAABFX}
00398         SPIMPL_CONSTEXPR {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABFY}{\bkmkend AAAAAAABFY}
00399         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
() \{\}\par
{\bkmkstart AAAAAAABFZ}{\bkmkend AAAAAAABFZ}
00400 \par
{\bkmkstart AAAAAAABGA}{\bkmkend AAAAAAABGA}
00401         {\cf17 template}<{\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABGB}{\bkmkend AAAAAAABGB}
00402         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(pointer p, D&& d, C&& c,\par
{\bkmkstart AAAAAAABGC}{\bkmkend AAAAAAABGC}
00403                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABGD}{\bkmkend AAAAAAABGD}
00404                     std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAABGE}{\bkmkend AAAAAAABGE}
00405                         && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAABGF}{\bkmkend AAAAAAABGF}
00406                     {\cf17 typename} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
\par
{\bkmkstart AAAAAAABGG}{\bkmkend AAAAAAABGG}
00407                  >::type = {\cf17 typename} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUQ" }{}}{\fldrslt {\cs37\ul\cf2 base_type::dummy_t_}}}
()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABGH}{\bkmkend AAAAAAABGH}
00408         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(std::move(p), std::forward<D>(d)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAABGI}{\bkmkend AAAAAAABGI}
00409 \par
{\bkmkstart AAAAAAABGJ}{\bkmkend AAAAAAABGJ}
00410         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABGK}{\bkmkend AAAAAAABGK}
00411         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(U *u,\par
{\bkmkstart AAAAAAABGL}{\bkmkend AAAAAAABGL}
00412                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABGM}{\bkmkend AAAAAAABGM}
00413                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABGN}{\bkmkend AAAAAAABGN}
00414                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABGO}{\bkmkend AAAAAAABGO}
00415                     dummy_t_\par
{\bkmkstart AAAAAAABGP}{\bkmkend AAAAAAABGP}
00416                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABGQ}{\bkmkend AAAAAAABGQ}
00417         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAABGR}{\bkmkend AAAAAAABGR}
00418 \par
{\bkmkstart AAAAAAABGS}{\bkmkend AAAAAAABGS}
00419         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& r)\par
{\bkmkstart AAAAAAABGT}{\bkmkend AAAAAAABGT}
00420         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(r.clone()) \{\}\par
{\bkmkstart AAAAAAABGU}{\bkmkend AAAAAAABGU}
00421 \par
{\bkmkstart AAAAAAABGV}{\bkmkend AAAAAAABGV}
00422 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAABGW}{\bkmkend AAAAAAABGW}
00423         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAABGX}{\bkmkend AAAAAAABGX}
00424 {\cf21 #else}\par
{\bkmkstart AAAAAAABGY}{\bkmkend AAAAAAABGY}
00425         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABGZ}{\bkmkend AAAAAAABGZ}
00426         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(std::move(r.ptr_)), copier_(std::move(r.copier_)) \{\}\par
{\bkmkstart AAAAAAABHA}{\bkmkend AAAAAAABHA}
00427 {\cf21 #endif}\par
{\bkmkstart AAAAAAABHB}{\bkmkend AAAAAAABHB}
00428 \par
{\bkmkstart AAAAAAABHC}{\bkmkend AAAAAAABHC}
00429 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAABHD}{\bkmkend AAAAAAABHD}
00430         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABHE}{\bkmkend AAAAAAABHE}
00431         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAABHF}{\bkmkend AAAAAAABHF}
00432                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABHG}{\bkmkend AAAAAAABHG}
00433                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABHH}{\bkmkend AAAAAAABHH}
00434                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABHI}{\bkmkend AAAAAAABHI}
00435                     dummy_t_\par
{\bkmkstart AAAAAAABHJ}{\bkmkend AAAAAAABHJ}
00436                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABHK}{\bkmkend AAAAAAABHK}
00437         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(u.release(), &details::default_delete<T>), copier_(&details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAABHL}{\bkmkend AAAAAAABHL}
00438 {\cf21 #endif}\par
{\bkmkstart AAAAAAABHM}{\bkmkend AAAAAAABHM}
00439 \par
{\bkmkstart AAAAAAABHN}{\bkmkend AAAAAAABHN}
00440         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABHO}{\bkmkend AAAAAAABHO}
00441         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAABHP}{\bkmkend AAAAAAABHP}
00442                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABHQ}{\bkmkend AAAAAAABHQ}
00443                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABHR}{\bkmkend AAAAAAABHR}
00444                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABHS}{\bkmkend AAAAAAABHS}
00445                     dummy_t_\par
{\bkmkstart AAAAAAABHT}{\bkmkend AAAAAAABHT}
00446                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABHU}{\bkmkend AAAAAAABHU}
00447         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAABHV}{\bkmkend AAAAAAABHV}
00448 \par
{\bkmkstart AAAAAAABHW}{\bkmkend AAAAAAABHW}
00449         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABHX}{\bkmkend AAAAAAABHX}
00450         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::unique_ptr<U, D>&& u, C&& c,\par
{\bkmkstart AAAAAAABHY}{\bkmkend AAAAAAABHY}
00451                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABHZ}{\bkmkend AAAAAAABHZ}
00452                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABIA}{\bkmkend AAAAAAABIA}
00453                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAABIB}{\bkmkend AAAAAAABIB}
00454                     dummy_t_\par
{\bkmkstart AAAAAAABIC}{\bkmkend AAAAAAABIC}
00455                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABID}{\bkmkend AAAAAAABID}
00456         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(std::move(u)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAABIE}{\bkmkend AAAAAAABIE}
00457 \par
{\bkmkstart AAAAAAABIF}{\bkmkend AAAAAAABIF}
00458         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABIG}{\bkmkend AAAAAAABIG}
00459         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr<U, D, C>}}}
&& u,\par
{\bkmkstart AAAAAAABIH}{\bkmkend AAAAAAABIH}
00460                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABII}{\bkmkend AAAAAAABII}
00461                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABIJ}{\bkmkend AAAAAAABIJ}
00462                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAABIK}{\bkmkend AAAAAAABIK}
00463                     dummy_t_\par
{\bkmkstart AAAAAAABIL}{\bkmkend AAAAAAABIL}
00464                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABIM}{\bkmkend AAAAAAABIM}
00465         : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 base_type}}}
(std::move(u.ptr_)), copier_(std::move(u.copier_)) \{\}\par
{\bkmkstart AAAAAAABIN}{\bkmkend AAAAAAABIN}
00466 \par
{\bkmkstart AAAAAAABIO}{\bkmkend AAAAAAABIO}
00467         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& operator= ({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& r)\par
{\bkmkstart AAAAAAABIP}{\bkmkend AAAAAAABIP}
00468         \{\par
{\bkmkstart AAAAAAABIQ}{\bkmkend AAAAAAABIQ}
00469             {\cf19 if} ({\cf17 this} == &r)\par
{\bkmkstart AAAAAAABIR}{\bkmkend AAAAAAABIR}
00470                 {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAABIS}{\bkmkend AAAAAAABIS}
00471 \par
{\bkmkstart AAAAAAABIT}{\bkmkend AAAAAAABIT}
00472             {\cf19 return} operator=(r.clone());\par
{\bkmkstart AAAAAAABIU}{\bkmkend AAAAAAABIU}
00473         \}\par
{\bkmkstart AAAAAAABIV}{\bkmkend AAAAAAABIV}
00474 \par
{\bkmkstart AAAAAAABIW}{\bkmkend AAAAAAABIW}
00475 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAABIX}{\bkmkend AAAAAAABIX}
00476         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAABIY}{\bkmkend AAAAAAABIY}
00477 {\cf21 #else}\par
{\bkmkstart AAAAAAABIZ}{\bkmkend AAAAAAABIZ}
00478         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAABJA}{\bkmkend AAAAAAABJA}
00479             base_type::ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAABJB}{\bkmkend AAAAAAABJB}
00480             copier_ = std::move(r.copier_);\par
{\bkmkstart AAAAAAABJC}{\bkmkend AAAAAAABJC}
00481             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAABJD}{\bkmkend AAAAAAABJD}
00482         \}\par
{\bkmkstart AAAAAAABJE}{\bkmkend AAAAAAABJE}
00483 {\cf21 #endif}\par
{\bkmkstart AAAAAAABJF}{\bkmkend AAAAAAABJF}
00484 \par
{\bkmkstart AAAAAAABJG}{\bkmkend AAAAAAABJG}
00485         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABJH}{\bkmkend AAAAAAABJH}
00486         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABJI}{\bkmkend AAAAAAABJI}
00487             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABJJ}{\bkmkend AAAAAAABJJ}
00488                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAABJK}{\bkmkend AAAAAAABJK}
00489                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAABJL}{\bkmkend AAAAAAABJL}
00490             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&\par
{\bkmkstart AAAAAAABJM}{\bkmkend AAAAAAABJM}
00491         >::type operator= ({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr<U, D, C>}}}
& u)\par
{\bkmkstart AAAAAAABJN}{\bkmkend AAAAAAABJN}
00492         \{\par
{\bkmkstart AAAAAAABJO}{\bkmkend AAAAAAABJO}
00493             {\cf19 return} operator=(u.clone());\par
{\bkmkstart AAAAAAABJP}{\bkmkend AAAAAAABJP}
00494         \}\par
{\bkmkstart AAAAAAABJQ}{\bkmkend AAAAAAABJQ}
00495 \par
{\bkmkstart AAAAAAABJR}{\bkmkend AAAAAAABJR}
00496         {\cf20 //}\par
{\bkmkstart AAAAAAABJS}{\bkmkend AAAAAAABJS}
00497 \par
{\bkmkstart AAAAAAABJT}{\bkmkend AAAAAAABJT}
00498 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAABJU}{\bkmkend AAAAAAABJU}
00499         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABJV}{\bkmkend AAAAAAABJV}
00500         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABJW}{\bkmkend AAAAAAABJW}
00501             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABJX}{\bkmkend AAAAAAABJX}
00502                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAABJY}{\bkmkend AAAAAAABJY}
00503             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&\par
{\bkmkstart AAAAAAABJZ}{\bkmkend AAAAAAABJZ}
00504         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABKA}{\bkmkend AAAAAAABKA}
00505         \{\par
{\bkmkstart AAAAAAABKB}{\bkmkend AAAAAAABKB}
00506             {\cf19 return} operator=({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::move(u)));\par
{\bkmkstart AAAAAAABKC}{\bkmkend AAAAAAABKC}
00507         \}\par
{\bkmkstart AAAAAAABKD}{\bkmkend AAAAAAABKD}
00508 {\cf21 #endif}\par
{\bkmkstart AAAAAAABKE}{\bkmkend AAAAAAABKE}
00509 \par
{\bkmkstart AAAAAAABKF}{\bkmkend AAAAAAABKF}
00510         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABKG}{\bkmkend AAAAAAABKG}
00511         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABKH}{\bkmkend AAAAAAABKH}
00512             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABKI}{\bkmkend AAAAAAABKI}
00513                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAABKJ}{\bkmkend AAAAAAABKJ}
00514             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&\par
{\bkmkstart AAAAAAABKK}{\bkmkend AAAAAAABKK}
00515         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABKL}{\bkmkend AAAAAAABKL}
00516         \{\par
{\bkmkstart AAAAAAABKM}{\bkmkend AAAAAAABKM}
00517             {\cf19 return} operator=({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(std::move(u)));\par
{\bkmkstart AAAAAAABKN}{\bkmkend AAAAAAABKN}
00518         \}\par
{\bkmkstart AAAAAAABKO}{\bkmkend AAAAAAABKO}
00519 \par
{\bkmkstart AAAAAAABKP}{\bkmkend AAAAAAABKP}
00520         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABKQ}{\bkmkend AAAAAAABKQ}
00521         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABKR}{\bkmkend AAAAAAABKR}
00522             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABKS}{\bkmkend AAAAAAABKS}
00523                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAABKT}{\bkmkend AAAAAAABKT}
00524                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAABKU}{\bkmkend AAAAAAABKU}
00525             {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
&\par
{\bkmkstart AAAAAAABKV}{\bkmkend AAAAAAABKV}
00526         >::type operator= ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr<U, D, C>}}}
&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABKW}{\bkmkend AAAAAAABKW}
00527         \{\par
{\bkmkstart AAAAAAABKX}{\bkmkend AAAAAAABKX}
00528             base_type::ptr_ = std::move(u.ptr_);\par
{\bkmkstart AAAAAAABKY}{\bkmkend AAAAAAABKY}
00529             copier_ = std::move(u.copier_);\par
{\bkmkstart AAAAAAABKZ}{\bkmkend AAAAAAABKZ}
00530             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAABLA}{\bkmkend AAAAAAABLA}
00531         \}\par
{\bkmkstart AAAAAAABLB}{\bkmkend AAAAAAABLB}
00532 \par
{\bkmkstart AAAAAAABLC}{\bkmkend AAAAAAABLC}
00533         {\cf18 void} swap({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABLD}{\bkmkend AAAAAAABLD}
00534         \{\par
{\bkmkstart AAAAAAABLE}{\bkmkend AAAAAAABLE}
00535             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAABLF}{\bkmkend AAAAAAABLF}
00536             base_type::ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAABLG}{\bkmkend AAAAAAABLG}
00537             swap(copier_, u.copier_);\par
{\bkmkstart AAAAAAABLH}{\bkmkend AAAAAAABLH}
00538         \}\par
{\bkmkstart AAAAAAABLI}{\bkmkend AAAAAAABLI}
00539 \par
{\bkmkstart AAAAAAABLJ}{\bkmkend AAAAAAABLJ}
00540         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
 clone(){\cf17  const}\par
{\bkmkstart AAAAAAABLK}{\bkmkend AAAAAAABLK}
00541 {\cf17         }\{\par
{\bkmkstart AAAAAAABLL}{\bkmkend AAAAAAABLL}
00542             {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr}}}
(\par
{\bkmkstart AAAAAAABLM}{\bkmkend AAAAAAABLM}
00543                 base_type::ptr_ ? copier_(base_type::ptr_.get()) : {\cf17 nullptr},\par
{\bkmkstart AAAAAAABLN}{\bkmkend AAAAAAABLN}
00544                 base_type::ptr_.get_deleter(),\par
{\bkmkstart AAAAAAABLO}{\bkmkend AAAAAAABLO}
00545                 copier_);\par
{\bkmkstart AAAAAAABLP}{\bkmkend AAAAAAABLP}
00546         \}\par
{\bkmkstart AAAAAAABLQ}{\bkmkend AAAAAAABLQ}
00547 \par
{\bkmkstart AAAAAAABLR}{\bkmkend AAAAAAABLR}
00548         {\cf17 const} {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() {\cf17 const} SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAABLS}{\bkmkend AAAAAAABLS}
00549         {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAABLT}{\bkmkend AAAAAAABLT}
00550     {\cf17 private}:\par
{\bkmkstart AAAAAAABLU}{\bkmkend AAAAAAABLU}
00551         copier_type copier_;\par
{\bkmkstart AAAAAAABLV}{\bkmkend AAAAAAABLV}
00552     \};\par
{\bkmkstart AAAAAAABLW}{\bkmkend AAAAAAABLW}
00553 \par
{\bkmkstart AAAAAAABLX}{\bkmkend AAAAAAABLX}
00554     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAABLY}{\bkmkend AAAAAAABLY}
00555     {\cf17 inline} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr<T>}}}
 make_impl(Args&&... args)\par
{\bkmkstart AAAAAAABLZ}{\bkmkend AAAAAAABLZ}
00556     \{\par
{\bkmkstart AAAAAAABMA}{\bkmkend AAAAAAABMA}
00557         {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 impl_ptr<T>}}}
({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>, &details::default_copy<T>);\par
{\bkmkstart AAAAAAABMB}{\bkmkend AAAAAAABMB}
00558     \}\par
{\bkmkstart AAAAAAABMC}{\bkmkend AAAAAAABMC}
00559 \par
{\bkmkstart AAAAAAABMD}{\bkmkend AAAAAAABMD}
00560     {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABME}{\bkmkend AAAAAAABME}
00561     {\cf17 inline} {\cf18 void} swap(impl_ptr<T, D, C>& l,impl_ptr<T, D, C>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABMF}{\bkmkend AAAAAAABMF}
00562     \{\par
{\bkmkstart AAAAAAABMG}{\bkmkend AAAAAAABMG}
00563         l.swap(r);\par
{\bkmkstart AAAAAAABMH}{\bkmkend AAAAAAABMH}
00564     \}\par
{\bkmkstart AAAAAAABMI}{\bkmkend AAAAAAABMI}
00565 \}\par
{\bkmkstart AAAAAAABMJ}{\bkmkend AAAAAAABMJ}
00566 \par
{\bkmkstart AAAAAAABMK}{\bkmkend AAAAAAABMK}
00567 {\cf17 namespace }std \{\par
{\bkmkstart AAAAAAABML}{\bkmkend AAAAAAABML}
00568     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABMM}{\bkmkend AAAAAAABMM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABMN" }{}}{\fldrslt {\cs37\ul\cf2 00569}}}
     {\cf17 struct }hash<spimpl ::unique_impl_ptr<T, D>>\par
{\bkmkstart AAAAAAABMO}{\bkmkend AAAAAAABMO}
00570     \{\par
{\bkmkstart AAAAAAABMP}{\bkmkend AAAAAAABMP}
00571         {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr<T, D>}}}
 ;\par
{\bkmkstart AAAAAAABMQ}{\bkmkend AAAAAAABMQ}
00572         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAABMR}{\bkmkend AAAAAAABMR}
00573 \par
{\bkmkstart AAAAAAABMS}{\bkmkend AAAAAAABMS}
00574         result_type operator()({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABMT}{\bkmkend AAAAAAABMT}
00575         \{\par
{\bkmkstart AAAAAAABMU}{\bkmkend AAAAAAABMU}
00576             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAABMV}{\bkmkend AAAAAAABMV}
00577         \}\par
{\bkmkstart AAAAAAABMW}{\bkmkend AAAAAAABMW}
00578     \};\par
{\bkmkstart AAAAAAABMX}{\bkmkend AAAAAAABMX}
00579 \par
{\bkmkstart AAAAAAABMY}{\bkmkend AAAAAAABMY}
00580     {\cf17 template} <{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAABMZ}{\bkmkend AAAAAAABMZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABNA" }{}}{\fldrslt {\cs37\ul\cf2 00581}}}
     {\cf17 struct }hash<spimpl ::impl_ptr<T, D, C>>\par
{\bkmkstart AAAAAAABNB}{\bkmkend AAAAAAABNB}
00582     \{\par
{\bkmkstart AAAAAAABNC}{\bkmkend AAAAAAABNC}
00583         {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
 = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr<T, D, C>}}}
 ;\par
{\bkmkstart AAAAAAABND}{\bkmkend AAAAAAABND}
00584         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAABNE}{\bkmkend AAAAAAABNE}
00585 \par
{\bkmkstart AAAAAAABNF}{\bkmkend AAAAAAABNF}
00586         result_type operator()({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 argument_type}}}
& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABNG}{\bkmkend AAAAAAABNG}
00587         \{\par
{\bkmkstart AAAAAAABNH}{\bkmkend AAAAAAABNH}
00588             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAABNI}{\bkmkend AAAAAAABNI}
00589         \}\par
{\bkmkstart AAAAAAABNJ}{\bkmkend AAAAAAABNJ}
00590     \};\par
{\bkmkstart AAAAAAABNK}{\bkmkend AAAAAAABNK}
00591 \}\par
{\bkmkstart AAAAAAABNL}{\bkmkend AAAAAAABNL}
00592 \par
{\bkmkstart AAAAAAABNM}{\bkmkend AAAAAAABNM}
00593 {\cf21 #endif }{\cf20 // SPIMPL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spimpl.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/spimpl.hpp}
{\xe \v code/include/spimpl.hpp}
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABNO}{\bkmkend AAAAAAABNO}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAABNP}{\bkmkend AAAAAAABNP}
00002 {\cf20 *   Smart Pointer to IMPL}\par
{\bkmkstart AAAAAAABNQ}{\bkmkend AAAAAAABNQ}
00003 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAABNR}{\bkmkend AAAAAAABNR}
00004 {\cf20     A Smart Pointer to IMPLementation (i.e. Smart PIMPL or just SPIMPL).}\par
{\bkmkstart AAAAAAABNS}{\bkmkend AAAAAAABNS}
00005 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAABNT}{\bkmkend AAAAAAABNT}
00006 {\cf20 }\par
{\bkmkstart AAAAAAABNU}{\bkmkend AAAAAAABNU}
00007 {\cf20     Version: 1.2}\par
{\bkmkstart AAAAAAABNV}{\bkmkend AAAAAAABNV}
00008 {\cf20 }\par
{\bkmkstart AAAAAAABNW}{\bkmkend AAAAAAABNW}
00009 {\cf20     Latest version:}\par
{\bkmkstart AAAAAAABNX}{\bkmkend AAAAAAABNX}
00010 {\cf20         https://github.com/oliora/samples/blob/master/spimpl.h}\par
{\bkmkstart AAAAAAABNY}{\bkmkend AAAAAAABNY}
00011 {\cf20     Rationale and description:}\par
{\bkmkstart AAAAAAABNZ}{\bkmkend AAAAAAABNZ}
00012 {\cf20         http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html}\par
{\bkmkstart AAAAAAABOA}{\bkmkend AAAAAAABOA}
00013 {\cf20 }\par
{\bkmkstart AAAAAAABOB}{\bkmkend AAAAAAABOB}
00014 {\cf20     Copyright (c) 2015 Andrey Upadyshev (oliora@gmail.com)}\par
{\bkmkstart AAAAAAABOC}{\bkmkend AAAAAAABOC}
00015 {\cf20 }\par
{\bkmkstart AAAAAAABOD}{\bkmkend AAAAAAABOD}
00016 {\cf20     Distributed under the Boost Software License, Version 1.0.}\par
{\bkmkstart AAAAAAABOE}{\bkmkend AAAAAAABOE}
00017 {\cf20     See http://www.boost.org/LICENSE_1_0.txt}\par
{\bkmkstart AAAAAAABOF}{\bkmkend AAAAAAABOF}
00018 {\cf20 }\par
{\bkmkstart AAAAAAABOG}{\bkmkend AAAAAAABOG}
00019 {\cf20     Changes history}\par
{\bkmkstart AAAAAAABOH}{\bkmkend AAAAAAABOH}
00020 {\cf20     ---------------}\par
{\bkmkstart AAAAAAABOI}{\bkmkend AAAAAAABOI}
00021 {\cf20     v1.2:}\par
{\bkmkstart AAAAAAABOJ}{\bkmkend AAAAAAABOJ}
00022 {\cf20         - const correctness}\par
{\bkmkstart AAAAAAABOK}{\bkmkend AAAAAAABOK}
00023 {\cf20     v1.1:}\par
{\bkmkstart AAAAAAABOL}{\bkmkend AAAAAAABOL}
00024 {\cf20         - auto_ptr support is disabled by default for C++17 compatibility}\par
{\bkmkstart AAAAAAABOM}{\bkmkend AAAAAAABOM}
00025 {\cf20     v1.0:}\par
{\bkmkstart AAAAAAABON}{\bkmkend AAAAAAABON}
00026 {\cf20         - Released}\par
{\bkmkstart AAAAAAABOO}{\bkmkend AAAAAAABOO}
00027 {\cf20  */}\par
{\bkmkstart AAAAAAABOP}{\bkmkend AAAAAAABOP}
00028 \par
{\bkmkstart AAAAAAABOQ}{\bkmkend AAAAAAABOQ}
00029 {\cf21 #ifndef __SPIMPL_HPP__}\par
{\bkmkstart AAAAAAABOR}{\bkmkend AAAAAAABOR}
00030 {\cf21 #define __SPIMPL_HPP__}\par
{\bkmkstart AAAAAAABOS}{\bkmkend AAAAAAABOS}
00031 \par
{\bkmkstart AAAAAAABOT}{\bkmkend AAAAAAABOT}
00032 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAABOU}{\bkmkend AAAAAAABOU}
00033 {\cf21 #include <type_traits>}\par
{\bkmkstart AAAAAAABOV}{\bkmkend AAAAAAABOV}
00034 {\cf21 #include <cassert>}\par
{\bkmkstart AAAAAAABOW}{\bkmkend AAAAAAABOW}
00035 \par
{\bkmkstart AAAAAAABOX}{\bkmkend AAAAAAABOX}
00036 \par
{\bkmkstart AAAAAAABOY}{\bkmkend AAAAAAABOY}
00037 {\cf21 #if defined _MSC_VER && _MSC_VER < 1900  }{\cf20 // MS Visual Studio before VS2015}\par
{\bkmkstart AAAAAAABOZ}{\bkmkend AAAAAAABOZ}
00038 {\cf21 #define SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAABPA}{\bkmkend AAAAAAABPA}
00039 {\cf21 #define SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAABPB}{\bkmkend AAAAAAABPB}
00040 {\cf21 #define SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAABPC}{\bkmkend AAAAAAABPC}
00041 {\cf21 #endif}\par
{\bkmkstart AAAAAAABPD}{\bkmkend AAAAAAABPD}
00042 \par
{\bkmkstart AAAAAAABPE}{\bkmkend AAAAAAABPE}
00043 {\cf21 #if ! defined SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAABPF}{\bkmkend AAAAAAABPF}
00044 {\cf21 #define SPIMPL_NOEXCEPT noexcept}\par
{\bkmkstart AAAAAAABPG}{\bkmkend AAAAAAABPG}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAABPH}{\bkmkend AAAAAAABPH}
00046 {\cf21 #define SPIMPL_NOEXCEPT}\par
{\bkmkstart AAAAAAABPI}{\bkmkend AAAAAAABPI}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAABPJ}{\bkmkend AAAAAAABPJ}
00048 \par
{\bkmkstart AAAAAAABPK}{\bkmkend AAAAAAABPK}
00049 {\cf21 #if ! defined SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAABPL}{\bkmkend AAAAAAABPL}
00050 {\cf21 #define SPIMPL_CONSTEXPR constexpr}\par
{\bkmkstart AAAAAAABPM}{\bkmkend AAAAAAABPM}
00051 {\cf21 #else}\par
{\bkmkstart AAAAAAABPN}{\bkmkend AAAAAAABPN}
00052 {\cf21 #define SPIMPL_CONSTEXPR}\par
{\bkmkstart AAAAAAABPO}{\bkmkend AAAAAAABPO}
00053 {\cf21 #endif}\par
{\bkmkstart AAAAAAABPP}{\bkmkend AAAAAAABPP}
00054 \par
{\bkmkstart AAAAAAABPQ}{\bkmkend AAAAAAABPQ}
00055 {\cf20 // define SPIMPL_HAS_AUTO_PTR to enable constructor and assignment operator that accept std::auto_ptr}\par
{\bkmkstart AAAAAAABPR}{\bkmkend AAAAAAABPR}
00056 {\cf20 // TODO: auto detect std::auto_ptr support}\par
{\bkmkstart AAAAAAABPS}{\bkmkend AAAAAAABPS}
00057 \par
{\bkmkstart AAAAAAABPT}{\bkmkend AAAAAAABPT}
00058 \par
{\bkmkstart AAAAAAABPU}{\bkmkend AAAAAAABPU}
00059 {\cf17 namespace }spimpl  \{\par
{\bkmkstart AAAAAAABPV}{\bkmkend AAAAAAABPV}
00060     {\cf17 namespace }details \{\par
{\bkmkstart AAAAAAABPW}{\bkmkend AAAAAAABPW}
00061         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABPX}{\bkmkend AAAAAAABPX}
00062         T *default_copy(T *src)\par
{\bkmkstart AAAAAAABPY}{\bkmkend AAAAAAABPY}
00063         \{\par
{\bkmkstart AAAAAAABPZ}{\bkmkend AAAAAAABPZ}
00064             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAABQA}{\bkmkend AAAAAAABQA}
00065             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAABQB}{\bkmkend AAAAAAABQB}
00066             {\cf19 return} {\cf17 new} T(*src);\par
{\bkmkstart AAAAAAABQC}{\bkmkend AAAAAAABQC}
00067         \}\par
{\bkmkstart AAAAAAABQD}{\bkmkend AAAAAAABQD}
00068 \par
{\bkmkstart AAAAAAABQE}{\bkmkend AAAAAAABQE}
00069         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABQF}{\bkmkend AAAAAAABQF}
00070         {\cf18 void} default_delete(T *p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABQG}{\bkmkend AAAAAAABQG}
00071         \{\par
{\bkmkstart AAAAAAABQH}{\bkmkend AAAAAAABQH}
00072             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAABQI}{\bkmkend AAAAAAABQI}
00073             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAABQJ}{\bkmkend AAAAAAABQJ}
00074             {\cf17 delete} p;\par
{\bkmkstart AAAAAAABQK}{\bkmkend AAAAAAABQK}
00075         \}\par
{\bkmkstart AAAAAAABQL}{\bkmkend AAAAAAABQL}
00076 \par
{\bkmkstart AAAAAAABQM}{\bkmkend AAAAAAABQM}
00077         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABQN}{\bkmkend AAAAAAABQN}
00078         {\cf17 struct }default_deleter \{\par
{\bkmkstart AAAAAAABQO}{\bkmkend AAAAAAABQO}
00079             {\cf17 using} type = void (*)(T*);\par
{\bkmkstart AAAAAAABQP}{\bkmkend AAAAAAABQP}
00080         \};\par
{\bkmkstart AAAAAAABQQ}{\bkmkend AAAAAAABQQ}
00081 \par
{\bkmkstart AAAAAAABQR}{\bkmkend AAAAAAABQR}
00082         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABQS}{\bkmkend AAAAAAABQS}
00083         {\cf17 using} default_deleter_t = {\cf17 typename} default_deleter<T>::type;\par
{\bkmkstart AAAAAAABQT}{\bkmkend AAAAAAABQT}
00084 \par
{\bkmkstart AAAAAAABQU}{\bkmkend AAAAAAABQU}
00085         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABQV}{\bkmkend AAAAAAABQV}
00086         {\cf17 struct }default_copier \{\par
{\bkmkstart AAAAAAABQW}{\bkmkend AAAAAAABQW}
00087             {\cf17 using} type = T* (*)(T*);\par
{\bkmkstart AAAAAAABQX}{\bkmkend AAAAAAABQX}
00088         \};\par
{\bkmkstart AAAAAAABQY}{\bkmkend AAAAAAABQY}
00089 \par
{\bkmkstart AAAAAAABQZ}{\bkmkend AAAAAAABQZ}
00090         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAABRA}{\bkmkend AAAAAAABRA}
00091         {\cf17 using} default_copier_t = {\cf17 typename} default_copier<T>::type;\par
{\bkmkstart AAAAAAABRB}{\bkmkend AAAAAAABRB}
00092 \par
{\bkmkstart AAAAAAABRC}{\bkmkend AAAAAAABRC}
00093         {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAABRD}{\bkmkend AAAAAAABRD}
00094         {\cf17 struct }is_default_manageable: {\cf17 public} std::integral_constant<bool,\par
{\bkmkstart AAAAAAABRE}{\bkmkend AAAAAAABRE}
00095             std::is_same<D, default_deleter_t<T>>::value &&\par
{\bkmkstart AAAAAAABRF}{\bkmkend AAAAAAABRF}
00096             std::is_same<C, default_copier_t<T>>::value\par
{\bkmkstart AAAAAAABRG}{\bkmkend AAAAAAABRG}
00097         > \{\};\par
{\bkmkstart AAAAAAABRH}{\bkmkend AAAAAAABRH}
00098     \}\par
{\bkmkstart AAAAAAABRI}{\bkmkend AAAAAAABRI}
00099 \par
{\bkmkstart AAAAAAABRJ}{\bkmkend AAAAAAABRJ}
00100 \par
{\bkmkstart AAAAAAABRK}{\bkmkend AAAAAAABRK}
00101     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>>\par
{\bkmkstart AAAAAAABRL}{\bkmkend AAAAAAABRL}
00102     {\cf17 class }unique_impl_ptr\par
{\bkmkstart AAAAAAABRM}{\bkmkend AAAAAAABRM}
00103     \{\par
{\bkmkstart AAAAAAABRN}{\bkmkend AAAAAAABRN}
00104         {\cf17 protected}:\par
{\bkmkstart AAAAAAABRO}{\bkmkend AAAAAAABRO}
00105         {\cf17 static_assert}(!std::is_array<T>::value, {\cf22 "unique_impl_ptr specialization for arrays is not implemented"});\par
{\bkmkstart AAAAAAABRP}{\bkmkend AAAAAAABRP}
00106         {\cf17 struct }dummy_t_ \{{\cf18 int} dummy__;\};\par
{\bkmkstart AAAAAAABRQ}{\bkmkend AAAAAAABRQ}
00107 \par
{\bkmkstart AAAAAAABRR}{\bkmkend AAAAAAABRR}
00108     {\cf17 public}:\par
{\bkmkstart AAAAAAABRS}{\bkmkend AAAAAAABRS}
00109         {\cf17 using} pointer = T*;\par
{\bkmkstart AAAAAAABRT}{\bkmkend AAAAAAABRT}
00110         {\cf17 using} const_pointer = {\cf17 typename} std::add_const<T>::type *;\par
{\bkmkstart AAAAAAABRU}{\bkmkend AAAAAAABRU}
00111         {\cf17 using} reference = T&;\par
{\bkmkstart AAAAAAABRV}{\bkmkend AAAAAAABRV}
00112         {\cf17 using} const_reference = {\cf17 typename} std::add_const<T>::type &;\par
{\bkmkstart AAAAAAABRW}{\bkmkend AAAAAAABRW}
00113         {\cf17 using} element_type = T;\par
{\bkmkstart AAAAAAABRX}{\bkmkend AAAAAAABRX}
00114         {\cf17 using} deleter_type = {\cf17 typename} std::decay<Deleter>::type;\par
{\bkmkstart AAAAAAABRY}{\bkmkend AAAAAAABRY}
00115         {\cf17 using} unique_ptr_type = std::unique_ptr<T, deleter_type>;\par
{\bkmkstart AAAAAAABRZ}{\bkmkend AAAAAAABRZ}
00116         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type>;\par
{\bkmkstart AAAAAAABSA}{\bkmkend AAAAAAABSA}
00117 \par
{\bkmkstart AAAAAAABSB}{\bkmkend AAAAAAABSB}
00118         SPIMPL_CONSTEXPR unique_impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABSC}{\bkmkend AAAAAAABSC}
00119         : ptr_({\cf18 nullptr}, deleter_type\{\}) \{\}\par
{\bkmkstart AAAAAAABSD}{\bkmkend AAAAAAABSD}
00120 \par
{\bkmkstart AAAAAAABSE}{\bkmkend AAAAAAABSE}
00121         SPIMPL_CONSTEXPR unique_impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABSF}{\bkmkend AAAAAAABSF}
00122         : unique_impl_ptr() \{\}\par
{\bkmkstart AAAAAAABSG}{\bkmkend AAAAAAABSG}
00123 \par
{\bkmkstart AAAAAAABSH}{\bkmkend AAAAAAABSH}
00124         {\cf17 template}<{\cf17 class} D>\par
{\bkmkstart AAAAAAABSI}{\bkmkend AAAAAAABSI}
00125         unique_impl_ptr(pointer p, D&& d,\par
{\bkmkstart AAAAAAABSJ}{\bkmkend AAAAAAABSJ}
00126                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABSK}{\bkmkend AAAAAAABSK}
00127                     std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAABSL}{\bkmkend AAAAAAABSL}
00128                     dummy_t_\par
{\bkmkstart AAAAAAABSM}{\bkmkend AAAAAAABSM}
00129                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABSN}{\bkmkend AAAAAAABSN}
00130         : ptr_(std::move(p), std::forward<D>(d)) \{\}\par
{\bkmkstart AAAAAAABSO}{\bkmkend AAAAAAABSO}
00131 \par
{\bkmkstart AAAAAAABSP}{\bkmkend AAAAAAABSP}
00132         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABSQ}{\bkmkend AAAAAAABSQ}
00133         unique_impl_ptr(U *u,\par
{\bkmkstart AAAAAAABSR}{\bkmkend AAAAAAABSR}
00134                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABSS}{\bkmkend AAAAAAABSS}
00135                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABST}{\bkmkend AAAAAAABST}
00136                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABSU}{\bkmkend AAAAAAABSU}
00137                     dummy_t_\par
{\bkmkstart AAAAAAABSV}{\bkmkend AAAAAAABSV}
00138                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABSW}{\bkmkend AAAAAAABSW}
00139         : unique_impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAABSX}{\bkmkend AAAAAAABSX}
00140 \par
{\bkmkstart AAAAAAABSY}{\bkmkend AAAAAAABSY}
00141 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAABSZ}{\bkmkend AAAAAAABSZ}
00142         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAABTA}{\bkmkend AAAAAAABTA}
00143 {\cf21 #else}\par
{\bkmkstart AAAAAAABTB}{\bkmkend AAAAAAABTB}
00144         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABTC}{\bkmkend AAAAAAABTC}
00145         : ptr_(std::move(r.ptr_)) \{\}\par
{\bkmkstart AAAAAAABTD}{\bkmkend AAAAAAABTD}
00146 {\cf21 #endif}\par
{\bkmkstart AAAAAAABTE}{\bkmkend AAAAAAABTE}
00147 \par
{\bkmkstart AAAAAAABTF}{\bkmkend AAAAAAABTF}
00148 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAABTG}{\bkmkend AAAAAAABTG}
00149         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABTH}{\bkmkend AAAAAAABTH}
00150         unique_impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAABTI}{\bkmkend AAAAAAABTI}
00151                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABTJ}{\bkmkend AAAAAAABTJ}
00152                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABTK}{\bkmkend AAAAAAABTK}
00153                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABTL}{\bkmkend AAAAAAABTL}
00154                     dummy_t_\par
{\bkmkstart AAAAAAABTM}{\bkmkend AAAAAAABTM}
00155                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABTN}{\bkmkend AAAAAAABTN}
00156         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAABTO}{\bkmkend AAAAAAABTO}
00157 {\cf21 #endif}\par
{\bkmkstart AAAAAAABTP}{\bkmkend AAAAAAABTP}
00158 \par
{\bkmkstart AAAAAAABTQ}{\bkmkend AAAAAAABTQ}
00159         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABTR}{\bkmkend AAAAAAABTR}
00160         unique_impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAABTS}{\bkmkend AAAAAAABTS}
00161                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABTT}{\bkmkend AAAAAAABTT}
00162                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABTU}{\bkmkend AAAAAAABTU}
00163                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAABTV}{\bkmkend AAAAAAABTV}
00164                     dummy_t_\par
{\bkmkstart AAAAAAABTW}{\bkmkend AAAAAAABTW}
00165                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABTX}{\bkmkend AAAAAAABTX}
00166         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAABTY}{\bkmkend AAAAAAABTY}
00167 \par
{\bkmkstart AAAAAAABTZ}{\bkmkend AAAAAAABTZ}
00168         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAABUA}{\bkmkend AAAAAAABUA}
00169         unique_impl_ptr(std::unique_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAABUB}{\bkmkend AAAAAAABUB}
00170                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABUC}{\bkmkend AAAAAAABUC}
00171                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABUD}{\bkmkend AAAAAAABUD}
00172                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAABUE}{\bkmkend AAAAAAABUE}
00173                     dummy_t_\par
{\bkmkstart AAAAAAABUF}{\bkmkend AAAAAAABUF}
00174                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABUG}{\bkmkend AAAAAAABUG}
00175         : ptr_(std::move(u)) \{\}\par
{\bkmkstart AAAAAAABUH}{\bkmkend AAAAAAABUH}
00176 \par
{\bkmkstart AAAAAAABUI}{\bkmkend AAAAAAABUI}
00177         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAABUJ}{\bkmkend AAAAAAABUJ}
00178         unique_impl_ptr(unique_impl_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAABUK}{\bkmkend AAAAAAABUK}
00179                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABUL}{\bkmkend AAAAAAABUL}
00180                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABUM}{\bkmkend AAAAAAABUM}
00181                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAABUN}{\bkmkend AAAAAAABUN}
00182                     dummy_t_\par
{\bkmkstart AAAAAAABUO}{\bkmkend AAAAAAABUO}
00183                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABUP}{\bkmkend AAAAAAABUP}
00184         : ptr_(std::move(u.ptr_)) \{\}\par
{\bkmkstart AAAAAAABUQ}{\bkmkend AAAAAAABUQ}
00185 \par
{\bkmkstart AAAAAAABUR}{\bkmkend AAAAAAABUR}
00186         unique_impl_ptr({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAABUS}{\bkmkend AAAAAAABUS}
00187 \par
{\bkmkstart AAAAAAABUT}{\bkmkend AAAAAAABUT}
00188 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAABUU}{\bkmkend AAAAAAABUU}
00189         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAABUV}{\bkmkend AAAAAAABUV}
00190 {\cf21 #else}\par
{\bkmkstart AAAAAAABUW}{\bkmkend AAAAAAABUW}
00191         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAABUX}{\bkmkend AAAAAAABUX}
00192             ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAABUY}{\bkmkend AAAAAAABUY}
00193             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAABUZ}{\bkmkend AAAAAAABUZ}
00194         \}\par
{\bkmkstart AAAAAAABVA}{\bkmkend AAAAAAABVA}
00195 {\cf21 #endif}\par
{\bkmkstart AAAAAAABVB}{\bkmkend AAAAAAABVB}
00196 \par
{\bkmkstart AAAAAAABVC}{\bkmkend AAAAAAABVC}
00197 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAABVD}{\bkmkend AAAAAAABVD}
00198         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABVE}{\bkmkend AAAAAAABVE}
00199         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABVF}{\bkmkend AAAAAAABVF}
00200             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABVG}{\bkmkend AAAAAAABVG}
00201                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAABVH}{\bkmkend AAAAAAABVH}
00202             unique_impl_ptr&\par
{\bkmkstart AAAAAAABVI}{\bkmkend AAAAAAABVI}
00203         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABVJ}{\bkmkend AAAAAAABVJ}
00204         \{\par
{\bkmkstart AAAAAAABVK}{\bkmkend AAAAAAABVK}
00205             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAABVL}{\bkmkend AAAAAAABVL}
00206         \}\par
{\bkmkstart AAAAAAABVM}{\bkmkend AAAAAAABVM}
00207 {\cf21 #endif}\par
{\bkmkstart AAAAAAABVN}{\bkmkend AAAAAAABVN}
00208 \par
{\bkmkstart AAAAAAABVO}{\bkmkend AAAAAAABVO}
00209         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAABVP}{\bkmkend AAAAAAABVP}
00210         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAABVQ}{\bkmkend AAAAAAABVQ}
00211             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAABVR}{\bkmkend AAAAAAABVR}
00212                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAABVS}{\bkmkend AAAAAAABVS}
00213             unique_impl_ptr&\par
{\bkmkstart AAAAAAABVT}{\bkmkend AAAAAAABVT}
00214         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABVU}{\bkmkend AAAAAAABVU}
00215         \{\par
{\bkmkstart AAAAAAABVV}{\bkmkend AAAAAAABVV}
00216             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAABVW}{\bkmkend AAAAAAABVW}
00217         \}\par
{\bkmkstart AAAAAAABVX}{\bkmkend AAAAAAABVX}
00218 \par
{\bkmkstart AAAAAAABVY}{\bkmkend AAAAAAABVY}
00219         reference operator=({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAABVZ}{\bkmkend AAAAAAABVZ}
00220 \par
{\bkmkstart AAAAAAABWA}{\bkmkend AAAAAAABWA}
00221         reference operator*() \{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAABWB}{\bkmkend AAAAAAABWB}
00222         const_reference operator*(){\cf17  const }\{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAABWC}{\bkmkend AAAAAAABWC}
00223 \par
{\bkmkstart AAAAAAABWD}{\bkmkend AAAAAAABWD}
00224         pointer operator->() SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAABWE}{\bkmkend AAAAAAABWE}
00225         const_pointer operator->() const SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAABWF}{\bkmkend AAAAAAABWF}
00226 \par
{\bkmkstart AAAAAAABWG}{\bkmkend AAAAAAABWG}
00227         pointer get() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAABWH}{\bkmkend AAAAAAABWH}
00228         const_pointer get() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAABWI}{\bkmkend AAAAAAABWI}
00229 \par
{\bkmkstart AAAAAAABWJ}{\bkmkend AAAAAAABWJ}
00230         {\cf18 void} swap(unique_impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABWK}{\bkmkend AAAAAAABWK}
00231         \{\par
{\bkmkstart AAAAAAABWL}{\bkmkend AAAAAAABWL}
00232             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAABWM}{\bkmkend AAAAAAABWM}
00233             ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAABWN}{\bkmkend AAAAAAABWN}
00234         \}\par
{\bkmkstart AAAAAAABWO}{\bkmkend AAAAAAABWO}
00235 \par
{\bkmkstart AAAAAAABWP}{\bkmkend AAAAAAABWP}
00236         pointer release() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.release(); \}\par
{\bkmkstart AAAAAAABWQ}{\bkmkend AAAAAAABWQ}
00237 \par
{\bkmkstart AAAAAAABWR}{\bkmkend AAAAAAABWR}
00238         unique_ptr_type release_unique() SPIMPL_NOEXCEPT \{ {\cf19 return} std::move(ptr_); \}\par
{\bkmkstart AAAAAAABWS}{\bkmkend AAAAAAABWS}
00239 \par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00240         {\cf17 explicit} {\cf17 operator} bool() const SPIMPL_NOEXCEPT \{ {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(ptr_); \}\par
{\bkmkstart AAAAAAABWU}{\bkmkend AAAAAAABWU}
00241 \par
{\bkmkstart AAAAAAABWV}{\bkmkend AAAAAAABWV}
00242         {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAABWW}{\bkmkend AAAAAAABWW}
00243         {\cf17 const} {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAABWX}{\bkmkend AAAAAAABWX}
00244 \par
{\bkmkstart AAAAAAABWY}{\bkmkend AAAAAAABWY}
00245     {\cf17 protected}:\par
{\bkmkstart AAAAAAABWZ}{\bkmkend AAAAAAABWZ}
00246         unique_ptr_type ptr_;\par
{\bkmkstart AAAAAAABXA}{\bkmkend AAAAAAABXA}
00247     \};\par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00248 \par
{\bkmkstart AAAAAAABXC}{\bkmkend AAAAAAABXC}
00249 \par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00250     {\cf17 template}<{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABXE}{\bkmkend AAAAAAABXE}
00251     {\cf17 inline} {\cf18 void} swap(unique_impl_ptr<T, D>& l, unique_impl_ptr<T, D>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABXF}{\bkmkend AAAAAAABXF}
00252     \{\par
{\bkmkstart AAAAAAABXG}{\bkmkend AAAAAAABXG}
00253         l.swap(r);\par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00254     \}\par
{\bkmkstart AAAAAAABXI}{\bkmkend AAAAAAABXI}
00255 \par
{\bkmkstart AAAAAAABXJ}{\bkmkend AAAAAAABXJ}
00256 \par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00257     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABXL}{\bkmkend AAAAAAABXL}
00258     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00259     \{\par
{\bkmkstart AAAAAAABXN}{\bkmkend AAAAAAABXN}
00260         {\cf19 return} l.get() == r.get();\par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00261     \}\par
{\bkmkstart AAAAAAABXP}{\bkmkend AAAAAAABXP}
00262 \par
{\bkmkstart AAAAAAABXQ}{\bkmkend AAAAAAABXQ}
00263     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} C1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00264     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABXS}{\bkmkend AAAAAAABXS}
00265     \{\par
{\bkmkstart AAAAAAABXT}{\bkmkend AAAAAAABXT}
00266         {\cf19 return} !(l == r);\par
{\bkmkstart AAAAAAABXU}{\bkmkend AAAAAAABXU}
00267     \}\par
{\bkmkstart AAAAAAABXV}{\bkmkend AAAAAAABXV}
00268 \par
{\bkmkstart AAAAAAABXW}{\bkmkend AAAAAAABXW}
00269     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABXX}{\bkmkend AAAAAAABXX}
00270     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABXY}{\bkmkend AAAAAAABXY}
00271     \{\par
{\bkmkstart AAAAAAABXZ}{\bkmkend AAAAAAABXZ}
00272         {\cf17 using} P1 = {\cf17 typename} unique_impl_ptr<T1, D1>::pointer;\par
{\bkmkstart AAAAAAABYA}{\bkmkend AAAAAAABYA}
00273         {\cf17 using} P2 = {\cf17 typename} unique_impl_ptr<T2, D2>::pointer;\par
{\bkmkstart AAAAAAABYB}{\bkmkend AAAAAAABYB}
00274         {\cf17 using} CT = {\cf17 typename} std::common_type<P1, P2>::type;\par
{\bkmkstart AAAAAAABYC}{\bkmkend AAAAAAABYC}
00275         {\cf19 return} std::less<CT>()(l.get(), r.get());\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00276     \}\par
{\bkmkstart AAAAAAABYE}{\bkmkend AAAAAAABYE}
00277 \par
{\bkmkstart AAAAAAABYF}{\bkmkend AAAAAAABYF}
00278     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABYG}{\bkmkend AAAAAAABYG}
00279     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABYH}{\bkmkend AAAAAAABYH}
00280     \{\par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00281         {\cf19 return} r < l;\par
{\bkmkstart AAAAAAABYJ}{\bkmkend AAAAAAABYJ}
00282     \}\par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00283 \par
{\bkmkstart AAAAAAABYL}{\bkmkend AAAAAAABYL}
00284     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABYM}{\bkmkend AAAAAAABYM}
00285     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABYN}{\bkmkend AAAAAAABYN}
00286     \{\par
{\bkmkstart AAAAAAABYO}{\bkmkend AAAAAAABYO}
00287         {\cf19 return} !(r < l);\par
{\bkmkstart AAAAAAABYP}{\bkmkend AAAAAAABYP}
00288     \}\par
{\bkmkstart AAAAAAABYQ}{\bkmkend AAAAAAABYQ}
00289 \par
{\bkmkstart AAAAAAABYR}{\bkmkend AAAAAAABYR}
00290     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00291     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAABYT}{\bkmkend AAAAAAABYT}
00292     \{\par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00293         {\cf19 return} !(l < r);\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00294     \}\par
{\bkmkstart AAAAAAABYW}{\bkmkend AAAAAAABYW}
00295 \par
{\bkmkstart AAAAAAABYX}{\bkmkend AAAAAAABYX}
00296     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00297     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00298     \{\par
{\bkmkstart AAAAAAABZA}{\bkmkend AAAAAAABZA}
00299         {\cf19 return} !p;\par
{\bkmkstart AAAAAAABZB}{\bkmkend AAAAAAABZB}
00300     \}\par
{\bkmkstart AAAAAAABZC}{\bkmkend AAAAAAABZC}
00301 \par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00302     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABZE}{\bkmkend AAAAAAABZE}
00303     {\cf17 inline} {\cf18 bool} operator==(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00304     \{\par
{\bkmkstart AAAAAAABZG}{\bkmkend AAAAAAABZG}
00305         {\cf19 return} !p;\par
{\bkmkstart AAAAAAABZH}{\bkmkend AAAAAAABZH}
00306     \}\par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00307 \par
{\bkmkstart AAAAAAABZJ}{\bkmkend AAAAAAABZJ}
00308     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABZK}{\bkmkend AAAAAAABZK}
00309     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABZL}{\bkmkend AAAAAAABZL}
00310     \{\par
{\bkmkstart AAAAAAABZM}{\bkmkend AAAAAAABZM}
00311         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00312     \}\par
{\bkmkstart AAAAAAABZO}{\bkmkend AAAAAAABZO}
00313 \par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00314     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00315     {\cf17 inline} {\cf18 bool} operator!=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00316     \{\par
{\bkmkstart AAAAAAABZS}{\bkmkend AAAAAAABZS}
00317         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00318     \}\par
{\bkmkstart AAAAAAABZU}{\bkmkend AAAAAAABZU}
00319 \par
{\bkmkstart AAAAAAABZV}{\bkmkend AAAAAAABZV}
00320     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00321     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T, D>& l, std::nullptr_t)\par
{\bkmkstart AAAAAAABZX}{\bkmkend AAAAAAABZX}
00322     \{\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00323         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAABZZ}{\bkmkend AAAAAAABZZ}
00324         {\cf19 return} std::less<P>()(l.get(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00325     \}\par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00326 \par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00327     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACAD}{\bkmkend AAAAAAACAD}
00328     {\cf17 inline} {\cf18 bool} operator< (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00329     \{\par
{\bkmkstart AAAAAAACAF}{\bkmkend AAAAAAACAF}
00330         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAACAG}{\bkmkend AAAAAAACAG}
00331         {\cf19 return} std::less<P>()({\cf17 nullptr}, p.get());\par
{\bkmkstart AAAAAAACAH}{\bkmkend AAAAAAACAH}
00332     \}\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00333 \par
{\bkmkstart AAAAAAACAJ}{\bkmkend AAAAAAACAJ}
00334     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACAK}{\bkmkend AAAAAAACAK}
00335     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00336     \{\par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00337         {\cf19 return} {\cf17 nullptr} < p;\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00338     \}\par
{\bkmkstart AAAAAAACAO}{\bkmkend AAAAAAACAO}
00339 \par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00340     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00341     {\cf17 inline} {\cf18 bool} operator> (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACAR}{\bkmkend AAAAAAACAR}
00342     \{\par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00343         {\cf19 return} p < {\cf17 nullptr};\par
{\bkmkstart AAAAAAACAT}{\bkmkend AAAAAAACAT}
00344     \}\par
{\bkmkstart AAAAAAACAU}{\bkmkend AAAAAAACAU}
00345 \par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00346     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACAW}{\bkmkend AAAAAAACAW}
00347     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00348     \{\par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00349         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00350     \}\par
{\bkmkstart AAAAAAACBA}{\bkmkend AAAAAAACBA}
00351 \par
{\bkmkstart AAAAAAACBB}{\bkmkend AAAAAAACBB}
00352     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00353     {\cf17 inline} {\cf18 bool} operator<=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00354     \{\par
{\bkmkstart AAAAAAACBE}{\bkmkend AAAAAAACBE}
00355         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00356     \}\par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00357 \par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00358     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00359     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACBJ}{\bkmkend AAAAAAACBJ}
00360     \{\par
{\bkmkstart AAAAAAACBK}{\bkmkend AAAAAAACBK}
00361         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAACBL}{\bkmkend AAAAAAACBL}
00362     \}\par
{\bkmkstart AAAAAAACBM}{\bkmkend AAAAAAACBM}
00363 \par
{\bkmkstart AAAAAAACBN}{\bkmkend AAAAAAACBN}
00364     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACBO}{\bkmkend AAAAAAACBO}
00365     {\cf17 inline} {\cf18 bool} operator>=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACBP}{\bkmkend AAAAAAACBP}
00366     \{\par
{\bkmkstart AAAAAAACBQ}{\bkmkend AAAAAAACBQ}
00367         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAACBR}{\bkmkend AAAAAAACBR}
00368     \}\par
{\bkmkstart AAAAAAACBS}{\bkmkend AAAAAAACBS}
00369 \par
{\bkmkstart AAAAAAACBT}{\bkmkend AAAAAAACBT}
00370 \par
{\bkmkstart AAAAAAACBU}{\bkmkend AAAAAAACBU}
00371     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAACBV}{\bkmkend AAAAAAACBV}
00372     {\cf17 inline} unique_impl_ptr<T> make_unique_impl(Args&&... args)\par
{\bkmkstart AAAAAAACBW}{\bkmkend AAAAAAACBW}
00373     \{\par
{\bkmkstart AAAAAAACBX}{\bkmkend AAAAAAACBX}
00374         {\cf19 return} unique_impl_ptr<T>({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>);\par
{\bkmkstart AAAAAAACBY}{\bkmkend AAAAAAACBY}
00375     \}\par
{\bkmkstart AAAAAAACBZ}{\bkmkend AAAAAAACBZ}
00376 \par
{\bkmkstart AAAAAAACCA}{\bkmkend AAAAAAACCA}
00377 \par
{\bkmkstart AAAAAAACCB}{\bkmkend AAAAAAACCB}
00378     {\cf20 // Helpers to manage unique impl, stored in std::unique_ptr}\par
{\bkmkstart AAAAAAACCC}{\bkmkend AAAAAAACCC}
00379     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>, {\cf17 class} Copier = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAACCD}{\bkmkend AAAAAAACCD}
00380     {\cf17 class }impl_ptr : {\cf17 public} unique_impl_ptr<T, Deleter>\par
{\bkmkstart AAAAAAACCE}{\bkmkend AAAAAAACCE}
00381     \{\par
{\bkmkstart AAAAAAACCF}{\bkmkend AAAAAAACCF}
00382         {\cf17 using} base_type = unique_impl_ptr<T, Deleter>;\par
{\bkmkstart AAAAAAACCG}{\bkmkend AAAAAAACCG}
00383         {\cf17 using} dummy_t_ = {\cf17 typename} base_type::dummy_t_;\par
{\bkmkstart AAAAAAACCH}{\bkmkend AAAAAAACCH}
00384     {\cf17 public}:\par
{\bkmkstart AAAAAAACCI}{\bkmkend AAAAAAACCI}
00385         {\cf17 using} pointer = {\cf17 typename} base_type::pointer;\par
{\bkmkstart AAAAAAACCJ}{\bkmkend AAAAAAACCJ}
00386         {\cf17 using} const_pointer = {\cf17 typename} base_type::const_pointer;\par
{\bkmkstart AAAAAAACCK}{\bkmkend AAAAAAACCK}
00387         {\cf17 using} reference = {\cf17 typename} base_type::reference;\par
{\bkmkstart AAAAAAACCL}{\bkmkend AAAAAAACCL}
00388         {\cf17 using} const_reference = {\cf17 typename} base_type::const_reference;\par
{\bkmkstart AAAAAAACCM}{\bkmkend AAAAAAACCM}
00389         {\cf17 using} element_type = {\cf17 typename} base_type::element_type;\par
{\bkmkstart AAAAAAACCN}{\bkmkend AAAAAAACCN}
00390         {\cf17 using} deleter_type = {\cf17 typename} base_type::deleter_type;\par
{\bkmkstart AAAAAAACCO}{\bkmkend AAAAAAACCO}
00391         {\cf17 using} unique_ptr_type = {\cf17 typename} base_type::unique_ptr_type;\par
{\bkmkstart AAAAAAACCP}{\bkmkend AAAAAAACCP}
00392         {\cf17 using} copier_type = {\cf17 typename} std::decay<Copier>::type;\par
{\bkmkstart AAAAAAACCQ}{\bkmkend AAAAAAACCQ}
00393         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type, copier_type>;\par
{\bkmkstart AAAAAAACCR}{\bkmkend AAAAAAACCR}
00394 \par
{\bkmkstart AAAAAAACCS}{\bkmkend AAAAAAACCS}
00395         SPIMPL_CONSTEXPR impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACCT}{\bkmkend AAAAAAACCT}
00396         : base_type({\cf18 nullptr}, deleter_type\{\}), copier_(copier_type\{\}) \{\}\par
{\bkmkstart AAAAAAACCU}{\bkmkend AAAAAAACCU}
00397 \par
{\bkmkstart AAAAAAACCV}{\bkmkend AAAAAAACCV}
00398         SPIMPL_CONSTEXPR impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACCW}{\bkmkend AAAAAAACCW}
00399         : impl_ptr() \{\}\par
{\bkmkstart AAAAAAACCX}{\bkmkend AAAAAAACCX}
00400 \par
{\bkmkstart AAAAAAACCY}{\bkmkend AAAAAAACCY}
00401         {\cf17 template}<{\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACCZ}{\bkmkend AAAAAAACCZ}
00402         impl_ptr(pointer p, D&& d, C&& c,\par
{\bkmkstart AAAAAAACDA}{\bkmkend AAAAAAACDA}
00403                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACDB}{\bkmkend AAAAAAACDB}
00404                     std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAACDC}{\bkmkend AAAAAAACDC}
00405                         && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAACDD}{\bkmkend AAAAAAACDD}
00406                     {\cf17 typename} base_type::dummy_t_\par
{\bkmkstart AAAAAAACDE}{\bkmkend AAAAAAACDE}
00407                  >::type = {\cf17 typename} base_type::dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACDF}{\bkmkend AAAAAAACDF}
00408         : base_type(std::move(p), std::forward<D>(d)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAACDG}{\bkmkend AAAAAAACDG}
00409 \par
{\bkmkstart AAAAAAACDH}{\bkmkend AAAAAAACDH}
00410         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACDI}{\bkmkend AAAAAAACDI}
00411         impl_ptr(U *u,\par
{\bkmkstart AAAAAAACDJ}{\bkmkend AAAAAAACDJ}
00412                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACDK}{\bkmkend AAAAAAACDK}
00413                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACDL}{\bkmkend AAAAAAACDL}
00414                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACDM}{\bkmkend AAAAAAACDM}
00415                     dummy_t_\par
{\bkmkstart AAAAAAACDN}{\bkmkend AAAAAAACDN}
00416                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACDO}{\bkmkend AAAAAAACDO}
00417         : impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAACDP}{\bkmkend AAAAAAACDP}
00418 \par
{\bkmkstart AAAAAAACDQ}{\bkmkend AAAAAAACDQ}
00419         impl_ptr({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAACDR}{\bkmkend AAAAAAACDR}
00420         : impl_ptr(r.clone()) \{\}\par
{\bkmkstart AAAAAAACDS}{\bkmkend AAAAAAACDS}
00421 \par
{\bkmkstart AAAAAAACDT}{\bkmkend AAAAAAACDT}
00422 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAACDU}{\bkmkend AAAAAAACDU}
00423         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAACDV}{\bkmkend AAAAAAACDV}
00424 {\cf21 #else}\par
{\bkmkstart AAAAAAACDW}{\bkmkend AAAAAAACDW}
00425         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACDX}{\bkmkend AAAAAAACDX}
00426         : base_type(std::move(r.ptr_)), copier_(std::move(r.copier_)) \{\}\par
{\bkmkstart AAAAAAACDY}{\bkmkend AAAAAAACDY}
00427 {\cf21 #endif}\par
{\bkmkstart AAAAAAACDZ}{\bkmkend AAAAAAACDZ}
00428 \par
{\bkmkstart AAAAAAACEA}{\bkmkend AAAAAAACEA}
00429 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAACEB}{\bkmkend AAAAAAACEB}
00430         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACEC}{\bkmkend AAAAAAACEC}
00431         impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAACED}{\bkmkend AAAAAAACED}
00432                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACEE}{\bkmkend AAAAAAACEE}
00433                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACEF}{\bkmkend AAAAAAACEF}
00434                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACEG}{\bkmkend AAAAAAACEG}
00435                     dummy_t_\par
{\bkmkstart AAAAAAACEH}{\bkmkend AAAAAAACEH}
00436                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACEI}{\bkmkend AAAAAAACEI}
00437         : base_type(u.release(), &details::default_delete<T>), copier_(&details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAACEJ}{\bkmkend AAAAAAACEJ}
00438 {\cf21 #endif}\par
{\bkmkstart AAAAAAACEK}{\bkmkend AAAAAAACEK}
00439 \par
{\bkmkstart AAAAAAACEL}{\bkmkend AAAAAAACEL}
00440         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACEM}{\bkmkend AAAAAAACEM}
00441         impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAACEN}{\bkmkend AAAAAAACEN}
00442                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACEO}{\bkmkend AAAAAAACEO}
00443                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACEP}{\bkmkend AAAAAAACEP}
00444                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACEQ}{\bkmkend AAAAAAACEQ}
00445                     dummy_t_\par
{\bkmkstart AAAAAAACER}{\bkmkend AAAAAAACER}
00446                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACES}{\bkmkend AAAAAAACES}
00447         : base_type(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAACET}{\bkmkend AAAAAAACET}
00448 \par
{\bkmkstart AAAAAAACEU}{\bkmkend AAAAAAACEU}
00449         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACEV}{\bkmkend AAAAAAACEV}
00450         impl_ptr(std::unique_ptr<U, D>&& u, C&& c,\par
{\bkmkstart AAAAAAACEW}{\bkmkend AAAAAAACEW}
00451                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACEX}{\bkmkend AAAAAAACEX}
00452                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACEY}{\bkmkend AAAAAAACEY}
00453                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAACEZ}{\bkmkend AAAAAAACEZ}
00454                     dummy_t_\par
{\bkmkstart AAAAAAACFA}{\bkmkend AAAAAAACFA}
00455                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACFB}{\bkmkend AAAAAAACFB}
00456         : base_type(std::move(u)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAACFC}{\bkmkend AAAAAAACFC}
00457 \par
{\bkmkstart AAAAAAACFD}{\bkmkend AAAAAAACFD}
00458         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACFE}{\bkmkend AAAAAAACFE}
00459         impl_ptr(impl_ptr<U, D, C>&& u,\par
{\bkmkstart AAAAAAACFF}{\bkmkend AAAAAAACFF}
00460                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACFG}{\bkmkend AAAAAAACFG}
00461                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACFH}{\bkmkend AAAAAAACFH}
00462                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAACFI}{\bkmkend AAAAAAACFI}
00463                     dummy_t_\par
{\bkmkstart AAAAAAACFJ}{\bkmkend AAAAAAACFJ}
00464                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACFK}{\bkmkend AAAAAAACFK}
00465         : base_type(std::move(u.ptr_)), copier_(std::move(u.copier_)) \{\}\par
{\bkmkstart AAAAAAACFL}{\bkmkend AAAAAAACFL}
00466 \par
{\bkmkstart AAAAAAACFM}{\bkmkend AAAAAAACFM}
00467         impl_ptr& operator= ({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAACFN}{\bkmkend AAAAAAACFN}
00468         \{\par
{\bkmkstart AAAAAAACFO}{\bkmkend AAAAAAACFO}
00469             {\cf19 if} ({\cf17 this} == &r)\par
{\bkmkstart AAAAAAACFP}{\bkmkend AAAAAAACFP}
00470                 {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAACFQ}{\bkmkend AAAAAAACFQ}
00471 \par
{\bkmkstart AAAAAAACFR}{\bkmkend AAAAAAACFR}
00472             {\cf19 return} operator=(r.clone());\par
{\bkmkstart AAAAAAACFS}{\bkmkend AAAAAAACFS}
00473         \}\par
{\bkmkstart AAAAAAACFT}{\bkmkend AAAAAAACFT}
00474 \par
{\bkmkstart AAAAAAACFU}{\bkmkend AAAAAAACFU}
00475 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAACFV}{\bkmkend AAAAAAACFV}
00476         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAACFW}{\bkmkend AAAAAAACFW}
00477 {\cf21 #else}\par
{\bkmkstart AAAAAAACFX}{\bkmkend AAAAAAACFX}
00478         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAACFY}{\bkmkend AAAAAAACFY}
00479             base_type::ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAACFZ}{\bkmkend AAAAAAACFZ}
00480             copier_ = std::move(r.copier_);\par
{\bkmkstart AAAAAAACGA}{\bkmkend AAAAAAACGA}
00481             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAACGB}{\bkmkend AAAAAAACGB}
00482         \}\par
{\bkmkstart AAAAAAACGC}{\bkmkend AAAAAAACGC}
00483 {\cf21 #endif}\par
{\bkmkstart AAAAAAACGD}{\bkmkend AAAAAAACGD}
00484 \par
{\bkmkstart AAAAAAACGE}{\bkmkend AAAAAAACGE}
00485         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACGF}{\bkmkend AAAAAAACGF}
00486         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACGG}{\bkmkend AAAAAAACGG}
00487             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACGH}{\bkmkend AAAAAAACGH}
00488                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAACGI}{\bkmkend AAAAAAACGI}
00489                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAACGJ}{\bkmkend AAAAAAACGJ}
00490             impl_ptr&\par
{\bkmkstart AAAAAAACGK}{\bkmkend AAAAAAACGK}
00491         >::type operator= ({\cf17 const} impl_ptr<U, D, C>& u)\par
{\bkmkstart AAAAAAACGL}{\bkmkend AAAAAAACGL}
00492         \{\par
{\bkmkstart AAAAAAACGM}{\bkmkend AAAAAAACGM}
00493             {\cf19 return} operator=(u.clone());\par
{\bkmkstart AAAAAAACGN}{\bkmkend AAAAAAACGN}
00494         \}\par
{\bkmkstart AAAAAAACGO}{\bkmkend AAAAAAACGO}
00495 \par
{\bkmkstart AAAAAAACGP}{\bkmkend AAAAAAACGP}
00496         {\cf20 //}\par
{\bkmkstart AAAAAAACGQ}{\bkmkend AAAAAAACGQ}
00497 \par
{\bkmkstart AAAAAAACGR}{\bkmkend AAAAAAACGR}
00498 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAACGS}{\bkmkend AAAAAAACGS}
00499         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACGT}{\bkmkend AAAAAAACGT}
00500         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACGU}{\bkmkend AAAAAAACGU}
00501             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACGV}{\bkmkend AAAAAAACGV}
00502                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAACGW}{\bkmkend AAAAAAACGW}
00503             impl_ptr&\par
{\bkmkstart AAAAAAACGX}{\bkmkend AAAAAAACGX}
00504         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACGY}{\bkmkend AAAAAAACGY}
00505         \{\par
{\bkmkstart AAAAAAACGZ}{\bkmkend AAAAAAACGZ}
00506             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAACHA}{\bkmkend AAAAAAACHA}
00507         \}\par
{\bkmkstart AAAAAAACHB}{\bkmkend AAAAAAACHB}
00508 {\cf21 #endif}\par
{\bkmkstart AAAAAAACHC}{\bkmkend AAAAAAACHC}
00509 \par
{\bkmkstart AAAAAAACHD}{\bkmkend AAAAAAACHD}
00510         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACHE}{\bkmkend AAAAAAACHE}
00511         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACHF}{\bkmkend AAAAAAACHF}
00512             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACHG}{\bkmkend AAAAAAACHG}
00513                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAACHH}{\bkmkend AAAAAAACHH}
00514             impl_ptr&\par
{\bkmkstart AAAAAAACHI}{\bkmkend AAAAAAACHI}
00515         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACHJ}{\bkmkend AAAAAAACHJ}
00516         \{\par
{\bkmkstart AAAAAAACHK}{\bkmkend AAAAAAACHK}
00517             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAACHL}{\bkmkend AAAAAAACHL}
00518         \}\par
{\bkmkstart AAAAAAACHM}{\bkmkend AAAAAAACHM}
00519 \par
{\bkmkstart AAAAAAACHN}{\bkmkend AAAAAAACHN}
00520         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACHO}{\bkmkend AAAAAAACHO}
00521         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACHP}{\bkmkend AAAAAAACHP}
00522             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACHQ}{\bkmkend AAAAAAACHQ}
00523                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAACHR}{\bkmkend AAAAAAACHR}
00524                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAACHS}{\bkmkend AAAAAAACHS}
00525             impl_ptr&\par
{\bkmkstart AAAAAAACHT}{\bkmkend AAAAAAACHT}
00526         >::type operator= (impl_ptr<U, D, C>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACHU}{\bkmkend AAAAAAACHU}
00527         \{\par
{\bkmkstart AAAAAAACHV}{\bkmkend AAAAAAACHV}
00528             base_type::ptr_ = std::move(u.ptr_);\par
{\bkmkstart AAAAAAACHW}{\bkmkend AAAAAAACHW}
00529             copier_ = std::move(u.copier_);\par
{\bkmkstart AAAAAAACHX}{\bkmkend AAAAAAACHX}
00530             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAACHY}{\bkmkend AAAAAAACHY}
00531         \}\par
{\bkmkstart AAAAAAACHZ}{\bkmkend AAAAAAACHZ}
00532 \par
{\bkmkstart AAAAAAACIA}{\bkmkend AAAAAAACIA}
00533         {\cf18 void} swap(impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACIB}{\bkmkend AAAAAAACIB}
00534         \{\par
{\bkmkstart AAAAAAACIC}{\bkmkend AAAAAAACIC}
00535             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAACID}{\bkmkend AAAAAAACID}
00536             base_type::ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAACIE}{\bkmkend AAAAAAACIE}
00537             swap(copier_, u.copier_);\par
{\bkmkstart AAAAAAACIF}{\bkmkend AAAAAAACIF}
00538         \}\par
{\bkmkstart AAAAAAACIG}{\bkmkend AAAAAAACIG}
00539 \par
{\bkmkstart AAAAAAACIH}{\bkmkend AAAAAAACIH}
00540         impl_ptr clone(){\cf17  const}\par
{\bkmkstart AAAAAAACII}{\bkmkend AAAAAAACII}
00541 {\cf17         }\{\par
{\bkmkstart AAAAAAACIJ}{\bkmkend AAAAAAACIJ}
00542             {\cf19 return} impl_ptr(\par
{\bkmkstart AAAAAAACIK}{\bkmkend AAAAAAACIK}
00543                 base_type::ptr_ ? copier_(base_type::ptr_.get()) : {\cf17 nullptr},\par
{\bkmkstart AAAAAAACIL}{\bkmkend AAAAAAACIL}
00544                 base_type::ptr_.get_deleter(),\par
{\bkmkstart AAAAAAACIM}{\bkmkend AAAAAAACIM}
00545                 copier_);\par
{\bkmkstart AAAAAAACIN}{\bkmkend AAAAAAACIN}
00546         \}\par
{\bkmkstart AAAAAAACIO}{\bkmkend AAAAAAACIO}
00547 \par
{\bkmkstart AAAAAAACIP}{\bkmkend AAAAAAACIP}
00548         {\cf17 const} {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() const SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAACIQ}{\bkmkend AAAAAAACIQ}
00549         {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAACIR}{\bkmkend AAAAAAACIR}
00550     {\cf17 private}:\par
{\bkmkstart AAAAAAACIS}{\bkmkend AAAAAAACIS}
00551         copier_type copier_;\par
{\bkmkstart AAAAAAACIT}{\bkmkend AAAAAAACIT}
00552     \};\par
{\bkmkstart AAAAAAACIU}{\bkmkend AAAAAAACIU}
00553 \par
{\bkmkstart AAAAAAACIV}{\bkmkend AAAAAAACIV}
00554     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAACIW}{\bkmkend AAAAAAACIW}
00555     {\cf17 inline} impl_ptr<T> make_impl(Args&&... args)\par
{\bkmkstart AAAAAAACIX}{\bkmkend AAAAAAACIX}
00556     \{\par
{\bkmkstart AAAAAAACIY}{\bkmkend AAAAAAACIY}
00557         {\cf19 return} impl_ptr<T>({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>, &details::default_copy<T>);\par
{\bkmkstart AAAAAAACIZ}{\bkmkend AAAAAAACIZ}
00558     \}\par
{\bkmkstart AAAAAAACJA}{\bkmkend AAAAAAACJA}
00559 \par
{\bkmkstart AAAAAAACJB}{\bkmkend AAAAAAACJB}
00560     {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACJC}{\bkmkend AAAAAAACJC}
00561     {\cf17 inline} {\cf18 void} swap(impl_ptr<T, D, C>& l,impl_ptr<T, D, C>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACJD}{\bkmkend AAAAAAACJD}
00562     \{\par
{\bkmkstart AAAAAAACJE}{\bkmkend AAAAAAACJE}
00563         l.swap(r);\par
{\bkmkstart AAAAAAACJF}{\bkmkend AAAAAAACJF}
00564     \}\par
{\bkmkstart AAAAAAACJG}{\bkmkend AAAAAAACJG}
00565 \}\par
{\bkmkstart AAAAAAACJH}{\bkmkend AAAAAAACJH}
00566 \par
{\bkmkstart AAAAAAACJI}{\bkmkend AAAAAAACJI}
00567 {\cf17 namespace }std \{\par
{\bkmkstart AAAAAAACJJ}{\bkmkend AAAAAAACJJ}
00568     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACJK}{\bkmkend AAAAAAACJK}
00569     {\cf17 struct }hash<spimpl ::unique_impl_ptr<T, D>>\par
{\bkmkstart AAAAAAACJL}{\bkmkend AAAAAAACJL}
00570     \{\par
{\bkmkstart AAAAAAACJM}{\bkmkend AAAAAAACJM}
00571         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr<T, D>}}}
 ;\par
{\bkmkstart AAAAAAACJN}{\bkmkend AAAAAAACJN}
00572         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAACJO}{\bkmkend AAAAAAACJO}
00573 \par
{\bkmkstart AAAAAAACJP}{\bkmkend AAAAAAACJP}
00574         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACJQ}{\bkmkend AAAAAAACJQ}
00575         \{\par
{\bkmkstart AAAAAAACJR}{\bkmkend AAAAAAACJR}
00576             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAACJS}{\bkmkend AAAAAAACJS}
00577         \}\par
{\bkmkstart AAAAAAACJT}{\bkmkend AAAAAAACJT}
00578     \};\par
{\bkmkstart AAAAAAACJU}{\bkmkend AAAAAAACJU}
00579 \par
{\bkmkstart AAAAAAACJV}{\bkmkend AAAAAAACJV}
00580     {\cf17 template} <{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACJW}{\bkmkend AAAAAAACJW}
00581     {\cf17 struct }hash<spimpl ::impl_ptr<T, D, C>>\par
{\bkmkstart AAAAAAACJX}{\bkmkend AAAAAAACJX}
00582     \{\par
{\bkmkstart AAAAAAACJY}{\bkmkend AAAAAAACJY}
00583         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr<T, D, C>}}}
 ;\par
{\bkmkstart AAAAAAACJZ}{\bkmkend AAAAAAACJZ}
00584         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAACKA}{\bkmkend AAAAAAACKA}
00585 \par
{\bkmkstart AAAAAAACKB}{\bkmkend AAAAAAACKB}
00586         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACKC}{\bkmkend AAAAAAACKC}
00587         \{\par
{\bkmkstart AAAAAAACKD}{\bkmkend AAAAAAACKD}
00588             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAACKE}{\bkmkend AAAAAAACKE}
00589         \}\par
{\bkmkstart AAAAAAACKF}{\bkmkend AAAAAAACKF}
00590     \};\par
{\bkmkstart AAAAAAACKG}{\bkmkend AAAAAAACKG}
00591 \}\par
{\bkmkstart AAAAAAACKH}{\bkmkend AAAAAAACKH}
00592 \par
{\bkmkstart AAAAAAACKI}{\bkmkend AAAAAAACKI}
00593 {\cf21 #endif }{\cf20 // SPIMPL_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spimplc.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/spimplc.hpp}
{\xe \v code/include/spimplc.hpp}
{\bkmkstart AAAAAAACKJ}
{\bkmkend AAAAAAACKJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAACKK}{\bkmkend AAAAAAACKK}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAACKL}{\bkmkend AAAAAAACKL}
00002 {\cf20 *   Smart Pointer to IMPL Copyable}\par
{\bkmkstart AAAAAAACKM}{\bkmkend AAAAAAACKM}
00003 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAACKN}{\bkmkend AAAAAAACKN}
00004 {\cf20     A Smart Pointer to IMPLementation (i.e. Smart PIMPL or just SPIMPL).}\par
{\bkmkstart AAAAAAACKO}{\bkmkend AAAAAAACKO}
00005 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAACKP}{\bkmkend AAAAAAACKP}
00006 {\cf20 }\par
{\bkmkstart AAAAAAACKQ}{\bkmkend AAAAAAACKQ}
00007 {\cf20     Version: 1.2}\par
{\bkmkstart AAAAAAACKR}{\bkmkend AAAAAAACKR}
00008 {\cf20 }\par
{\bkmkstart AAAAAAACKS}{\bkmkend AAAAAAACKS}
00009 {\cf20     Latest version:}\par
{\bkmkstart AAAAAAACKT}{\bkmkend AAAAAAACKT}
00010 {\cf20         https://github.com/oliora/samples/blob/master/spimpl.h}\par
{\bkmkstart AAAAAAACKU}{\bkmkend AAAAAAACKU}
00011 {\cf20     Rationale and description:}\par
{\bkmkstart AAAAAAACKV}{\bkmkend AAAAAAACKV}
00012 {\cf20         http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html}\par
{\bkmkstart AAAAAAACKW}{\bkmkend AAAAAAACKW}
00013 {\cf20 }\par
{\bkmkstart AAAAAAACKX}{\bkmkend AAAAAAACKX}
00014 {\cf20     Copyright (c) 2015 Andrey Upadyshev (oliora@gmail.com)}\par
{\bkmkstart AAAAAAACKY}{\bkmkend AAAAAAACKY}
00015 {\cf20 }\par
{\bkmkstart AAAAAAACKZ}{\bkmkend AAAAAAACKZ}
00016 {\cf20     Distributed under the Boost Software License, Version 1.0.}\par
{\bkmkstart AAAAAAACLA}{\bkmkend AAAAAAACLA}
00017 {\cf20     See http://www.boost.org/LICENSE_1_0.txt}\par
{\bkmkstart AAAAAAACLB}{\bkmkend AAAAAAACLB}
00018 {\cf20 }\par
{\bkmkstart AAAAAAACLC}{\bkmkend AAAAAAACLC}
00019 {\cf20     Changes history}\par
{\bkmkstart AAAAAAACLD}{\bkmkend AAAAAAACLD}
00020 {\cf20     ---------------}\par
{\bkmkstart AAAAAAACLE}{\bkmkend AAAAAAACLE}
00021 {\cf20     v1.2:}\par
{\bkmkstart AAAAAAACLF}{\bkmkend AAAAAAACLF}
00022 {\cf20         - const correctness}\par
{\bkmkstart AAAAAAACLG}{\bkmkend AAAAAAACLG}
00023 {\cf20     v1.1:}\par
{\bkmkstart AAAAAAACLH}{\bkmkend AAAAAAACLH}
00024 {\cf20         - auto_ptr support is disabled by default for C++17 compatibility}\par
{\bkmkstart AAAAAAACLI}{\bkmkend AAAAAAACLI}
00025 {\cf20     v1.0:}\par
{\bkmkstart AAAAAAACLJ}{\bkmkend AAAAAAACLJ}
00026 {\cf20         - Released}\par
{\bkmkstart AAAAAAACLK}{\bkmkend AAAAAAACLK}
00027 {\cf20  */}\par
{\bkmkstart AAAAAAACLL}{\bkmkend AAAAAAACLL}
00028 \par
{\bkmkstart AAAAAAACLM}{\bkmkend AAAAAAACLM}
00029 {\cf21 #ifndef __SPIMPLC_HPP__}\par
{\bkmkstart AAAAAAACLN}{\bkmkend AAAAAAACLN}
00030 {\cf21 #define __SPIMPLC_HPP__}\par
{\bkmkstart AAAAAAACLO}{\bkmkend AAAAAAACLO}
00031 \par
{\bkmkstart AAAAAAACLP}{\bkmkend AAAAAAACLP}
00032 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAACLQ}{\bkmkend AAAAAAACLQ}
00033 {\cf21 #include <type_traits>}\par
{\bkmkstart AAAAAAACLR}{\bkmkend AAAAAAACLR}
00034 {\cf21 #include <cassert>}\par
{\bkmkstart AAAAAAACLS}{\bkmkend AAAAAAACLS}
00035 \par
{\bkmkstart AAAAAAACLT}{\bkmkend AAAAAAACLT}
00036 \par
{\bkmkstart AAAAAAACLU}{\bkmkend AAAAAAACLU}
00037 {\cf21 #if defined _MSC_VER && _MSC_VER < 1900  }{\cf20 // MS Visual Studio before VS2015}\par
{\bkmkstart AAAAAAACLV}{\bkmkend AAAAAAACLV}
00038 {\cf21 #define SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAACLW}{\bkmkend AAAAAAACLW}
00039 {\cf21 #define SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAACLX}{\bkmkend AAAAAAACLX}
00040 {\cf21 #define SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAACLY}{\bkmkend AAAAAAACLY}
00041 {\cf21 #endif}\par
{\bkmkstart AAAAAAACLZ}{\bkmkend AAAAAAACLZ}
00042 \par
{\bkmkstart AAAAAAACMA}{\bkmkend AAAAAAACMA}
00043 {\cf21 #if ! defined SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAACMB}{\bkmkend AAAAAAACMB}
00044 {\cf21 #define SPIMPL_NOEXCEPT noexcept}\par
{\bkmkstart AAAAAAACMC}{\bkmkend AAAAAAACMC}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAACMD}{\bkmkend AAAAAAACMD}
00046 {\cf21 #define SPIMPL_NOEXCEPT}\par
{\bkmkstart AAAAAAACME}{\bkmkend AAAAAAACME}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAACMF}{\bkmkend AAAAAAACMF}
00048 \par
{\bkmkstart AAAAAAACMG}{\bkmkend AAAAAAACMG}
00049 {\cf21 #if ! defined SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAACMH}{\bkmkend AAAAAAACMH}
00050 {\cf21 #define SPIMPL_CONSTEXPR constexpr}\par
{\bkmkstart AAAAAAACMI}{\bkmkend AAAAAAACMI}
00051 {\cf21 #else}\par
{\bkmkstart AAAAAAACMJ}{\bkmkend AAAAAAACMJ}
00052 {\cf21 #define SPIMPL_CONSTEXPR}\par
{\bkmkstart AAAAAAACMK}{\bkmkend AAAAAAACMK}
00053 {\cf21 #endif}\par
{\bkmkstart AAAAAAACML}{\bkmkend AAAAAAACML}
00054 \par
{\bkmkstart AAAAAAACMM}{\bkmkend AAAAAAACMM}
00055 {\cf20 // define SPIMPL_HAS_AUTO_PTR to enable constructor and assignment operator that accept std::auto_ptr}\par
{\bkmkstart AAAAAAACMN}{\bkmkend AAAAAAACMN}
00056 {\cf20 // TODO: auto detect std::auto_ptr support}\par
{\bkmkstart AAAAAAACMO}{\bkmkend AAAAAAACMO}
00057 \par
{\bkmkstart AAAAAAACMP}{\bkmkend AAAAAAACMP}
00058 \par
{\bkmkstart AAAAAAACMQ}{\bkmkend AAAAAAACMQ}
00059 {\cf17 namespace }spimpl  \{\par
{\bkmkstart AAAAAAACMR}{\bkmkend AAAAAAACMR}
00060     {\cf17 namespace }details \{\par
{\bkmkstart AAAAAAACMS}{\bkmkend AAAAAAACMS}
00061         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACMT}{\bkmkend AAAAAAACMT}
00062         T *default_copy(T *src)\par
{\bkmkstart AAAAAAACMU}{\bkmkend AAAAAAACMU}
00063         \{\par
{\bkmkstart AAAAAAACMV}{\bkmkend AAAAAAACMV}
00064             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAACMW}{\bkmkend AAAAAAACMW}
00065             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAACMX}{\bkmkend AAAAAAACMX}
00066             {\cf19 return} {\cf17 new} T(*src);\par
{\bkmkstart AAAAAAACMY}{\bkmkend AAAAAAACMY}
00067         \}\par
{\bkmkstart AAAAAAACMZ}{\bkmkend AAAAAAACMZ}
00068 \par
{\bkmkstart AAAAAAACNA}{\bkmkend AAAAAAACNA}
00069         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACNB}{\bkmkend AAAAAAACNB}
00070         {\cf18 void} default_delete(T *p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACNC}{\bkmkend AAAAAAACNC}
00071         \{\par
{\bkmkstart AAAAAAACND}{\bkmkend AAAAAAACND}
00072             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAACNE}{\bkmkend AAAAAAACNE}
00073             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAACNF}{\bkmkend AAAAAAACNF}
00074             {\cf17 delete} p;\par
{\bkmkstart AAAAAAACNG}{\bkmkend AAAAAAACNG}
00075         \}\par
{\bkmkstart AAAAAAACNH}{\bkmkend AAAAAAACNH}
00076 \par
{\bkmkstart AAAAAAACNI}{\bkmkend AAAAAAACNI}
00077         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACNJ}{\bkmkend AAAAAAACNJ}
00078         {\cf17 struct }default_deleter \{\par
{\bkmkstart AAAAAAACNK}{\bkmkend AAAAAAACNK}
00079             {\cf17 using} type = void (*)(T*);\par
{\bkmkstart AAAAAAACNL}{\bkmkend AAAAAAACNL}
00080         \};\par
{\bkmkstart AAAAAAACNM}{\bkmkend AAAAAAACNM}
00081 \par
{\bkmkstart AAAAAAACNN}{\bkmkend AAAAAAACNN}
00082         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACNO}{\bkmkend AAAAAAACNO}
00083         {\cf17 using} default_deleter_t = {\cf17 typename} default_deleter<T>::type;\par
{\bkmkstart AAAAAAACNP}{\bkmkend AAAAAAACNP}
00084 \par
{\bkmkstart AAAAAAACNQ}{\bkmkend AAAAAAACNQ}
00085         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACNR}{\bkmkend AAAAAAACNR}
00086         {\cf17 struct }default_copier \{\par
{\bkmkstart AAAAAAACNS}{\bkmkend AAAAAAACNS}
00087             {\cf17 using} type = T* (*)(T*);\par
{\bkmkstart AAAAAAACNT}{\bkmkend AAAAAAACNT}
00088         \};\par
{\bkmkstart AAAAAAACNU}{\bkmkend AAAAAAACNU}
00089 \par
{\bkmkstart AAAAAAACNV}{\bkmkend AAAAAAACNV}
00090         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAACNW}{\bkmkend AAAAAAACNW}
00091         {\cf17 using} default_copier_t = {\cf17 typename} default_copier<T>::type;\par
{\bkmkstart AAAAAAACNX}{\bkmkend AAAAAAACNX}
00092 \par
{\bkmkstart AAAAAAACNY}{\bkmkend AAAAAAACNY}
00093         {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAACNZ}{\bkmkend AAAAAAACNZ}
00094         {\cf17 struct }is_default_manageable: {\cf17 public} std::integral_constant<bool,\par
{\bkmkstart AAAAAAACOA}{\bkmkend AAAAAAACOA}
00095             std::is_same<D, default_deleter_t<T>>::value &&\par
{\bkmkstart AAAAAAACOB}{\bkmkend AAAAAAACOB}
00096             std::is_same<C, default_copier_t<T>>::value\par
{\bkmkstart AAAAAAACOC}{\bkmkend AAAAAAACOC}
00097         > \{\};\par
{\bkmkstart AAAAAAACOD}{\bkmkend AAAAAAACOD}
00098     \}\par
{\bkmkstart AAAAAAACOE}{\bkmkend AAAAAAACOE}
00099 \par
{\bkmkstart AAAAAAACOF}{\bkmkend AAAAAAACOF}
00100 \par
{\bkmkstart AAAAAAACOG}{\bkmkend AAAAAAACOG}
00101     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>>\par
{\bkmkstart AAAAAAACOH}{\bkmkend AAAAAAACOH}
00102     {\cf17 class }unique_impl_ptr\par
{\bkmkstart AAAAAAACOI}{\bkmkend AAAAAAACOI}
00103     \{\par
{\bkmkstart AAAAAAACOJ}{\bkmkend AAAAAAACOJ}
00104         {\cf17 protected}:\par
{\bkmkstart AAAAAAACOK}{\bkmkend AAAAAAACOK}
00105         {\cf17 static_assert}(!std::is_array<T>::value, {\cf22 "unique_impl_ptr specialization for arrays is not implemented"});\par
{\bkmkstart AAAAAAACOL}{\bkmkend AAAAAAACOL}
00106         {\cf17 struct }dummy_t_ \{{\cf18 int} dummy__;\};\par
{\bkmkstart AAAAAAACOM}{\bkmkend AAAAAAACOM}
00107 \par
{\bkmkstart AAAAAAACON}{\bkmkend AAAAAAACON}
00108     {\cf17 public}:\par
{\bkmkstart AAAAAAACOO}{\bkmkend AAAAAAACOO}
00109         {\cf17 using} pointer = T*;\par
{\bkmkstart AAAAAAACOP}{\bkmkend AAAAAAACOP}
00110         {\cf17 using} const_pointer = {\cf17 typename} std::add_const<T>::type *;\par
{\bkmkstart AAAAAAACOQ}{\bkmkend AAAAAAACOQ}
00111         {\cf17 using} reference = T&;\par
{\bkmkstart AAAAAAACOR}{\bkmkend AAAAAAACOR}
00112         {\cf17 using} const_reference = {\cf17 typename} std::add_const<T>::type &;\par
{\bkmkstart AAAAAAACOS}{\bkmkend AAAAAAACOS}
00113         {\cf17 using} element_type = T;\par
{\bkmkstart AAAAAAACOT}{\bkmkend AAAAAAACOT}
00114         {\cf17 using} deleter_type = {\cf17 typename} std::decay<Deleter>::type;\par
{\bkmkstart AAAAAAACOU}{\bkmkend AAAAAAACOU}
00115         {\cf17 using} unique_ptr_type = std::unique_ptr<T, deleter_type>;\par
{\bkmkstart AAAAAAACOV}{\bkmkend AAAAAAACOV}
00116         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type>;\par
{\bkmkstart AAAAAAACOW}{\bkmkend AAAAAAACOW}
00117 \par
{\bkmkstart AAAAAAACOX}{\bkmkend AAAAAAACOX}
00118         SPIMPL_CONSTEXPR unique_impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACOY}{\bkmkend AAAAAAACOY}
00119         : ptr_({\cf18 nullptr}, deleter_type\{\}) \{\}\par
{\bkmkstart AAAAAAACOZ}{\bkmkend AAAAAAACOZ}
00120 \par
{\bkmkstart AAAAAAACPA}{\bkmkend AAAAAAACPA}
00121         SPIMPL_CONSTEXPR unique_impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACPB}{\bkmkend AAAAAAACPB}
00122         : unique_impl_ptr() \{\}\par
{\bkmkstart AAAAAAACPC}{\bkmkend AAAAAAACPC}
00123 \par
{\bkmkstart AAAAAAACPD}{\bkmkend AAAAAAACPD}
00124         {\cf17 template}<{\cf17 class} D>\par
{\bkmkstart AAAAAAACPE}{\bkmkend AAAAAAACPE}
00125         unique_impl_ptr(pointer p, D&& d,\par
{\bkmkstart AAAAAAACPF}{\bkmkend AAAAAAACPF}
00126                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACPG}{\bkmkend AAAAAAACPG}
00127                     std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAACPH}{\bkmkend AAAAAAACPH}
00128                     dummy_t_\par
{\bkmkstart AAAAAAACPI}{\bkmkend AAAAAAACPI}
00129                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACPJ}{\bkmkend AAAAAAACPJ}
00130         : ptr_(std::move(p), std::forward<D>(d)) \{\}\par
{\bkmkstart AAAAAAACPK}{\bkmkend AAAAAAACPK}
00131 \par
{\bkmkstart AAAAAAACPL}{\bkmkend AAAAAAACPL}
00132         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACPM}{\bkmkend AAAAAAACPM}
00133         unique_impl_ptr(U *u,\par
{\bkmkstart AAAAAAACPN}{\bkmkend AAAAAAACPN}
00134                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACPO}{\bkmkend AAAAAAACPO}
00135                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACPP}{\bkmkend AAAAAAACPP}
00136                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACPQ}{\bkmkend AAAAAAACPQ}
00137                     dummy_t_\par
{\bkmkstart AAAAAAACPR}{\bkmkend AAAAAAACPR}
00138                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACPS}{\bkmkend AAAAAAACPS}
00139         : unique_impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAACPT}{\bkmkend AAAAAAACPT}
00140 \par
{\bkmkstart AAAAAAACPU}{\bkmkend AAAAAAACPU}
00141 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAACPV}{\bkmkend AAAAAAACPV}
00142         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAACPW}{\bkmkend AAAAAAACPW}
00143 {\cf21 #else}\par
{\bkmkstart AAAAAAACPX}{\bkmkend AAAAAAACPX}
00144         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACPY}{\bkmkend AAAAAAACPY}
00145         : ptr_(std::move(r.ptr_)) \{\}\par
{\bkmkstart AAAAAAACPZ}{\bkmkend AAAAAAACPZ}
00146 {\cf21 #endif}\par
{\bkmkstart AAAAAAACQA}{\bkmkend AAAAAAACQA}
00147 \par
{\bkmkstart AAAAAAACQB}{\bkmkend AAAAAAACQB}
00148 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAACQC}{\bkmkend AAAAAAACQC}
00149         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACQD}{\bkmkend AAAAAAACQD}
00150         unique_impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAACQE}{\bkmkend AAAAAAACQE}
00151                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACQF}{\bkmkend AAAAAAACQF}
00152                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACQG}{\bkmkend AAAAAAACQG}
00153                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACQH}{\bkmkend AAAAAAACQH}
00154                     dummy_t_\par
{\bkmkstart AAAAAAACQI}{\bkmkend AAAAAAACQI}
00155                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACQJ}{\bkmkend AAAAAAACQJ}
00156         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAACQK}{\bkmkend AAAAAAACQK}
00157 {\cf21 #endif}\par
{\bkmkstart AAAAAAACQL}{\bkmkend AAAAAAACQL}
00158 \par
{\bkmkstart AAAAAAACQM}{\bkmkend AAAAAAACQM}
00159         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACQN}{\bkmkend AAAAAAACQN}
00160         unique_impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAACQO}{\bkmkend AAAAAAACQO}
00161                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACQP}{\bkmkend AAAAAAACQP}
00162                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACQQ}{\bkmkend AAAAAAACQQ}
00163                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAACQR}{\bkmkend AAAAAAACQR}
00164                     dummy_t_\par
{\bkmkstart AAAAAAACQS}{\bkmkend AAAAAAACQS}
00165                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACQT}{\bkmkend AAAAAAACQT}
00166         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAACQU}{\bkmkend AAAAAAACQU}
00167 \par
{\bkmkstart AAAAAAACQV}{\bkmkend AAAAAAACQV}
00168         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAACQW}{\bkmkend AAAAAAACQW}
00169         unique_impl_ptr(std::unique_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAACQX}{\bkmkend AAAAAAACQX}
00170                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACQY}{\bkmkend AAAAAAACQY}
00171                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACQZ}{\bkmkend AAAAAAACQZ}
00172                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAACRA}{\bkmkend AAAAAAACRA}
00173                     dummy_t_\par
{\bkmkstart AAAAAAACRB}{\bkmkend AAAAAAACRB}
00174                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACRC}{\bkmkend AAAAAAACRC}
00175         : ptr_(std::move(u)) \{\}\par
{\bkmkstart AAAAAAACRD}{\bkmkend AAAAAAACRD}
00176 \par
{\bkmkstart AAAAAAACRE}{\bkmkend AAAAAAACRE}
00177         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAACRF}{\bkmkend AAAAAAACRF}
00178         unique_impl_ptr(unique_impl_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAACRG}{\bkmkend AAAAAAACRG}
00179                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACRH}{\bkmkend AAAAAAACRH}
00180                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACRI}{\bkmkend AAAAAAACRI}
00181                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAACRJ}{\bkmkend AAAAAAACRJ}
00182                     dummy_t_\par
{\bkmkstart AAAAAAACRK}{\bkmkend AAAAAAACRK}
00183                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACRL}{\bkmkend AAAAAAACRL}
00184         : ptr_(std::move(u.ptr_)) \{\}\par
{\bkmkstart AAAAAAACRM}{\bkmkend AAAAAAACRM}
00185 \par
{\bkmkstart AAAAAAACRN}{\bkmkend AAAAAAACRN}
00186         unique_impl_ptr({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAACRO}{\bkmkend AAAAAAACRO}
00187 \par
{\bkmkstart AAAAAAACRP}{\bkmkend AAAAAAACRP}
00188 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAACRQ}{\bkmkend AAAAAAACRQ}
00189         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAACRR}{\bkmkend AAAAAAACRR}
00190 {\cf21 #else}\par
{\bkmkstart AAAAAAACRS}{\bkmkend AAAAAAACRS}
00191         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAACRT}{\bkmkend AAAAAAACRT}
00192             ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAACRU}{\bkmkend AAAAAAACRU}
00193             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAACRV}{\bkmkend AAAAAAACRV}
00194         \}\par
{\bkmkstart AAAAAAACRW}{\bkmkend AAAAAAACRW}
00195 {\cf21 #endif}\par
{\bkmkstart AAAAAAACRX}{\bkmkend AAAAAAACRX}
00196 \par
{\bkmkstart AAAAAAACRY}{\bkmkend AAAAAAACRY}
00197 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAACRZ}{\bkmkend AAAAAAACRZ}
00198         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACSA}{\bkmkend AAAAAAACSA}
00199         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACSB}{\bkmkend AAAAAAACSB}
00200             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACSC}{\bkmkend AAAAAAACSC}
00201                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAACSD}{\bkmkend AAAAAAACSD}
00202             unique_impl_ptr&\par
{\bkmkstart AAAAAAACSE}{\bkmkend AAAAAAACSE}
00203         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACSF}{\bkmkend AAAAAAACSF}
00204         \{\par
{\bkmkstart AAAAAAACSG}{\bkmkend AAAAAAACSG}
00205             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAACSH}{\bkmkend AAAAAAACSH}
00206         \}\par
{\bkmkstart AAAAAAACSI}{\bkmkend AAAAAAACSI}
00207 {\cf21 #endif}\par
{\bkmkstart AAAAAAACSJ}{\bkmkend AAAAAAACSJ}
00208 \par
{\bkmkstart AAAAAAACSK}{\bkmkend AAAAAAACSK}
00209         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAACSL}{\bkmkend AAAAAAACSL}
00210         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACSM}{\bkmkend AAAAAAACSM}
00211             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAACSN}{\bkmkend AAAAAAACSN}
00212                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAACSO}{\bkmkend AAAAAAACSO}
00213             unique_impl_ptr&\par
{\bkmkstart AAAAAAACSP}{\bkmkend AAAAAAACSP}
00214         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACSQ}{\bkmkend AAAAAAACSQ}
00215         \{\par
{\bkmkstart AAAAAAACSR}{\bkmkend AAAAAAACSR}
00216             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAACSS}{\bkmkend AAAAAAACSS}
00217         \}\par
{\bkmkstart AAAAAAACST}{\bkmkend AAAAAAACST}
00218 \par
{\bkmkstart AAAAAAACSU}{\bkmkend AAAAAAACSU}
00219         reference operator=({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAACSV}{\bkmkend AAAAAAACSV}
00220 \par
{\bkmkstart AAAAAAACSW}{\bkmkend AAAAAAACSW}
00221         reference operator*() \{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAACSX}{\bkmkend AAAAAAACSX}
00222         const_reference operator*(){\cf17  const }\{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAACSY}{\bkmkend AAAAAAACSY}
00223 \par
{\bkmkstart AAAAAAACSZ}{\bkmkend AAAAAAACSZ}
00224         pointer operator->() SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAACTA}{\bkmkend AAAAAAACTA}
00225         const_pointer operator->() const SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAACTB}{\bkmkend AAAAAAACTB}
00226 \par
{\bkmkstart AAAAAAACTC}{\bkmkend AAAAAAACTC}
00227         pointer get() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAACTD}{\bkmkend AAAAAAACTD}
00228         const_pointer get() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAACTE}{\bkmkend AAAAAAACTE}
00229 \par
{\bkmkstart AAAAAAACTF}{\bkmkend AAAAAAACTF}
00230         {\cf18 void} swap(unique_impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACTG}{\bkmkend AAAAAAACTG}
00231         \{\par
{\bkmkstart AAAAAAACTH}{\bkmkend AAAAAAACTH}
00232             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAACTI}{\bkmkend AAAAAAACTI}
00233             ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAACTJ}{\bkmkend AAAAAAACTJ}
00234         \}\par
{\bkmkstart AAAAAAACTK}{\bkmkend AAAAAAACTK}
00235 \par
{\bkmkstart AAAAAAACTL}{\bkmkend AAAAAAACTL}
00236         pointer release() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.release(); \}\par
{\bkmkstart AAAAAAACTM}{\bkmkend AAAAAAACTM}
00237 \par
{\bkmkstart AAAAAAACTN}{\bkmkend AAAAAAACTN}
00238         unique_ptr_type release_unique() SPIMPL_NOEXCEPT \{ {\cf19 return} std::move(ptr_); \}\par
{\bkmkstart AAAAAAACTO}{\bkmkend AAAAAAACTO}
00239 \par
{\bkmkstart AAAAAAACTP}{\bkmkend AAAAAAACTP}
00240         {\cf17 explicit} {\cf17 operator} bool() const SPIMPL_NOEXCEPT \{ {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(ptr_); \}\par
{\bkmkstart AAAAAAACTQ}{\bkmkend AAAAAAACTQ}
00241 \par
{\bkmkstart AAAAAAACTR}{\bkmkend AAAAAAACTR}
00242         {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAACTS}{\bkmkend AAAAAAACTS}
00243         {\cf17 const} {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAACTT}{\bkmkend AAAAAAACTT}
00244 \par
{\bkmkstart AAAAAAACTU}{\bkmkend AAAAAAACTU}
00245     {\cf17 protected}:\par
{\bkmkstart AAAAAAACTV}{\bkmkend AAAAAAACTV}
00246         unique_ptr_type ptr_;\par
{\bkmkstart AAAAAAACTW}{\bkmkend AAAAAAACTW}
00247     \};\par
{\bkmkstart AAAAAAACTX}{\bkmkend AAAAAAACTX}
00248 \par
{\bkmkstart AAAAAAACTY}{\bkmkend AAAAAAACTY}
00249 \par
{\bkmkstart AAAAAAACTZ}{\bkmkend AAAAAAACTZ}
00250     {\cf17 template}<{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACUA}{\bkmkend AAAAAAACUA}
00251     {\cf17 inline} {\cf18 void} swap(unique_impl_ptr<T, D>& l, unique_impl_ptr<T, D>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACUB}{\bkmkend AAAAAAACUB}
00252     \{\par
{\bkmkstart AAAAAAACUC}{\bkmkend AAAAAAACUC}
00253         l.swap(r);\par
{\bkmkstart AAAAAAACUD}{\bkmkend AAAAAAACUD}
00254     \}\par
{\bkmkstart AAAAAAACUE}{\bkmkend AAAAAAACUE}
00255 \par
{\bkmkstart AAAAAAACUF}{\bkmkend AAAAAAACUF}
00256 \par
{\bkmkstart AAAAAAACUG}{\bkmkend AAAAAAACUG}
00257     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACUH}{\bkmkend AAAAAAACUH}
00258     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACUI}{\bkmkend AAAAAAACUI}
00259     \{\par
{\bkmkstart AAAAAAACUJ}{\bkmkend AAAAAAACUJ}
00260         {\cf19 return} l.get() == r.get();\par
{\bkmkstart AAAAAAACUK}{\bkmkend AAAAAAACUK}
00261     \}\par
{\bkmkstart AAAAAAACUL}{\bkmkend AAAAAAACUL}
00262 \par
{\bkmkstart AAAAAAACUM}{\bkmkend AAAAAAACUM}
00263     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} C1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACUN}{\bkmkend AAAAAAACUN}
00264     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACUO}{\bkmkend AAAAAAACUO}
00265     \{\par
{\bkmkstart AAAAAAACUP}{\bkmkend AAAAAAACUP}
00266         {\cf19 return} !(l == r);\par
{\bkmkstart AAAAAAACUQ}{\bkmkend AAAAAAACUQ}
00267     \}\par
{\bkmkstart AAAAAAACUR}{\bkmkend AAAAAAACUR}
00268 \par
{\bkmkstart AAAAAAACUS}{\bkmkend AAAAAAACUS}
00269     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACUT}{\bkmkend AAAAAAACUT}
00270     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACUU}{\bkmkend AAAAAAACUU}
00271     \{\par
{\bkmkstart AAAAAAACUV}{\bkmkend AAAAAAACUV}
00272         {\cf17 using} P1 = {\cf17 typename} unique_impl_ptr<T1, D1>::pointer;\par
{\bkmkstart AAAAAAACUW}{\bkmkend AAAAAAACUW}
00273         {\cf17 using} P2 = {\cf17 typename} unique_impl_ptr<T2, D2>::pointer;\par
{\bkmkstart AAAAAAACUX}{\bkmkend AAAAAAACUX}
00274         {\cf17 using} CT = {\cf17 typename} std::common_type<P1, P2>::type;\par
{\bkmkstart AAAAAAACUY}{\bkmkend AAAAAAACUY}
00275         {\cf19 return} std::less<CT>()(l.get(), r.get());\par
{\bkmkstart AAAAAAACUZ}{\bkmkend AAAAAAACUZ}
00276     \}\par
{\bkmkstart AAAAAAACVA}{\bkmkend AAAAAAACVA}
00277 \par
{\bkmkstart AAAAAAACVB}{\bkmkend AAAAAAACVB}
00278     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACVC}{\bkmkend AAAAAAACVC}
00279     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACVD}{\bkmkend AAAAAAACVD}
00280     \{\par
{\bkmkstart AAAAAAACVE}{\bkmkend AAAAAAACVE}
00281         {\cf19 return} r < l;\par
{\bkmkstart AAAAAAACVF}{\bkmkend AAAAAAACVF}
00282     \}\par
{\bkmkstart AAAAAAACVG}{\bkmkend AAAAAAACVG}
00283 \par
{\bkmkstart AAAAAAACVH}{\bkmkend AAAAAAACVH}
00284     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACVI}{\bkmkend AAAAAAACVI}
00285     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACVJ}{\bkmkend AAAAAAACVJ}
00286     \{\par
{\bkmkstart AAAAAAACVK}{\bkmkend AAAAAAACVK}
00287         {\cf19 return} !(r < l);\par
{\bkmkstart AAAAAAACVL}{\bkmkend AAAAAAACVL}
00288     \}\par
{\bkmkstart AAAAAAACVM}{\bkmkend AAAAAAACVM}
00289 \par
{\bkmkstart AAAAAAACVN}{\bkmkend AAAAAAACVN}
00290     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAACVO}{\bkmkend AAAAAAACVO}
00291     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAACVP}{\bkmkend AAAAAAACVP}
00292     \{\par
{\bkmkstart AAAAAAACVQ}{\bkmkend AAAAAAACVQ}
00293         {\cf19 return} !(l < r);\par
{\bkmkstart AAAAAAACVR}{\bkmkend AAAAAAACVR}
00294     \}\par
{\bkmkstart AAAAAAACVS}{\bkmkend AAAAAAACVS}
00295 \par
{\bkmkstart AAAAAAACVT}{\bkmkend AAAAAAACVT}
00296     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACVU}{\bkmkend AAAAAAACVU}
00297     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACVV}{\bkmkend AAAAAAACVV}
00298     \{\par
{\bkmkstart AAAAAAACVW}{\bkmkend AAAAAAACVW}
00299         {\cf19 return} !p;\par
{\bkmkstart AAAAAAACVX}{\bkmkend AAAAAAACVX}
00300     \}\par
{\bkmkstart AAAAAAACVY}{\bkmkend AAAAAAACVY}
00301 \par
{\bkmkstart AAAAAAACVZ}{\bkmkend AAAAAAACVZ}
00302     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACWA}{\bkmkend AAAAAAACWA}
00303     {\cf17 inline} {\cf18 bool} operator==(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACWB}{\bkmkend AAAAAAACWB}
00304     \{\par
{\bkmkstart AAAAAAACWC}{\bkmkend AAAAAAACWC}
00305         {\cf19 return} !p;\par
{\bkmkstart AAAAAAACWD}{\bkmkend AAAAAAACWD}
00306     \}\par
{\bkmkstart AAAAAAACWE}{\bkmkend AAAAAAACWE}
00307 \par
{\bkmkstart AAAAAAACWF}{\bkmkend AAAAAAACWF}
00308     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACWG}{\bkmkend AAAAAAACWG}
00309     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACWH}{\bkmkend AAAAAAACWH}
00310     \{\par
{\bkmkstart AAAAAAACWI}{\bkmkend AAAAAAACWI}
00311         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAACWJ}{\bkmkend AAAAAAACWJ}
00312     \}\par
{\bkmkstart AAAAAAACWK}{\bkmkend AAAAAAACWK}
00313 \par
{\bkmkstart AAAAAAACWL}{\bkmkend AAAAAAACWL}
00314     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACWM}{\bkmkend AAAAAAACWM}
00315     {\cf17 inline} {\cf18 bool} operator!=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACWN}{\bkmkend AAAAAAACWN}
00316     \{\par
{\bkmkstart AAAAAAACWO}{\bkmkend AAAAAAACWO}
00317         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAACWP}{\bkmkend AAAAAAACWP}
00318     \}\par
{\bkmkstart AAAAAAACWQ}{\bkmkend AAAAAAACWQ}
00319 \par
{\bkmkstart AAAAAAACWR}{\bkmkend AAAAAAACWR}
00320     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACWS}{\bkmkend AAAAAAACWS}
00321     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T, D>& l, std::nullptr_t)\par
{\bkmkstart AAAAAAACWT}{\bkmkend AAAAAAACWT}
00322     \{\par
{\bkmkstart AAAAAAACWU}{\bkmkend AAAAAAACWU}
00323         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAACWV}{\bkmkend AAAAAAACWV}
00324         {\cf19 return} std::less<P>()(l.get(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAACWW}{\bkmkend AAAAAAACWW}
00325     \}\par
{\bkmkstart AAAAAAACWX}{\bkmkend AAAAAAACWX}
00326 \par
{\bkmkstart AAAAAAACWY}{\bkmkend AAAAAAACWY}
00327     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACWZ}{\bkmkend AAAAAAACWZ}
00328     {\cf17 inline} {\cf18 bool} operator< (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACXA}{\bkmkend AAAAAAACXA}
00329     \{\par
{\bkmkstart AAAAAAACXB}{\bkmkend AAAAAAACXB}
00330         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAACXC}{\bkmkend AAAAAAACXC}
00331         {\cf19 return} std::less<P>()({\cf17 nullptr}, p.get());\par
{\bkmkstart AAAAAAACXD}{\bkmkend AAAAAAACXD}
00332     \}\par
{\bkmkstart AAAAAAACXE}{\bkmkend AAAAAAACXE}
00333 \par
{\bkmkstart AAAAAAACXF}{\bkmkend AAAAAAACXF}
00334     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACXG}{\bkmkend AAAAAAACXG}
00335     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACXH}{\bkmkend AAAAAAACXH}
00336     \{\par
{\bkmkstart AAAAAAACXI}{\bkmkend AAAAAAACXI}
00337         {\cf19 return} {\cf17 nullptr} < p;\par
{\bkmkstart AAAAAAACXJ}{\bkmkend AAAAAAACXJ}
00338     \}\par
{\bkmkstart AAAAAAACXK}{\bkmkend AAAAAAACXK}
00339 \par
{\bkmkstart AAAAAAACXL}{\bkmkend AAAAAAACXL}
00340     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACXM}{\bkmkend AAAAAAACXM}
00341     {\cf17 inline} {\cf18 bool} operator> (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACXN}{\bkmkend AAAAAAACXN}
00342     \{\par
{\bkmkstart AAAAAAACXO}{\bkmkend AAAAAAACXO}
00343         {\cf19 return} p < {\cf17 nullptr};\par
{\bkmkstart AAAAAAACXP}{\bkmkend AAAAAAACXP}
00344     \}\par
{\bkmkstart AAAAAAACXQ}{\bkmkend AAAAAAACXQ}
00345 \par
{\bkmkstart AAAAAAACXR}{\bkmkend AAAAAAACXR}
00346     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACXS}{\bkmkend AAAAAAACXS}
00347     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACXT}{\bkmkend AAAAAAACXT}
00348     \{\par
{\bkmkstart AAAAAAACXU}{\bkmkend AAAAAAACXU}
00349         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAACXV}{\bkmkend AAAAAAACXV}
00350     \}\par
{\bkmkstart AAAAAAACXW}{\bkmkend AAAAAAACXW}
00351 \par
{\bkmkstart AAAAAAACXX}{\bkmkend AAAAAAACXX}
00352     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACXY}{\bkmkend AAAAAAACXY}
00353     {\cf17 inline} {\cf18 bool} operator<=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACXZ}{\bkmkend AAAAAAACXZ}
00354     \{\par
{\bkmkstart AAAAAAACYA}{\bkmkend AAAAAAACYA}
00355         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAACYB}{\bkmkend AAAAAAACYB}
00356     \}\par
{\bkmkstart AAAAAAACYC}{\bkmkend AAAAAAACYC}
00357 \par
{\bkmkstart AAAAAAACYD}{\bkmkend AAAAAAACYD}
00358     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACYE}{\bkmkend AAAAAAACYE}
00359     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAACYF}{\bkmkend AAAAAAACYF}
00360     \{\par
{\bkmkstart AAAAAAACYG}{\bkmkend AAAAAAACYG}
00361         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAACYH}{\bkmkend AAAAAAACYH}
00362     \}\par
{\bkmkstart AAAAAAACYI}{\bkmkend AAAAAAACYI}
00363 \par
{\bkmkstart AAAAAAACYJ}{\bkmkend AAAAAAACYJ}
00364     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAACYK}{\bkmkend AAAAAAACYK}
00365     {\cf17 inline} {\cf18 bool} operator>=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAACYL}{\bkmkend AAAAAAACYL}
00366     \{\par
{\bkmkstart AAAAAAACYM}{\bkmkend AAAAAAACYM}
00367         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAACYN}{\bkmkend AAAAAAACYN}
00368     \}\par
{\bkmkstart AAAAAAACYO}{\bkmkend AAAAAAACYO}
00369 \par
{\bkmkstart AAAAAAACYP}{\bkmkend AAAAAAACYP}
00370 \par
{\bkmkstart AAAAAAACYQ}{\bkmkend AAAAAAACYQ}
00371     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAACYR}{\bkmkend AAAAAAACYR}
00372     {\cf17 inline} unique_impl_ptr<T> make_unique_impl(Args&&... args)\par
{\bkmkstart AAAAAAACYS}{\bkmkend AAAAAAACYS}
00373     \{\par
{\bkmkstart AAAAAAACYT}{\bkmkend AAAAAAACYT}
00374         {\cf19 return} unique_impl_ptr<T>({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>);\par
{\bkmkstart AAAAAAACYU}{\bkmkend AAAAAAACYU}
00375     \}\par
{\bkmkstart AAAAAAACYV}{\bkmkend AAAAAAACYV}
00376 \par
{\bkmkstart AAAAAAACYW}{\bkmkend AAAAAAACYW}
00377 \par
{\bkmkstart AAAAAAACYX}{\bkmkend AAAAAAACYX}
00378     {\cf20 // Helpers to manage unique impl, stored in std::unique_ptr}\par
{\bkmkstart AAAAAAACYY}{\bkmkend AAAAAAACYY}
00379     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>, {\cf17 class} Copier = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAACYZ}{\bkmkend AAAAAAACYZ}
00380     {\cf17 class }impl_ptr : {\cf17 public} unique_impl_ptr<T, Deleter>\par
{\bkmkstart AAAAAAACZA}{\bkmkend AAAAAAACZA}
00381     \{\par
{\bkmkstart AAAAAAACZB}{\bkmkend AAAAAAACZB}
00382         {\cf17 using} base_type = unique_impl_ptr<T, Deleter>;\par
{\bkmkstart AAAAAAACZC}{\bkmkend AAAAAAACZC}
00383         {\cf17 using} dummy_t_ = {\cf17 typename} base_type::dummy_t_;\par
{\bkmkstart AAAAAAACZD}{\bkmkend AAAAAAACZD}
00384     {\cf17 public}:\par
{\bkmkstart AAAAAAACZE}{\bkmkend AAAAAAACZE}
00385         {\cf17 using} pointer = {\cf17 typename} base_type::pointer;\par
{\bkmkstart AAAAAAACZF}{\bkmkend AAAAAAACZF}
00386         {\cf17 using} const_pointer = {\cf17 typename} base_type::const_pointer;\par
{\bkmkstart AAAAAAACZG}{\bkmkend AAAAAAACZG}
00387         {\cf17 using} reference = {\cf17 typename} base_type::reference;\par
{\bkmkstart AAAAAAACZH}{\bkmkend AAAAAAACZH}
00388         {\cf17 using} const_reference = {\cf17 typename} base_type::const_reference;\par
{\bkmkstart AAAAAAACZI}{\bkmkend AAAAAAACZI}
00389         {\cf17 using} element_type = {\cf17 typename} base_type::element_type;\par
{\bkmkstart AAAAAAACZJ}{\bkmkend AAAAAAACZJ}
00390         {\cf17 using} deleter_type = {\cf17 typename} base_type::deleter_type;\par
{\bkmkstart AAAAAAACZK}{\bkmkend AAAAAAACZK}
00391         {\cf17 using} unique_ptr_type = {\cf17 typename} base_type::unique_ptr_type;\par
{\bkmkstart AAAAAAACZL}{\bkmkend AAAAAAACZL}
00392         {\cf17 using} copier_type = {\cf17 typename} std::decay<Copier>::type;\par
{\bkmkstart AAAAAAACZM}{\bkmkend AAAAAAACZM}
00393         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type, copier_type>;\par
{\bkmkstart AAAAAAACZN}{\bkmkend AAAAAAACZN}
00394 \par
{\bkmkstart AAAAAAACZO}{\bkmkend AAAAAAACZO}
00395         SPIMPL_CONSTEXPR impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACZP}{\bkmkend AAAAAAACZP}
00396         : base_type({\cf18 nullptr}, deleter_type\{\}), copier_(copier_type\{\}) \{\}\par
{\bkmkstart AAAAAAACZQ}{\bkmkend AAAAAAACZQ}
00397 \par
{\bkmkstart AAAAAAACZR}{\bkmkend AAAAAAACZR}
00398         SPIMPL_CONSTEXPR impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAACZS}{\bkmkend AAAAAAACZS}
00399         : impl_ptr() \{\}\par
{\bkmkstart AAAAAAACZT}{\bkmkend AAAAAAACZT}
00400 \par
{\bkmkstart AAAAAAACZU}{\bkmkend AAAAAAACZU}
00401         {\cf17 template}<{\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAACZV}{\bkmkend AAAAAAACZV}
00402         impl_ptr(pointer p, D&& d, C&& c,\par
{\bkmkstart AAAAAAACZW}{\bkmkend AAAAAAACZW}
00403                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAACZX}{\bkmkend AAAAAAACZX}
00404                     std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAACZY}{\bkmkend AAAAAAACZY}
00405                         && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAACZZ}{\bkmkend AAAAAAACZZ}
00406                     {\cf17 typename} base_type::dummy_t_\par
{\bkmkstart AAAAAAADAA}{\bkmkend AAAAAAADAA}
00407                  >::type = {\cf17 typename} base_type::dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADAB}{\bkmkend AAAAAAADAB}
00408         : base_type(std::move(p), std::forward<D>(d)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAADAC}{\bkmkend AAAAAAADAC}
00409 \par
{\bkmkstart AAAAAAADAD}{\bkmkend AAAAAAADAD}
00410         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADAE}{\bkmkend AAAAAAADAE}
00411         impl_ptr(U *u,\par
{\bkmkstart AAAAAAADAF}{\bkmkend AAAAAAADAF}
00412                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADAG}{\bkmkend AAAAAAADAG}
00413                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADAH}{\bkmkend AAAAAAADAH}
00414                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADAI}{\bkmkend AAAAAAADAI}
00415                     dummy_t_\par
{\bkmkstart AAAAAAADAJ}{\bkmkend AAAAAAADAJ}
00416                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADAK}{\bkmkend AAAAAAADAK}
00417         : impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAADAL}{\bkmkend AAAAAAADAL}
00418 \par
{\bkmkstart AAAAAAADAM}{\bkmkend AAAAAAADAM}
00419         impl_ptr({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAADAN}{\bkmkend AAAAAAADAN}
00420         : impl_ptr(r.clone()) \{\}\par
{\bkmkstart AAAAAAADAO}{\bkmkend AAAAAAADAO}
00421 \par
{\bkmkstart AAAAAAADAP}{\bkmkend AAAAAAADAP}
00422 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADAQ}{\bkmkend AAAAAAADAQ}
00423         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADAR}{\bkmkend AAAAAAADAR}
00424 {\cf21 #else}\par
{\bkmkstart AAAAAAADAS}{\bkmkend AAAAAAADAS}
00425         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADAT}{\bkmkend AAAAAAADAT}
00426         : base_type(std::move(r.ptr_)), copier_(std::move(r.copier_)) \{\}\par
{\bkmkstart AAAAAAADAU}{\bkmkend AAAAAAADAU}
00427 {\cf21 #endif}\par
{\bkmkstart AAAAAAADAV}{\bkmkend AAAAAAADAV}
00428 \par
{\bkmkstart AAAAAAADAW}{\bkmkend AAAAAAADAW}
00429 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAADAX}{\bkmkend AAAAAAADAX}
00430         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADAY}{\bkmkend AAAAAAADAY}
00431         impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAADAZ}{\bkmkend AAAAAAADAZ}
00432                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADBA}{\bkmkend AAAAAAADBA}
00433                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADBB}{\bkmkend AAAAAAADBB}
00434                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADBC}{\bkmkend AAAAAAADBC}
00435                     dummy_t_\par
{\bkmkstart AAAAAAADBD}{\bkmkend AAAAAAADBD}
00436                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADBE}{\bkmkend AAAAAAADBE}
00437         : base_type(u.release(), &details::default_delete<T>), copier_(&details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAADBF}{\bkmkend AAAAAAADBF}
00438 {\cf21 #endif}\par
{\bkmkstart AAAAAAADBG}{\bkmkend AAAAAAADBG}
00439 \par
{\bkmkstart AAAAAAADBH}{\bkmkend AAAAAAADBH}
00440         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADBI}{\bkmkend AAAAAAADBI}
00441         impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAADBJ}{\bkmkend AAAAAAADBJ}
00442                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADBK}{\bkmkend AAAAAAADBK}
00443                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADBL}{\bkmkend AAAAAAADBL}
00444                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADBM}{\bkmkend AAAAAAADBM}
00445                     dummy_t_\par
{\bkmkstart AAAAAAADBN}{\bkmkend AAAAAAADBN}
00446                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADBO}{\bkmkend AAAAAAADBO}
00447         : base_type(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAADBP}{\bkmkend AAAAAAADBP}
00448 \par
{\bkmkstart AAAAAAADBQ}{\bkmkend AAAAAAADBQ}
00449         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADBR}{\bkmkend AAAAAAADBR}
00450         impl_ptr(std::unique_ptr<U, D>&& u, C&& c,\par
{\bkmkstart AAAAAAADBS}{\bkmkend AAAAAAADBS}
00451                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADBT}{\bkmkend AAAAAAADBT}
00452                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADBU}{\bkmkend AAAAAAADBU}
00453                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADBV}{\bkmkend AAAAAAADBV}
00454                     dummy_t_\par
{\bkmkstart AAAAAAADBW}{\bkmkend AAAAAAADBW}
00455                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADBX}{\bkmkend AAAAAAADBX}
00456         : base_type(std::move(u)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAADBY}{\bkmkend AAAAAAADBY}
00457 \par
{\bkmkstart AAAAAAADBZ}{\bkmkend AAAAAAADBZ}
00458         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADCA}{\bkmkend AAAAAAADCA}
00459         impl_ptr(impl_ptr<U, D, C>&& u,\par
{\bkmkstart AAAAAAADCB}{\bkmkend AAAAAAADCB}
00460                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADCC}{\bkmkend AAAAAAADCC}
00461                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADCD}{\bkmkend AAAAAAADCD}
00462                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADCE}{\bkmkend AAAAAAADCE}
00463                     dummy_t_\par
{\bkmkstart AAAAAAADCF}{\bkmkend AAAAAAADCF}
00464                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADCG}{\bkmkend AAAAAAADCG}
00465         : base_type(std::move(u.ptr_)), copier_(std::move(u.copier_)) \{\}\par
{\bkmkstart AAAAAAADCH}{\bkmkend AAAAAAADCH}
00466 \par
{\bkmkstart AAAAAAADCI}{\bkmkend AAAAAAADCI}
00467         impl_ptr& operator= ({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAADCJ}{\bkmkend AAAAAAADCJ}
00468         \{\par
{\bkmkstart AAAAAAADCK}{\bkmkend AAAAAAADCK}
00469             {\cf19 if} ({\cf17 this} == &r)\par
{\bkmkstart AAAAAAADCL}{\bkmkend AAAAAAADCL}
00470                 {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADCM}{\bkmkend AAAAAAADCM}
00471 \par
{\bkmkstart AAAAAAADCN}{\bkmkend AAAAAAADCN}
00472             {\cf19 return} operator=(r.clone());\par
{\bkmkstart AAAAAAADCO}{\bkmkend AAAAAAADCO}
00473         \}\par
{\bkmkstart AAAAAAADCP}{\bkmkend AAAAAAADCP}
00474 \par
{\bkmkstart AAAAAAADCQ}{\bkmkend AAAAAAADCQ}
00475 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADCR}{\bkmkend AAAAAAADCR}
00476         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADCS}{\bkmkend AAAAAAADCS}
00477 {\cf21 #else}\par
{\bkmkstart AAAAAAADCT}{\bkmkend AAAAAAADCT}
00478         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAADCU}{\bkmkend AAAAAAADCU}
00479             base_type::ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAADCV}{\bkmkend AAAAAAADCV}
00480             copier_ = std::move(r.copier_);\par
{\bkmkstart AAAAAAADCW}{\bkmkend AAAAAAADCW}
00481             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADCX}{\bkmkend AAAAAAADCX}
00482         \}\par
{\bkmkstart AAAAAAADCY}{\bkmkend AAAAAAADCY}
00483 {\cf21 #endif}\par
{\bkmkstart AAAAAAADCZ}{\bkmkend AAAAAAADCZ}
00484 \par
{\bkmkstart AAAAAAADDA}{\bkmkend AAAAAAADDA}
00485         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADDB}{\bkmkend AAAAAAADDB}
00486         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADDC}{\bkmkend AAAAAAADDC}
00487             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADDD}{\bkmkend AAAAAAADDD}
00488                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAADDE}{\bkmkend AAAAAAADDE}
00489                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAADDF}{\bkmkend AAAAAAADDF}
00490             impl_ptr&\par
{\bkmkstart AAAAAAADDG}{\bkmkend AAAAAAADDG}
00491         >::type operator= ({\cf17 const} impl_ptr<U, D, C>& u)\par
{\bkmkstart AAAAAAADDH}{\bkmkend AAAAAAADDH}
00492         \{\par
{\bkmkstart AAAAAAADDI}{\bkmkend AAAAAAADDI}
00493             {\cf19 return} operator=(u.clone());\par
{\bkmkstart AAAAAAADDJ}{\bkmkend AAAAAAADDJ}
00494         \}\par
{\bkmkstart AAAAAAADDK}{\bkmkend AAAAAAADDK}
00495 \par
{\bkmkstart AAAAAAADDL}{\bkmkend AAAAAAADDL}
00496         {\cf20 //}\par
{\bkmkstart AAAAAAADDM}{\bkmkend AAAAAAADDM}
00497 \par
{\bkmkstart AAAAAAADDN}{\bkmkend AAAAAAADDN}
00498 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAADDO}{\bkmkend AAAAAAADDO}
00499         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADDP}{\bkmkend AAAAAAADDP}
00500         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADDQ}{\bkmkend AAAAAAADDQ}
00501             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADDR}{\bkmkend AAAAAAADDR}
00502                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAADDS}{\bkmkend AAAAAAADDS}
00503             impl_ptr&\par
{\bkmkstart AAAAAAADDT}{\bkmkend AAAAAAADDT}
00504         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADDU}{\bkmkend AAAAAAADDU}
00505         \{\par
{\bkmkstart AAAAAAADDV}{\bkmkend AAAAAAADDV}
00506             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAADDW}{\bkmkend AAAAAAADDW}
00507         \}\par
{\bkmkstart AAAAAAADDX}{\bkmkend AAAAAAADDX}
00508 {\cf21 #endif}\par
{\bkmkstart AAAAAAADDY}{\bkmkend AAAAAAADDY}
00509 \par
{\bkmkstart AAAAAAADDZ}{\bkmkend AAAAAAADDZ}
00510         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADEA}{\bkmkend AAAAAAADEA}
00511         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADEB}{\bkmkend AAAAAAADEB}
00512             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADEC}{\bkmkend AAAAAAADEC}
00513                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAADED}{\bkmkend AAAAAAADED}
00514             impl_ptr&\par
{\bkmkstart AAAAAAADEE}{\bkmkend AAAAAAADEE}
00515         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADEF}{\bkmkend AAAAAAADEF}
00516         \{\par
{\bkmkstart AAAAAAADEG}{\bkmkend AAAAAAADEG}
00517             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAADEH}{\bkmkend AAAAAAADEH}
00518         \}\par
{\bkmkstart AAAAAAADEI}{\bkmkend AAAAAAADEI}
00519 \par
{\bkmkstart AAAAAAADEJ}{\bkmkend AAAAAAADEJ}
00520         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADEK}{\bkmkend AAAAAAADEK}
00521         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADEL}{\bkmkend AAAAAAADEL}
00522             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADEM}{\bkmkend AAAAAAADEM}
00523                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAADEN}{\bkmkend AAAAAAADEN}
00524                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAADEO}{\bkmkend AAAAAAADEO}
00525             impl_ptr&\par
{\bkmkstart AAAAAAADEP}{\bkmkend AAAAAAADEP}
00526         >::type operator= (impl_ptr<U, D, C>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADEQ}{\bkmkend AAAAAAADEQ}
00527         \{\par
{\bkmkstart AAAAAAADER}{\bkmkend AAAAAAADER}
00528             base_type::ptr_ = std::move(u.ptr_);\par
{\bkmkstart AAAAAAADES}{\bkmkend AAAAAAADES}
00529             copier_ = std::move(u.copier_);\par
{\bkmkstart AAAAAAADET}{\bkmkend AAAAAAADET}
00530             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADEU}{\bkmkend AAAAAAADEU}
00531         \}\par
{\bkmkstart AAAAAAADEV}{\bkmkend AAAAAAADEV}
00532 \par
{\bkmkstart AAAAAAADEW}{\bkmkend AAAAAAADEW}
00533         {\cf18 void} swap(impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADEX}{\bkmkend AAAAAAADEX}
00534         \{\par
{\bkmkstart AAAAAAADEY}{\bkmkend AAAAAAADEY}
00535             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAADEZ}{\bkmkend AAAAAAADEZ}
00536             base_type::ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAADFA}{\bkmkend AAAAAAADFA}
00537             swap(copier_, u.copier_);\par
{\bkmkstart AAAAAAADFB}{\bkmkend AAAAAAADFB}
00538         \}\par
{\bkmkstart AAAAAAADFC}{\bkmkend AAAAAAADFC}
00539 \par
{\bkmkstart AAAAAAADFD}{\bkmkend AAAAAAADFD}
00540         impl_ptr clone(){\cf17  const}\par
{\bkmkstart AAAAAAADFE}{\bkmkend AAAAAAADFE}
00541 {\cf17         }\{\par
{\bkmkstart AAAAAAADFF}{\bkmkend AAAAAAADFF}
00542             {\cf19 return} impl_ptr(\par
{\bkmkstart AAAAAAADFG}{\bkmkend AAAAAAADFG}
00543                 base_type::ptr_ ? copier_(base_type::ptr_.get()) : {\cf17 nullptr},\par
{\bkmkstart AAAAAAADFH}{\bkmkend AAAAAAADFH}
00544                 base_type::ptr_.get_deleter(),\par
{\bkmkstart AAAAAAADFI}{\bkmkend AAAAAAADFI}
00545                 copier_);\par
{\bkmkstart AAAAAAADFJ}{\bkmkend AAAAAAADFJ}
00546         \}\par
{\bkmkstart AAAAAAADFK}{\bkmkend AAAAAAADFK}
00547 \par
{\bkmkstart AAAAAAADFL}{\bkmkend AAAAAAADFL}
00548         {\cf17 const} {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() const SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAADFM}{\bkmkend AAAAAAADFM}
00549         {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAADFN}{\bkmkend AAAAAAADFN}
00550     {\cf17 private}:\par
{\bkmkstart AAAAAAADFO}{\bkmkend AAAAAAADFO}
00551         copier_type copier_;\par
{\bkmkstart AAAAAAADFP}{\bkmkend AAAAAAADFP}
00552     \};\par
{\bkmkstart AAAAAAADFQ}{\bkmkend AAAAAAADFQ}
00553 \par
{\bkmkstart AAAAAAADFR}{\bkmkend AAAAAAADFR}
00554     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAADFS}{\bkmkend AAAAAAADFS}
00555     {\cf17 inline} impl_ptr<T> make_impl(Args&&... args)\par
{\bkmkstart AAAAAAADFT}{\bkmkend AAAAAAADFT}
00556     \{\par
{\bkmkstart AAAAAAADFU}{\bkmkend AAAAAAADFU}
00557         {\cf19 return} impl_ptr<T>({\cf17 new} T(std::forward<Args>(args)...), &details::default_delete<T>, &details::default_copy<T>);\par
{\bkmkstart AAAAAAADFV}{\bkmkend AAAAAAADFV}
00558     \}\par
{\bkmkstart AAAAAAADFW}{\bkmkend AAAAAAADFW}
00559 \par
{\bkmkstart AAAAAAADFX}{\bkmkend AAAAAAADFX}
00560     {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADFY}{\bkmkend AAAAAAADFY}
00561     {\cf17 inline} {\cf18 void} swap(impl_ptr<T, D, C>& l,impl_ptr<T, D, C>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADFZ}{\bkmkend AAAAAAADFZ}
00562     \{\par
{\bkmkstart AAAAAAADGA}{\bkmkend AAAAAAADGA}
00563         l.swap(r);\par
{\bkmkstart AAAAAAADGB}{\bkmkend AAAAAAADGB}
00564     \}\par
{\bkmkstart AAAAAAADGC}{\bkmkend AAAAAAADGC}
00565 \}\par
{\bkmkstart AAAAAAADGD}{\bkmkend AAAAAAADGD}
00566 \par
{\bkmkstart AAAAAAADGE}{\bkmkend AAAAAAADGE}
00567 {\cf17 namespace }std \{\par
{\bkmkstart AAAAAAADGF}{\bkmkend AAAAAAADGF}
00568     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADGG}{\bkmkend AAAAAAADGG}
00569     {\cf17 struct }hash<spimpl ::unique_impl_ptr<T, D>>\par
{\bkmkstart AAAAAAADGH}{\bkmkend AAAAAAADGH}
00570     \{\par
{\bkmkstart AAAAAAADGI}{\bkmkend AAAAAAADGI}
00571         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr<T, D>}}}
 ;\par
{\bkmkstart AAAAAAADGJ}{\bkmkend AAAAAAADGJ}
00572         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAADGK}{\bkmkend AAAAAAADGK}
00573 \par
{\bkmkstart AAAAAAADGL}{\bkmkend AAAAAAADGL}
00574         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADGM}{\bkmkend AAAAAAADGM}
00575         \{\par
{\bkmkstart AAAAAAADGN}{\bkmkend AAAAAAADGN}
00576             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAADGO}{\bkmkend AAAAAAADGO}
00577         \}\par
{\bkmkstart AAAAAAADGP}{\bkmkend AAAAAAADGP}
00578     \};\par
{\bkmkstart AAAAAAADGQ}{\bkmkend AAAAAAADGQ}
00579 \par
{\bkmkstart AAAAAAADGR}{\bkmkend AAAAAAADGR}
00580     {\cf17 template} <{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADGS}{\bkmkend AAAAAAADGS}
00581     {\cf17 struct }hash<spimpl ::impl_ptr<T, D, C>>\par
{\bkmkstart AAAAAAADGT}{\bkmkend AAAAAAADGT}
00582     \{\par
{\bkmkstart AAAAAAADGU}{\bkmkend AAAAAAADGU}
00583         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr<T, D, C>}}}
 ;\par
{\bkmkstart AAAAAAADGV}{\bkmkend AAAAAAADGV}
00584         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAADGW}{\bkmkend AAAAAAADGW}
00585 \par
{\bkmkstart AAAAAAADGX}{\bkmkend AAAAAAADGX}
00586         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADGY}{\bkmkend AAAAAAADGY}
00587         \{\par
{\bkmkstart AAAAAAADGZ}{\bkmkend AAAAAAADGZ}
00588             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAADHA}{\bkmkend AAAAAAADHA}
00589         \}\par
{\bkmkstart AAAAAAADHB}{\bkmkend AAAAAAADHB}
00590     \};\par
{\bkmkstart AAAAAAADHC}{\bkmkend AAAAAAADHC}
00591 \}\par
{\bkmkstart AAAAAAADHD}{\bkmkend AAAAAAADHD}
00592 \par
{\bkmkstart AAAAAAADHE}{\bkmkend AAAAAAADHE}
00593 {\cf21 #endif }{\cf20 // SPIMPLMC_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
spimplmc.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/spimplmc.hpp}
{\xe \v code/include/spimplmc.hpp}
{\bkmkstart AAAAAAADHF}
{\bkmkend AAAAAAADHF}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADHG}{\bkmkend AAAAAAADHG}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAADHH}{\bkmkend AAAAAAADHH}
00002 {\cf20 *   Smart Pointer to IMPL Copyable and moveable}\par
{\bkmkstart AAAAAAADHI}{\bkmkend AAAAAAADHI}
00003 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAADHJ}{\bkmkend AAAAAAADHJ}
00004 {\cf20     A Smart Pointer to IMPLementation (i.e. Smart PIMPL or just SPIMPL).}\par
{\bkmkstart AAAAAAADHK}{\bkmkend AAAAAAADHK}
00005 {\cf20     ====================================================================}\par
{\bkmkstart AAAAAAADHL}{\bkmkend AAAAAAADHL}
00006 {\cf20 }\par
{\bkmkstart AAAAAAADHM}{\bkmkend AAAAAAADHM}
00007 {\cf20     Version: 1.2}\par
{\bkmkstart AAAAAAADHN}{\bkmkend AAAAAAADHN}
00008 {\cf20 }\par
{\bkmkstart AAAAAAADHO}{\bkmkend AAAAAAADHO}
00009 {\cf20     Latest version:}\par
{\bkmkstart AAAAAAADHP}{\bkmkend AAAAAAADHP}
00010 {\cf20         https://github.com/oliora/samples/blob/master/spimpl.h}\par
{\bkmkstart AAAAAAADHQ}{\bkmkend AAAAAAADHQ}
00011 {\cf20     Rationale and description:}\par
{\bkmkstart AAAAAAADHR}{\bkmkend AAAAAAADHR}
00012 {\cf20         http://oliora.github.io/2015/12/29/pimpl-and-rule-of-zero.html}\par
{\bkmkstart AAAAAAADHS}{\bkmkend AAAAAAADHS}
00013 {\cf20 }\par
{\bkmkstart AAAAAAADHT}{\bkmkend AAAAAAADHT}
00014 {\cf20     Copyright (c) 2015 Andrey Upadyshev (oliora@gmail.com)}\par
{\bkmkstart AAAAAAADHU}{\bkmkend AAAAAAADHU}
00015 {\cf20 }\par
{\bkmkstart AAAAAAADHV}{\bkmkend AAAAAAADHV}
00016 {\cf20     Distributed under the Boost Software License, Version 1.0.}\par
{\bkmkstart AAAAAAADHW}{\bkmkend AAAAAAADHW}
00017 {\cf20     See http://www.boost.org/LICENSE_1_0.txt}\par
{\bkmkstart AAAAAAADHX}{\bkmkend AAAAAAADHX}
00018 {\cf20 }\par
{\bkmkstart AAAAAAADHY}{\bkmkend AAAAAAADHY}
00019 {\cf20     Changes history}\par
{\bkmkstart AAAAAAADHZ}{\bkmkend AAAAAAADHZ}
00020 {\cf20     ---------------}\par
{\bkmkstart AAAAAAADIA}{\bkmkend AAAAAAADIA}
00021 {\cf20     v1.2:}\par
{\bkmkstart AAAAAAADIB}{\bkmkend AAAAAAADIB}
00022 {\cf20         - const correctness}\par
{\bkmkstart AAAAAAADIC}{\bkmkend AAAAAAADIC}
00023 {\cf20     v1.1:}\par
{\bkmkstart AAAAAAADID}{\bkmkend AAAAAAADID}
00024 {\cf20         - auto_ptr support is disabled by default for C++17 compatibility}\par
{\bkmkstart AAAAAAADIE}{\bkmkend AAAAAAADIE}
00025 {\cf20     v1.0:}\par
{\bkmkstart AAAAAAADIF}{\bkmkend AAAAAAADIF}
00026 {\cf20         - Released}\par
{\bkmkstart AAAAAAADIG}{\bkmkend AAAAAAADIG}
00027 {\cf20  */}\par
{\bkmkstart AAAAAAADIH}{\bkmkend AAAAAAADIH}
00028 \par
{\bkmkstart AAAAAAADII}{\bkmkend AAAAAAADII}
00029 {\cf21 #ifndef __SPIMPLMC_HPP__}\par
{\bkmkstart AAAAAAADIJ}{\bkmkend AAAAAAADIJ}
00030 {\cf21 #define __SPIMPLMC_HPP__}\par
{\bkmkstart AAAAAAADIK}{\bkmkend AAAAAAADIK}
00031 \par
{\bkmkstart AAAAAAADIL}{\bkmkend AAAAAAADIL}
00032 {\cf21 #include <memory>}\par
{\bkmkstart AAAAAAADIM}{\bkmkend AAAAAAADIM}
00033 {\cf21 #include <type_traits>}\par
{\bkmkstart AAAAAAADIN}{\bkmkend AAAAAAADIN}
00034 {\cf21 #include <cassert>}\par
{\bkmkstart AAAAAAADIO}{\bkmkend AAAAAAADIO}
00035 \par
{\bkmkstart AAAAAAADIP}{\bkmkend AAAAAAADIP}
00036 \par
{\bkmkstart AAAAAAADIQ}{\bkmkend AAAAAAADIQ}
00037 {\cf21 #if defined _MSC_VER && _MSC_VER < 1900  }{\cf20 // MS Visual Studio before VS2015}\par
{\bkmkstart AAAAAAADIR}{\bkmkend AAAAAAADIR}
00038 {\cf21 #define SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAADIS}{\bkmkend AAAAAAADIS}
00039 {\cf21 #define SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAADIT}{\bkmkend AAAAAAADIT}
00040 {\cf21 #define SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADIU}{\bkmkend AAAAAAADIU}
00041 {\cf21 #endif}\par
{\bkmkstart AAAAAAADIV}{\bkmkend AAAAAAADIV}
00042 \par
{\bkmkstart AAAAAAADIW}{\bkmkend AAAAAAADIW}
00043 {\cf21 #if ! defined SPIMPL_NO_CPP11_NOEXCEPT}\par
{\bkmkstart AAAAAAADIX}{\bkmkend AAAAAAADIX}
00044 {\cf21 #define SPIMPL_NOEXCEPT noexcept}\par
{\bkmkstart AAAAAAADIY}{\bkmkend AAAAAAADIY}
00045 {\cf21 #else}\par
{\bkmkstart AAAAAAADIZ}{\bkmkend AAAAAAADIZ}
00046 {\cf21 #define SPIMPL_NOEXCEPT}\par
{\bkmkstart AAAAAAADJA}{\bkmkend AAAAAAADJA}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAAADJB}{\bkmkend AAAAAAADJB}
00048 \par
{\bkmkstart AAAAAAADJC}{\bkmkend AAAAAAADJC}
00049 {\cf21 #if ! defined SPIMPL_NO_CPP11_CONSTEXPR}\par
{\bkmkstart AAAAAAADJD}{\bkmkend AAAAAAADJD}
00050 {\cf21 #define SPIMPL_CONSTEXPR constexpr}\par
{\bkmkstart AAAAAAADJE}{\bkmkend AAAAAAADJE}
00051 {\cf21 #else}\par
{\bkmkstart AAAAAAADJF}{\bkmkend AAAAAAADJF}
00052 {\cf21 #define SPIMPL_CONSTEXPR}\par
{\bkmkstart AAAAAAADJG}{\bkmkend AAAAAAADJG}
00053 {\cf21 #endif}\par
{\bkmkstart AAAAAAADJH}{\bkmkend AAAAAAADJH}
00054 \par
{\bkmkstart AAAAAAADJI}{\bkmkend AAAAAAADJI}
00055 {\cf20 // define SPIMPL_HAS_AUTO_PTR to enable constructor and assignment operator that accept std::auto_ptr}\par
{\bkmkstart AAAAAAADJJ}{\bkmkend AAAAAAADJJ}
00056 {\cf20 // TODO: auto detect std::auto_ptr support}\par
{\bkmkstart AAAAAAADJK}{\bkmkend AAAAAAADJK}
00057 \par
{\bkmkstart AAAAAAADJL}{\bkmkend AAAAAAADJL}
00058 \par
{\bkmkstart AAAAAAADJM}{\bkmkend AAAAAAADJM}
00059 {\cf17 namespace }spimpl  \{\par
{\bkmkstart AAAAAAADJN}{\bkmkend AAAAAAADJN}
00060     {\cf17 namespace }details \{\par
{\bkmkstart AAAAAAADJO}{\bkmkend AAAAAAADJO}
00061         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADJP}{\bkmkend AAAAAAADJP}
00062         T *default_copy(T *src)\par
{\bkmkstart AAAAAAADJQ}{\bkmkend AAAAAAADJQ}
00063         \{\par
{\bkmkstart AAAAAAADJR}{\bkmkend AAAAAAADJR}
00064             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAADJS}{\bkmkend AAAAAAADJS}
00065             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_copy cannot copy incomplete type"});\par
{\bkmkstart AAAAAAADJT}{\bkmkend AAAAAAADJT}
00066             {\cf19 return} {\cf17 new} T(*src);\par
{\bkmkstart AAAAAAADJU}{\bkmkend AAAAAAADJU}
00067         \}\par
{\bkmkstart AAAAAAADJV}{\bkmkend AAAAAAADJV}
00068 \par
{\bkmkstart AAAAAAADJW}{\bkmkend AAAAAAADJW}
00069         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADJX}{\bkmkend AAAAAAADJX}
00070         {\cf18 void} default_delete(T *p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADJY}{\bkmkend AAAAAAADJY}
00071         \{\par
{\bkmkstart AAAAAAADJZ}{\bkmkend AAAAAAADJZ}
00072             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAADKA}{\bkmkend AAAAAAADKA}
00073             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAADKB}{\bkmkend AAAAAAADKB}
00074             {\cf17 delete} p;\par
{\bkmkstart AAAAAAADKC}{\bkmkend AAAAAAADKC}
00075         \}\par
{\bkmkstart AAAAAAADKD}{\bkmkend AAAAAAADKD}
00076 \par
{\bkmkstart AAAAAAADKE}{\bkmkend AAAAAAADKE}
00077         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADKF}{\bkmkend AAAAAAADKF}
00078         {\cf17 struct }default_deleter \{\par
{\bkmkstart AAAAAAADKG}{\bkmkend AAAAAAADKG}
00079             {\cf17 using} type = void (*)(T*);\par
{\bkmkstart AAAAAAADKH}{\bkmkend AAAAAAADKH}
00080         \};\par
{\bkmkstart AAAAAAADKI}{\bkmkend AAAAAAADKI}
00081 \par
{\bkmkstart AAAAAAADKJ}{\bkmkend AAAAAAADKJ}
00082         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADKK}{\bkmkend AAAAAAADKK}
00083         {\cf17 using} default_deleter_t = {\cf17 typename} default_deleter<T>::type;\par
{\bkmkstart AAAAAAADKL}{\bkmkend AAAAAAADKL}
00084 \par
{\bkmkstart AAAAAAADKM}{\bkmkend AAAAAAADKM}
00085         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADKN}{\bkmkend AAAAAAADKN}
00086         {\cf17 struct }default_copier \{\par
{\bkmkstart AAAAAAADKO}{\bkmkend AAAAAAADKO}
00087             {\cf17 using} type = T* (*)(T*);\par
{\bkmkstart AAAAAAADKP}{\bkmkend AAAAAAADKP}
00088         \};\par
{\bkmkstart AAAAAAADKQ}{\bkmkend AAAAAAADKQ}
00089 \par
{\bkmkstart AAAAAAADKR}{\bkmkend AAAAAAADKR}
00090         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAADKS}{\bkmkend AAAAAAADKS}
00091         {\cf17 using} default_copier_t = {\cf17 typename} default_copier<T>::type;\par
{\bkmkstart AAAAAAADKT}{\bkmkend AAAAAAADKT}
00092 \par
{\bkmkstart AAAAAAADKU}{\bkmkend AAAAAAADKU}
00093         {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAADKV}{\bkmkend AAAAAAADKV}
00094         {\cf17 struct }is_default_manageable: {\cf17 public} std::integral_constant<bool,\par
{\bkmkstart AAAAAAADKW}{\bkmkend AAAAAAADKW}
00095             std::is_same<D, default_deleter_t<T>>::value &&\par
{\bkmkstart AAAAAAADKX}{\bkmkend AAAAAAADKX}
00096             std::is_same<C, default_copier_t<T>>::value\par
{\bkmkstart AAAAAAADKY}{\bkmkend AAAAAAADKY}
00097         > \{\};\par
{\bkmkstart AAAAAAADKZ}{\bkmkend AAAAAAADKZ}
00098     \}\par
{\bkmkstart AAAAAAADLA}{\bkmkend AAAAAAADLA}
00099 \par
{\bkmkstart AAAAAAADLB}{\bkmkend AAAAAAADLB}
00100 \par
{\bkmkstart AAAAAAADLC}{\bkmkend AAAAAAADLC}
00101     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>>\par
{\bkmkstart AAAAAAADLD}{\bkmkend AAAAAAADLD}
00102     {\cf17 class }unique_impl_ptr\par
{\bkmkstart AAAAAAADLE}{\bkmkend AAAAAAADLE}
00103     \{\par
{\bkmkstart AAAAAAADLF}{\bkmkend AAAAAAADLF}
00104         {\cf17 protected}:\par
{\bkmkstart AAAAAAADLG}{\bkmkend AAAAAAADLG}
00105         {\cf17 static_assert}(!std::is_array<T>::value, {\cf22 "unique_impl_ptr specialization for arrays is not implemented"});\par
{\bkmkstart AAAAAAADLH}{\bkmkend AAAAAAADLH}
00106         {\cf17 struct }dummy_t_ \{{\cf18 int} dummy__;\};\par
{\bkmkstart AAAAAAADLI}{\bkmkend AAAAAAADLI}
00107 \par
{\bkmkstart AAAAAAADLJ}{\bkmkend AAAAAAADLJ}
00108     {\cf17 public}:\par
{\bkmkstart AAAAAAADLK}{\bkmkend AAAAAAADLK}
00109         {\cf17 using} pointer = T*;\par
{\bkmkstart AAAAAAADLL}{\bkmkend AAAAAAADLL}
00110         {\cf17 using} const_pointer = {\cf17 typename} std::add_const<T>::type *;\par
{\bkmkstart AAAAAAADLM}{\bkmkend AAAAAAADLM}
00111         {\cf17 using} reference = T&;\par
{\bkmkstart AAAAAAADLN}{\bkmkend AAAAAAADLN}
00112         {\cf17 using} const_reference = {\cf17 typename} std::add_const<T>::type &;\par
{\bkmkstart AAAAAAADLO}{\bkmkend AAAAAAADLO}
00113         {\cf17 using} element_type = T;\par
{\bkmkstart AAAAAAADLP}{\bkmkend AAAAAAADLP}
00114         {\cf17 using} deleter_type = {\cf17 typename} std::decay<Deleter>::type;\par
{\bkmkstart AAAAAAADLQ}{\bkmkend AAAAAAADLQ}
00115         {\cf17 using} unique_ptr_type = std::unique_ptr<T, deleter_type>;\par
{\bkmkstart AAAAAAADLR}{\bkmkend AAAAAAADLR}
00116         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type>;\par
{\bkmkstart AAAAAAADLS}{\bkmkend AAAAAAADLS}
00117 \par
{\bkmkstart AAAAAAADLT}{\bkmkend AAAAAAADLT}
00118         SPIMPL_CONSTEXPR unique_impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADLU}{\bkmkend AAAAAAADLU}
00119         : ptr_({\cf18 nullptr}, deleter_type\{\}) \{\}\par
{\bkmkstart AAAAAAADLV}{\bkmkend AAAAAAADLV}
00120 \par
{\bkmkstart AAAAAAADLW}{\bkmkend AAAAAAADLW}
00121         SPIMPL_CONSTEXPR unique_impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADLX}{\bkmkend AAAAAAADLX}
00122         : unique_impl_ptr() \{\}\par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00123 \par
{\bkmkstart AAAAAAADLZ}{\bkmkend AAAAAAADLZ}
00124         {\cf17 template}<{\cf17 class} D>\par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00125         unique_impl_ptr(pointer p, D&& d,\par
{\bkmkstart AAAAAAADMB}{\bkmkend AAAAAAADMB}
00126                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADMC}{\bkmkend AAAAAAADMC}
00127                     std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00128                     dummy_t_\par
{\bkmkstart AAAAAAADME}{\bkmkend AAAAAAADME}
00129                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADMF}{\bkmkend AAAAAAADMF}
00130         : ptr_(std::move(p), std::forward<D>(d)) \{\}\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00131 \par
{\bkmkstart AAAAAAADMH}{\bkmkend AAAAAAADMH}
00132         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00133         unique_impl_ptr(U *u,\par
{\bkmkstart AAAAAAADMJ}{\bkmkend AAAAAAADMJ}
00134                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00135                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADML}{\bkmkend AAAAAAADML}
00136                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADMM}{\bkmkend AAAAAAADMM}
00137                     dummy_t_\par
{\bkmkstart AAAAAAADMN}{\bkmkend AAAAAAADMN}
00138                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADMO}{\bkmkend AAAAAAADMO}
00139         : unique_impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00140 \par
{\bkmkstart AAAAAAADMQ}{\bkmkend AAAAAAADMQ}
00141 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADMR}{\bkmkend AAAAAAADMR}
00142         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00143 {\cf21 #else}\par
{\bkmkstart AAAAAAADMT}{\bkmkend AAAAAAADMT}
00144         unique_impl_ptr(unique_impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADMU}{\bkmkend AAAAAAADMU}
00145         : ptr_(std::move(r.ptr_)) \{\}\par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00146 {\cf21 #endif}\par
{\bkmkstart AAAAAAADMW}{\bkmkend AAAAAAADMW}
00147 \par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00148 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAADMY}{\bkmkend AAAAAAADMY}
00149         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADMZ}{\bkmkend AAAAAAADMZ}
00150         unique_impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAADNA}{\bkmkend AAAAAAADNA}
00151                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADNB}{\bkmkend AAAAAAADNB}
00152                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADNC}{\bkmkend AAAAAAADNC}
00153                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADND}{\bkmkend AAAAAAADND}
00154                     dummy_t_\par
{\bkmkstart AAAAAAADNE}{\bkmkend AAAAAAADNE}
00155                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00156         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAADNG}{\bkmkend AAAAAAADNG}
00157 {\cf21 #endif}\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00158 \par
{\bkmkstart AAAAAAADNI}{\bkmkend AAAAAAADNI}
00159         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00160         unique_impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAADNK}{\bkmkend AAAAAAADNK}
00161                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADNL}{\bkmkend AAAAAAADNL}
00162                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00163                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADNN}{\bkmkend AAAAAAADNN}
00164                     dummy_t_\par
{\bkmkstart AAAAAAADNO}{\bkmkend AAAAAAADNO}
00165                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADNP}{\bkmkend AAAAAAADNP}
00166         : ptr_(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00167 \par
{\bkmkstart AAAAAAADNR}{\bkmkend AAAAAAADNR}
00168         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAADNS}{\bkmkend AAAAAAADNS}
00169         unique_impl_ptr(std::unique_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00170                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00171                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADNV}{\bkmkend AAAAAAADNV}
00172                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00173                     dummy_t_\par
{\bkmkstart AAAAAAADNX}{\bkmkend AAAAAAADNX}
00174                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADNY}{\bkmkend AAAAAAADNY}
00175         : ptr_(std::move(u)) \{\}\par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00176 \par
{\bkmkstart AAAAAAADOA}{\bkmkend AAAAAAADOA}
00177         {\cf17 template}<{\cf17 class} U, {\cf17 class} D>\par
{\bkmkstart AAAAAAADOB}{\bkmkend AAAAAAADOB}
00178         unique_impl_ptr(unique_impl_ptr<U, D>&& u,\par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00179                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADOD}{\bkmkend AAAAAAADOD}
00180                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADOE}{\bkmkend AAAAAAADOE}
00181                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADOF}{\bkmkend AAAAAAADOF}
00182                     dummy_t_\par
{\bkmkstart AAAAAAADOG}{\bkmkend AAAAAAADOG}
00183                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00184         : ptr_(std::move(u.ptr_)) \{\}\par
{\bkmkstart AAAAAAADOI}{\bkmkend AAAAAAADOI}
00185 \par
{\bkmkstart AAAAAAADOJ}{\bkmkend AAAAAAADOJ}
00186         unique_impl_ptr({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00187 \par
{\bkmkstart AAAAAAADOL}{\bkmkend AAAAAAADOL}
00188 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00189         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADON}{\bkmkend AAAAAAADON}
00190 {\cf21 #else}\par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00191         unique_impl_ptr& operator= (unique_impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAADOP}{\bkmkend AAAAAAADOP}
00192             ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00193             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADOR}{\bkmkend AAAAAAADOR}
00194         \}\par
{\bkmkstart AAAAAAADOS}{\bkmkend AAAAAAADOS}
00195 {\cf21 #endif}\par
{\bkmkstart AAAAAAADOT}{\bkmkend AAAAAAADOT}
00196 \par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00197 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAADOV}{\bkmkend AAAAAAADOV}
00198         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00199         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADOX}{\bkmkend AAAAAAADOX}
00200             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADOY}{\bkmkend AAAAAAADOY}
00201                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAADOZ}{\bkmkend AAAAAAADOZ}
00202             unique_impl_ptr&\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00203         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADPB}{\bkmkend AAAAAAADPB}
00204         \{\par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00205             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAADPD}{\bkmkend AAAAAAADPD}
00206         \}\par
{\bkmkstart AAAAAAADPE}{\bkmkend AAAAAAADPE}
00207 {\cf21 #endif}\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00208 \par
{\bkmkstart AAAAAAADPG}{\bkmkend AAAAAAADPG}
00209         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00210         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00211             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADPJ}{\bkmkend AAAAAAADPJ}
00212                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00213             unique_impl_ptr&\par
{\bkmkstart AAAAAAADPL}{\bkmkend AAAAAAADPL}
00214         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADPM}{\bkmkend AAAAAAADPM}
00215         \{\par
{\bkmkstart AAAAAAADPN}{\bkmkend AAAAAAADPN}
00216             {\cf19 return} operator=(unique_impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAADPO}{\bkmkend AAAAAAADPO}
00217         \}\par
{\bkmkstart AAAAAAADPP}{\bkmkend AAAAAAADPP}
00218 \par
{\bkmkstart AAAAAAADPQ}{\bkmkend AAAAAAADPQ}
00219         reference operator=({\cf17 const} unique_impl_ptr<T, Deleter>&) = {\cf17 delete};\par
{\bkmkstart AAAAAAADPR}{\bkmkend AAAAAAADPR}
00220 \par
{\bkmkstart AAAAAAADPS}{\bkmkend AAAAAAADPS}
00221         reference operator*() \{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00222         const_reference operator*(){\cf17  const }\{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00223 \par
{\bkmkstart AAAAAAADPV}{\bkmkend AAAAAAADPV}
00224         pointer operator->() SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00225         const_pointer operator->() const SPIMPL_NOEXCEPT \{ {\cf19 return} get(); \}\par
{\bkmkstart AAAAAAADPX}{\bkmkend AAAAAAADPX}
00226 \par
{\bkmkstart AAAAAAADPY}{\bkmkend AAAAAAADPY}
00227         pointer get() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAADPZ}{\bkmkend AAAAAAADPZ}
00228         const_pointer get() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get(); \}\par
{\bkmkstart AAAAAAADQA}{\bkmkend AAAAAAADQA}
00229 \par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00230         {\cf18 void} swap(unique_impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADQC}{\bkmkend AAAAAAADQC}
00231         \{\par
{\bkmkstart AAAAAAADQD}{\bkmkend AAAAAAADQD}
00232             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAADQE}{\bkmkend AAAAAAADQE}
00233             ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAADQF}{\bkmkend AAAAAAADQF}
00234         \}\par
{\bkmkstart AAAAAAADQG}{\bkmkend AAAAAAADQG}
00235 \par
{\bkmkstart AAAAAAADQH}{\bkmkend AAAAAAADQH}
00236         pointer release() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.release(); \}\par
{\bkmkstart AAAAAAADQI}{\bkmkend AAAAAAADQI}
00237 \par
{\bkmkstart AAAAAAADQJ}{\bkmkend AAAAAAADQJ}
00238         unique_ptr_type release_unique() SPIMPL_NOEXCEPT \{ {\cf19 return} std::move(ptr_); \}\par
{\bkmkstart AAAAAAADQK}{\bkmkend AAAAAAADQK}
00239 \par
{\bkmkstart AAAAAAADQL}{\bkmkend AAAAAAADQL}
00240         {\cf17 explicit} {\cf17 operator} bool() const SPIMPL_NOEXCEPT \{ {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(ptr_); \}\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00241 \par
{\bkmkstart AAAAAAADQN}{\bkmkend AAAAAAADQN}
00242         {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00243         {\cf17 const} {\cf17 typename} std::remove_reference<deleter_type>::type& get_deleter() const SPIMPL_NOEXCEPT \{ {\cf19 return} ptr_.get_deleter(); \}\par
{\bkmkstart AAAAAAADQP}{\bkmkend AAAAAAADQP}
00244 \par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00245     {\cf17 protected}:\par
{\bkmkstart AAAAAAADQR}{\bkmkend AAAAAAADQR}
00246         unique_ptr_type ptr_;\par
{\bkmkstart AAAAAAADQS}{\bkmkend AAAAAAADQS}
00247     \};\par
{\bkmkstart AAAAAAADQT}{\bkmkend AAAAAAADQT}
00248 \par
{\bkmkstart AAAAAAADQU}{\bkmkend AAAAAAADQU}
00249 \par
{\bkmkstart AAAAAAADQV}{\bkmkend AAAAAAADQV}
00250     {\cf17 template}<{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00251     {\cf17 inline} {\cf18 void} swap(unique_impl_ptr<T, D>& l, unique_impl_ptr<T, D>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADQX}{\bkmkend AAAAAAADQX}
00252     \{\par
{\bkmkstart AAAAAAADQY}{\bkmkend AAAAAAADQY}
00253         l.swap(r);\par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00254     \}\par
{\bkmkstart AAAAAAADRA}{\bkmkend AAAAAAADRA}
00255 \par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00256 \par
{\bkmkstart AAAAAAADRC}{\bkmkend AAAAAAADRC}
00257     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADRD}{\bkmkend AAAAAAADRD}
00258     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00259     \{\par
{\bkmkstart AAAAAAADRF}{\bkmkend AAAAAAADRF}
00260         {\cf19 return} l.get() == r.get();\par
{\bkmkstart AAAAAAADRG}{\bkmkend AAAAAAADRG}
00261     \}\par
{\bkmkstart AAAAAAADRH}{\bkmkend AAAAAAADRH}
00262 \par
{\bkmkstart AAAAAAADRI}{\bkmkend AAAAAAADRI}
00263     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} C1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADRJ}{\bkmkend AAAAAAADRJ}
00264     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADRK}{\bkmkend AAAAAAADRK}
00265     \{\par
{\bkmkstart AAAAAAADRL}{\bkmkend AAAAAAADRL}
00266         {\cf19 return} !(l == r);\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00267     \}\par
{\bkmkstart AAAAAAADRN}{\bkmkend AAAAAAADRN}
00268 \par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00269     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADRP}{\bkmkend AAAAAAADRP}
00270     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADRQ}{\bkmkend AAAAAAADRQ}
00271     \{\par
{\bkmkstart AAAAAAADRR}{\bkmkend AAAAAAADRR}
00272         {\cf17 using} P1 = {\cf17 typename} unique_impl_ptr<T1, D1>::pointer;\par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00273         {\cf17 using} P2 = {\cf17 typename} unique_impl_ptr<T2, D2>::pointer;\par
{\bkmkstart AAAAAAADRT}{\bkmkend AAAAAAADRT}
00274         {\cf17 using} CT = {\cf17 typename} std::common_type<P1, P2>::type;\par
{\bkmkstart AAAAAAADRU}{\bkmkend AAAAAAADRU}
00275         {\cf19 return} std::less<CT>()(l.get(), r.get());\par
{\bkmkstart AAAAAAADRV}{\bkmkend AAAAAAADRV}
00276     \}\par
{\bkmkstart AAAAAAADRW}{\bkmkend AAAAAAADRW}
00277 \par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00278     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADRY}{\bkmkend AAAAAAADRY}
00279     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00280     \{\par
{\bkmkstart AAAAAAADSA}{\bkmkend AAAAAAADSA}
00281         {\cf19 return} r < l;\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00282     \}\par
{\bkmkstart AAAAAAADSC}{\bkmkend AAAAAAADSC}
00283 \par
{\bkmkstart AAAAAAADSD}{\bkmkend AAAAAAADSD}
00284     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADSE}{\bkmkend AAAAAAADSE}
00285     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADSF}{\bkmkend AAAAAAADSF}
00286     \{\par
{\bkmkstart AAAAAAADSG}{\bkmkend AAAAAAADSG}
00287         {\cf19 return} !(r < l);\par
{\bkmkstart AAAAAAADSH}{\bkmkend AAAAAAADSH}
00288     \}\par
{\bkmkstart AAAAAAADSI}{\bkmkend AAAAAAADSI}
00289 \par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00290     {\cf17 template} <{\cf17 class} T1, {\cf17 class} D1, {\cf17 class} T2, {\cf17 class} D2>\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00291     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T1, D1>& l, {\cf17 const} unique_impl_ptr<T2, D2>& r)\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00292     \{\par
{\bkmkstart AAAAAAADSM}{\bkmkend AAAAAAADSM}
00293         {\cf19 return} !(l < r);\par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00294     \}\par
{\bkmkstart AAAAAAADSO}{\bkmkend AAAAAAADSO}
00295 \par
{\bkmkstart AAAAAAADSP}{\bkmkend AAAAAAADSP}
00296     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADSQ}{\bkmkend AAAAAAADSQ}
00297     {\cf17 inline} {\cf18 bool} operator==({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADSR}{\bkmkend AAAAAAADSR}
00298     \{\par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00299         {\cf19 return} !p;\par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00300     \}\par
{\bkmkstart AAAAAAADSU}{\bkmkend AAAAAAADSU}
00301 \par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00302     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADSW}{\bkmkend AAAAAAADSW}
00303     {\cf17 inline} {\cf18 bool} operator==(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00304     \{\par
{\bkmkstart AAAAAAADSY}{\bkmkend AAAAAAADSY}
00305         {\cf19 return} !p;\par
{\bkmkstart AAAAAAADSZ}{\bkmkend AAAAAAADSZ}
00306     \}\par
{\bkmkstart AAAAAAADTA}{\bkmkend AAAAAAADTA}
00307 \par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00308     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00309     {\cf17 inline} {\cf18 bool} operator!=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADTD}{\bkmkend AAAAAAADTD}
00310     \{\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00311         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAADTF}{\bkmkend AAAAAAADTF}
00312     \}\par
{\bkmkstart AAAAAAADTG}{\bkmkend AAAAAAADTG}
00313 \par
{\bkmkstart AAAAAAADTH}{\bkmkend AAAAAAADTH}
00314     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADTI}{\bkmkend AAAAAAADTI}
00315     {\cf17 inline} {\cf18 bool} operator!=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADTJ}{\bkmkend AAAAAAADTJ}
00316     \{\par
{\bkmkstart AAAAAAADTK}{\bkmkend AAAAAAADTK}
00317         {\cf19 return} {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(p);\par
{\bkmkstart AAAAAAADTL}{\bkmkend AAAAAAADTL}
00318     \}\par
{\bkmkstart AAAAAAADTM}{\bkmkend AAAAAAADTM}
00319 \par
{\bkmkstart AAAAAAADTN}{\bkmkend AAAAAAADTN}
00320     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADTO}{\bkmkend AAAAAAADTO}
00321     {\cf17 inline} {\cf18 bool} operator< ({\cf17 const} unique_impl_ptr<T, D>& l, std::nullptr_t)\par
{\bkmkstart AAAAAAADTP}{\bkmkend AAAAAAADTP}
00322     \{\par
{\bkmkstart AAAAAAADTQ}{\bkmkend AAAAAAADTQ}
00323         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAADTR}{\bkmkend AAAAAAADTR}
00324         {\cf19 return} std::less<P>()(l.get(), {\cf17 nullptr});\par
{\bkmkstart AAAAAAADTS}{\bkmkend AAAAAAADTS}
00325     \}\par
{\bkmkstart AAAAAAADTT}{\bkmkend AAAAAAADTT}
00326 \par
{\bkmkstart AAAAAAADTU}{\bkmkend AAAAAAADTU}
00327     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADTV}{\bkmkend AAAAAAADTV}
00328     {\cf17 inline} {\cf18 bool} operator< (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAADTW}{\bkmkend AAAAAAADTW}
00329     \{\par
{\bkmkstart AAAAAAADTX}{\bkmkend AAAAAAADTX}
00330         {\cf17 using} P = {\cf17 typename} unique_impl_ptr<T, D>::pointer;\par
{\bkmkstart AAAAAAADTY}{\bkmkend AAAAAAADTY}
00331         {\cf19 return} std::less<P>()({\cf17 nullptr}, p.get());\par
{\bkmkstart AAAAAAADTZ}{\bkmkend AAAAAAADTZ}
00332     \}\par
{\bkmkstart AAAAAAADUA}{\bkmkend AAAAAAADUA}
00333 \par
{\bkmkstart AAAAAAADUB}{\bkmkend AAAAAAADUB}
00334     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADUC}{\bkmkend AAAAAAADUC}
00335     {\cf17 inline} {\cf18 bool} operator> ({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAADUD}{\bkmkend AAAAAAADUD}
00336     \{\par
{\bkmkstart AAAAAAADUE}{\bkmkend AAAAAAADUE}
00337         {\cf19 return} {\cf17 nullptr} < p;\par
{\bkmkstart AAAAAAADUF}{\bkmkend AAAAAAADUF}
00338     \}\par
{\bkmkstart AAAAAAADUG}{\bkmkend AAAAAAADUG}
00339 \par
{\bkmkstart AAAAAAADUH}{\bkmkend AAAAAAADUH}
00340     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADUI}{\bkmkend AAAAAAADUI}
00341     {\cf17 inline} {\cf18 bool} operator> (std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAADUJ}{\bkmkend AAAAAAADUJ}
00342     \{\par
{\bkmkstart AAAAAAADUK}{\bkmkend AAAAAAADUK}
00343         {\cf19 return} p < {\cf17 nullptr};\par
{\bkmkstart AAAAAAADUL}{\bkmkend AAAAAAADUL}
00344     \}\par
{\bkmkstart AAAAAAADUM}{\bkmkend AAAAAAADUM}
00345 \par
{\bkmkstart AAAAAAADUN}{\bkmkend AAAAAAADUN}
00346     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADUO}{\bkmkend AAAAAAADUO}
00347     {\cf17 inline} {\cf18 bool} operator<=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAADUP}{\bkmkend AAAAAAADUP}
00348     \{\par
{\bkmkstart AAAAAAADUQ}{\bkmkend AAAAAAADUQ}
00349         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAADUR}{\bkmkend AAAAAAADUR}
00350     \}\par
{\bkmkstart AAAAAAADUS}{\bkmkend AAAAAAADUS}
00351 \par
{\bkmkstart AAAAAAADUT}{\bkmkend AAAAAAADUT}
00352     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADUU}{\bkmkend AAAAAAADUU}
00353     {\cf17 inline} {\cf18 bool} operator<=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAADUV}{\bkmkend AAAAAAADUV}
00354     \{\par
{\bkmkstart AAAAAAADUW}{\bkmkend AAAAAAADUW}
00355         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAADUX}{\bkmkend AAAAAAADUX}
00356     \}\par
{\bkmkstart AAAAAAADUY}{\bkmkend AAAAAAADUY}
00357 \par
{\bkmkstart AAAAAAADUZ}{\bkmkend AAAAAAADUZ}
00358     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADVA}{\bkmkend AAAAAAADVA}
00359     {\cf17 inline} {\cf18 bool} operator>=({\cf17 const} unique_impl_ptr<T, D>& p, std::nullptr_t)\par
{\bkmkstart AAAAAAADVB}{\bkmkend AAAAAAADVB}
00360     \{\par
{\bkmkstart AAAAAAADVC}{\bkmkend AAAAAAADVC}
00361         {\cf19 return} !(p < {\cf17 nullptr});\par
{\bkmkstart AAAAAAADVD}{\bkmkend AAAAAAADVD}
00362     \}\par
{\bkmkstart AAAAAAADVE}{\bkmkend AAAAAAADVE}
00363 \par
{\bkmkstart AAAAAAADVF}{\bkmkend AAAAAAADVF}
00364     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAADVG}{\bkmkend AAAAAAADVG}
00365     {\cf17 inline} {\cf18 bool} operator>=(std::nullptr_t, {\cf17 const} unique_impl_ptr<T, D>& p)\par
{\bkmkstart AAAAAAADVH}{\bkmkend AAAAAAADVH}
00366     \{\par
{\bkmkstart AAAAAAADVI}{\bkmkend AAAAAAADVI}
00367         {\cf19 return} !({\cf17 nullptr} < p);\par
{\bkmkstart AAAAAAADVJ}{\bkmkend AAAAAAADVJ}
00368     \}\par
{\bkmkstart AAAAAAADVK}{\bkmkend AAAAAAADVK}
00369 \par
{\bkmkstart AAAAAAADVL}{\bkmkend AAAAAAADVL}
00370 \par
{\bkmkstart AAAAAAADVM}{\bkmkend AAAAAAADVM}
00371     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Arguments>\par
{\bkmkstart AAAAAAADVN}{\bkmkend AAAAAAADVN}
00372     {\cf17 inline} unique_impl_ptr<T> make_unique_impl(Arguments&&... args)\par
{\bkmkstart AAAAAAADVO}{\bkmkend AAAAAAADVO}
00373     \{\par
{\bkmkstart AAAAAAADVP}{\bkmkend AAAAAAADVP}
00374         {\cf19 return} unique_impl_ptr<T>({\cf17 new} T(std::forward<Arguments>(args)...), &details::default_delete<T>);\par
{\bkmkstart AAAAAAADVQ}{\bkmkend AAAAAAADVQ}
00375     \}\par
{\bkmkstart AAAAAAADVR}{\bkmkend AAAAAAADVR}
00376 \par
{\bkmkstart AAAAAAADVS}{\bkmkend AAAAAAADVS}
00377 \par
{\bkmkstart AAAAAAADVT}{\bkmkend AAAAAAADVT}
00378     {\cf20 // Helpers to manage unique impl, stored in std::unique_ptr}\par
{\bkmkstart AAAAAAADVU}{\bkmkend AAAAAAADVU}
00379     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = details::default_deleter_t<T>, {\cf17 class} Copier = details::default_copier_t<T>>\par
{\bkmkstart AAAAAAADVV}{\bkmkend AAAAAAADVV}
00380     {\cf17 class }impl_ptr : {\cf17 public} unique_impl_ptr<T, Deleter>\par
{\bkmkstart AAAAAAADVW}{\bkmkend AAAAAAADVW}
00381     \{\par
{\bkmkstart AAAAAAADVX}{\bkmkend AAAAAAADVX}
00382         {\cf17 using} base_type = unique_impl_ptr<T, Deleter>;\par
{\bkmkstart AAAAAAADVY}{\bkmkend AAAAAAADVY}
00383         {\cf17 using} dummy_t_ = {\cf17 typename} base_type::dummy_t_;\par
{\bkmkstart AAAAAAADVZ}{\bkmkend AAAAAAADVZ}
00384     {\cf17 public}:\par
{\bkmkstart AAAAAAADWA}{\bkmkend AAAAAAADWA}
00385         {\cf17 using} pointer = {\cf17 typename} base_type::pointer;\par
{\bkmkstart AAAAAAADWB}{\bkmkend AAAAAAADWB}
00386         {\cf17 using} const_pointer = {\cf17 typename} base_type::const_pointer;\par
{\bkmkstart AAAAAAADWC}{\bkmkend AAAAAAADWC}
00387         {\cf17 using} reference = {\cf17 typename} base_type::reference;\par
{\bkmkstart AAAAAAADWD}{\bkmkend AAAAAAADWD}
00388         {\cf17 using} const_reference = {\cf17 typename} base_type::const_reference;\par
{\bkmkstart AAAAAAADWE}{\bkmkend AAAAAAADWE}
00389         {\cf17 using} element_type = {\cf17 typename} base_type::element_type;\par
{\bkmkstart AAAAAAADWF}{\bkmkend AAAAAAADWF}
00390         {\cf17 using} deleter_type = {\cf17 typename} base_type::deleter_type;\par
{\bkmkstart AAAAAAADWG}{\bkmkend AAAAAAADWG}
00391         {\cf17 using} unique_ptr_type = {\cf17 typename} base_type::unique_ptr_type;\par
{\bkmkstart AAAAAAADWH}{\bkmkend AAAAAAADWH}
00392         {\cf17 using} copier_type = {\cf17 typename} std::decay<Copier>::type;\par
{\bkmkstart AAAAAAADWI}{\bkmkend AAAAAAADWI}
00393         {\cf17 using} is_default_manageable = details::is_default_manageable<T, deleter_type, copier_type>;\par
{\bkmkstart AAAAAAADWJ}{\bkmkend AAAAAAADWJ}
00394 \par
{\bkmkstart AAAAAAADWK}{\bkmkend AAAAAAADWK}
00395         SPIMPL_CONSTEXPR impl_ptr() SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADWL}{\bkmkend AAAAAAADWL}
00396         : base_type({\cf18 nullptr}, deleter_type\{\}), copier_(copier_type\{\}) \{\}\par
{\bkmkstart AAAAAAADWM}{\bkmkend AAAAAAADWM}
00397 \par
{\bkmkstart AAAAAAADWN}{\bkmkend AAAAAAADWN}
00398         SPIMPL_CONSTEXPR impl_ptr(std::nullptr_t) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADWO}{\bkmkend AAAAAAADWO}
00399         : impl_ptr() \{\}\par
{\bkmkstart AAAAAAADWP}{\bkmkend AAAAAAADWP}
00400 \par
{\bkmkstart AAAAAAADWQ}{\bkmkend AAAAAAADWQ}
00401         {\cf17 template}<{\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADWR}{\bkmkend AAAAAAADWR}
00402         impl_ptr(pointer p, D&& d, C&& c,\par
{\bkmkstart AAAAAAADWS}{\bkmkend AAAAAAADWS}
00403                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADWT}{\bkmkend AAAAAAADWT}
00404                     std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAADWU}{\bkmkend AAAAAAADWU}
00405                         && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAADWV}{\bkmkend AAAAAAADWV}
00406                     {\cf17 typename} base_type::dummy_t_\par
{\bkmkstart AAAAAAADWW}{\bkmkend AAAAAAADWW}
00407                  >::type = {\cf17 typename} base_type::dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADWX}{\bkmkend AAAAAAADWX}
00408         : base_type(std::move(p), std::forward<D>(d)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAADWY}{\bkmkend AAAAAAADWY}
00409 \par
{\bkmkstart AAAAAAADWZ}{\bkmkend AAAAAAADWZ}
00410         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADXA}{\bkmkend AAAAAAADXA}
00411         impl_ptr(U *u,\par
{\bkmkstart AAAAAAADXB}{\bkmkend AAAAAAADXB}
00412                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADXC}{\bkmkend AAAAAAADXC}
00413                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADXD}{\bkmkend AAAAAAADXD}
00414                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADXE}{\bkmkend AAAAAAADXE}
00415                     dummy_t_\par
{\bkmkstart AAAAAAADXF}{\bkmkend AAAAAAADXF}
00416                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADXG}{\bkmkend AAAAAAADXG}
00417         : impl_ptr(u, &details::default_delete<T>, &details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAADXH}{\bkmkend AAAAAAADXH}
00418 \par
{\bkmkstart AAAAAAADXI}{\bkmkend AAAAAAADXI}
00419         impl_ptr({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAADXJ}{\bkmkend AAAAAAADXJ}
00420         : impl_ptr(r.clone()) \{\}\par
{\bkmkstart AAAAAAADXK}{\bkmkend AAAAAAADXK}
00421 \par
{\bkmkstart AAAAAAADXL}{\bkmkend AAAAAAADXL}
00422 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADXM}{\bkmkend AAAAAAADXM}
00423         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADXN}{\bkmkend AAAAAAADXN}
00424 {\cf21 #else}\par
{\bkmkstart AAAAAAADXO}{\bkmkend AAAAAAADXO}
00425         impl_ptr(impl_ptr&& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADXP}{\bkmkend AAAAAAADXP}
00426         : base_type(std::move(r.ptr_)), copier_(std::move(r.copier_)) \{\}\par
{\bkmkstart AAAAAAADXQ}{\bkmkend AAAAAAADXQ}
00427 {\cf21 #endif}\par
{\bkmkstart AAAAAAADXR}{\bkmkend AAAAAAADXR}
00428 \par
{\bkmkstart AAAAAAADXS}{\bkmkend AAAAAAADXS}
00429 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAADXT}{\bkmkend AAAAAAADXT}
00430         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADXU}{\bkmkend AAAAAAADXU}
00431         impl_ptr(std::auto_ptr<U>&& u,\par
{\bkmkstart AAAAAAADXV}{\bkmkend AAAAAAADXV}
00432                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADXW}{\bkmkend AAAAAAADXW}
00433                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADXX}{\bkmkend AAAAAAADXX}
00434                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADXY}{\bkmkend AAAAAAADXY}
00435                     dummy_t_\par
{\bkmkstart AAAAAAADXZ}{\bkmkend AAAAAAADXZ}
00436                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADYA}{\bkmkend AAAAAAADYA}
00437         : base_type(u.release(), &details::default_delete<T>), copier_(&details::default_copy<T>) \{\}\par
{\bkmkstart AAAAAAADYB}{\bkmkend AAAAAAADYB}
00438 {\cf21 #endif}\par
{\bkmkstart AAAAAAADYC}{\bkmkend AAAAAAADYC}
00439 \par
{\bkmkstart AAAAAAADYD}{\bkmkend AAAAAAADYD}
00440         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAADYE}{\bkmkend AAAAAAADYE}
00441         impl_ptr(std::unique_ptr<U>&& u,\par
{\bkmkstart AAAAAAADYF}{\bkmkend AAAAAAADYF}
00442                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADYG}{\bkmkend AAAAAAADYG}
00443                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADYH}{\bkmkend AAAAAAADYH}
00444                         && is_default_manageable::value,\par
{\bkmkstart AAAAAAADYI}{\bkmkend AAAAAAADYI}
00445                     dummy_t_\par
{\bkmkstart AAAAAAADYJ}{\bkmkend AAAAAAADYJ}
00446                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADYK}{\bkmkend AAAAAAADYK}
00447         : base_type(u.release(), &details::default_delete<T>) \{\}\par
{\bkmkstart AAAAAAADYL}{\bkmkend AAAAAAADYL}
00448 \par
{\bkmkstart AAAAAAADYM}{\bkmkend AAAAAAADYM}
00449         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADYN}{\bkmkend AAAAAAADYN}
00450         impl_ptr(std::unique_ptr<U, D>&& u, C&& c,\par
{\bkmkstart AAAAAAADYO}{\bkmkend AAAAAAADYO}
00451                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADYP}{\bkmkend AAAAAAADYP}
00452                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADYQ}{\bkmkend AAAAAAADYQ}
00453                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADYR}{\bkmkend AAAAAAADYR}
00454                     dummy_t_\par
{\bkmkstart AAAAAAADYS}{\bkmkend AAAAAAADYS}
00455                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADYT}{\bkmkend AAAAAAADYT}
00456         : base_type(std::move(u)), copier_(std::forward<C>(c)) \{\}\par
{\bkmkstart AAAAAAADYU}{\bkmkend AAAAAAADYU}
00457 \par
{\bkmkstart AAAAAAADYV}{\bkmkend AAAAAAADYV}
00458         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADYW}{\bkmkend AAAAAAADYW}
00459         impl_ptr(impl_ptr<U, D, C>&& u,\par
{\bkmkstart AAAAAAADYX}{\bkmkend AAAAAAADYX}
00460                  {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADYY}{\bkmkend AAAAAAADYY}
00461                     std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADYZ}{\bkmkend AAAAAAADYZ}
00462                         && std::is_convertible<D, deleter_type>::value,\par
{\bkmkstart AAAAAAADZA}{\bkmkend AAAAAAADZA}
00463                     dummy_t_\par
{\bkmkstart AAAAAAADZB}{\bkmkend AAAAAAADZB}
00464                  >::type = dummy_t_()) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAADZC}{\bkmkend AAAAAAADZC}
00465         : base_type(std::move(u.ptr_)), copier_(std::move(u.copier_)) \{\}\par
{\bkmkstart AAAAAAADZD}{\bkmkend AAAAAAADZD}
00466 \par
{\bkmkstart AAAAAAADZE}{\bkmkend AAAAAAADZE}
00467         impl_ptr& operator= ({\cf17 const} impl_ptr& r)\par
{\bkmkstart AAAAAAADZF}{\bkmkend AAAAAAADZF}
00468         \{\par
{\bkmkstart AAAAAAADZG}{\bkmkend AAAAAAADZG}
00469             {\cf19 if} ({\cf17 this} == &r)\par
{\bkmkstart AAAAAAADZH}{\bkmkend AAAAAAADZH}
00470                 {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADZI}{\bkmkend AAAAAAADZI}
00471 \par
{\bkmkstart AAAAAAADZJ}{\bkmkend AAAAAAADZJ}
00472             {\cf19 return} operator=(r.clone());\par
{\bkmkstart AAAAAAADZK}{\bkmkend AAAAAAADZK}
00473         \}\par
{\bkmkstart AAAAAAADZL}{\bkmkend AAAAAAADZL}
00474 \par
{\bkmkstart AAAAAAADZM}{\bkmkend AAAAAAADZM}
00475 {\cf21 #ifndef SPIMPL_NO_CPP11_DEFAULT_MOVE_SPEC_FUNC}\par
{\bkmkstart AAAAAAADZN}{\bkmkend AAAAAAADZN}
00476         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT = {\cf19 default};\par
{\bkmkstart AAAAAAADZO}{\bkmkend AAAAAAADZO}
00477 {\cf21 #else}\par
{\bkmkstart AAAAAAADZP}{\bkmkend AAAAAAADZP}
00478         impl_ptr& operator= (impl_ptr&& r) SPIMPL_NOEXCEPT \{\par
{\bkmkstart AAAAAAADZQ}{\bkmkend AAAAAAADZQ}
00479             base_type::ptr_ = std::move(r.ptr_);\par
{\bkmkstart AAAAAAADZR}{\bkmkend AAAAAAADZR}
00480             copier_ = std::move(r.copier_);\par
{\bkmkstart AAAAAAADZS}{\bkmkend AAAAAAADZS}
00481             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAADZT}{\bkmkend AAAAAAADZT}
00482         \}\par
{\bkmkstart AAAAAAADZU}{\bkmkend AAAAAAADZU}
00483 {\cf21 #endif}\par
{\bkmkstart AAAAAAADZV}{\bkmkend AAAAAAADZV}
00484 \par
{\bkmkstart AAAAAAADZW}{\bkmkend AAAAAAADZW}
00485         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAADZX}{\bkmkend AAAAAAADZX}
00486         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAADZY}{\bkmkend AAAAAAADZY}
00487             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAADZZ}{\bkmkend AAAAAAADZZ}
00488                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAAEAA}{\bkmkend AAAAAAAEAA}
00489                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAAEAB}{\bkmkend AAAAAAAEAB}
00490             impl_ptr&\par
{\bkmkstart AAAAAAAEAC}{\bkmkend AAAAAAAEAC}
00491         >::type operator= ({\cf17 const} impl_ptr<U, D, C>& u)\par
{\bkmkstart AAAAAAAEAD}{\bkmkend AAAAAAAEAD}
00492         \{\par
{\bkmkstart AAAAAAAEAE}{\bkmkend AAAAAAAEAE}
00493             {\cf19 return} operator=(u.clone());\par
{\bkmkstart AAAAAAAEAF}{\bkmkend AAAAAAAEAF}
00494         \}\par
{\bkmkstart AAAAAAAEAG}{\bkmkend AAAAAAAEAG}
00495 \par
{\bkmkstart AAAAAAAEAH}{\bkmkend AAAAAAAEAH}
00496         {\cf20 //}\par
{\bkmkstart AAAAAAAEAI}{\bkmkend AAAAAAAEAI}
00497 \par
{\bkmkstart AAAAAAAEAJ}{\bkmkend AAAAAAAEAJ}
00498 {\cf21 #ifdef SPIMPL_HAS_AUTO_PTR}\par
{\bkmkstart AAAAAAAEAK}{\bkmkend AAAAAAAEAK}
00499         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAEAL}{\bkmkend AAAAAAAEAL}
00500         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAEAM}{\bkmkend AAAAAAAEAM}
00501             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAEAN}{\bkmkend AAAAAAAEAN}
00502                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAAEAO}{\bkmkend AAAAAAAEAO}
00503             impl_ptr&\par
{\bkmkstart AAAAAAAEAP}{\bkmkend AAAAAAAEAP}
00504         >::type operator= (std::auto_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEAQ}{\bkmkend AAAAAAAEAQ}
00505         \{\par
{\bkmkstart AAAAAAAEAR}{\bkmkend AAAAAAAEAR}
00506             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAAEAS}{\bkmkend AAAAAAAEAS}
00507         \}\par
{\bkmkstart AAAAAAAEAT}{\bkmkend AAAAAAAEAT}
00508 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEAU}{\bkmkend AAAAAAAEAU}
00509 \par
{\bkmkstart AAAAAAAEAV}{\bkmkend AAAAAAAEAV}
00510         {\cf17 template}<{\cf17 class} U>\par
{\bkmkstart AAAAAAAEAW}{\bkmkend AAAAAAAEAW}
00511         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAEAX}{\bkmkend AAAAAAAEAX}
00512             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAEAY}{\bkmkend AAAAAAAEAY}
00513                 && is_default_manageable::value,\par
{\bkmkstart AAAAAAAEAZ}{\bkmkend AAAAAAAEAZ}
00514             impl_ptr&\par
{\bkmkstart AAAAAAAEBA}{\bkmkend AAAAAAAEBA}
00515         >::type operator= (std::unique_ptr<U>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEBB}{\bkmkend AAAAAAAEBB}
00516         \{\par
{\bkmkstart AAAAAAAEBC}{\bkmkend AAAAAAAEBC}
00517             {\cf19 return} operator=(impl_ptr(std::move(u)));\par
{\bkmkstart AAAAAAAEBD}{\bkmkend AAAAAAAEBD}
00518         \}\par
{\bkmkstart AAAAAAAEBE}{\bkmkend AAAAAAAEBE}
00519 \par
{\bkmkstart AAAAAAAEBF}{\bkmkend AAAAAAAEBF}
00520         {\cf17 template}<{\cf17 class} U, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAAEBG}{\bkmkend AAAAAAAEBG}
00521         {\cf17 typename} std::enable_if<\par
{\bkmkstart AAAAAAAEBH}{\bkmkend AAAAAAAEBH}
00522             std::is_convertible<U*, pointer>::value\par
{\bkmkstart AAAAAAAEBI}{\bkmkend AAAAAAAEBI}
00523                 && std::is_convertible<D, deleter_type>::value\par
{\bkmkstart AAAAAAAEBJ}{\bkmkend AAAAAAAEBJ}
00524                 && std::is_convertible<C, copier_type>::value,\par
{\bkmkstart AAAAAAAEBK}{\bkmkend AAAAAAAEBK}
00525             impl_ptr&\par
{\bkmkstart AAAAAAAEBL}{\bkmkend AAAAAAAEBL}
00526         >::type operator= (impl_ptr<U, D, C>&& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEBM}{\bkmkend AAAAAAAEBM}
00527         \{\par
{\bkmkstart AAAAAAAEBN}{\bkmkend AAAAAAAEBN}
00528             base_type::ptr_ = std::move(u.ptr_);\par
{\bkmkstart AAAAAAAEBO}{\bkmkend AAAAAAAEBO}
00529             copier_ = std::move(u.copier_);\par
{\bkmkstart AAAAAAAEBP}{\bkmkend AAAAAAAEBP}
00530             {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEBQ}{\bkmkend AAAAAAAEBQ}
00531         \}\par
{\bkmkstart AAAAAAAEBR}{\bkmkend AAAAAAAEBR}
00532 \par
{\bkmkstart AAAAAAAEBS}{\bkmkend AAAAAAAEBS}
00533         {\cf18 void} swap(impl_ptr& u) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEBT}{\bkmkend AAAAAAAEBT}
00534         \{\par
{\bkmkstart AAAAAAAEBU}{\bkmkend AAAAAAAEBU}
00535             {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAAEBV}{\bkmkend AAAAAAAEBV}
00536             base_type::ptr_.swap(u.ptr_);\par
{\bkmkstart AAAAAAAEBW}{\bkmkend AAAAAAAEBW}
00537             swap(copier_, u.copier_);\par
{\bkmkstart AAAAAAAEBX}{\bkmkend AAAAAAAEBX}
00538         \}\par
{\bkmkstart AAAAAAAEBY}{\bkmkend AAAAAAAEBY}
00539 \par
{\bkmkstart AAAAAAAEBZ}{\bkmkend AAAAAAAEBZ}
00540         impl_ptr clone(){\cf17  const}\par
{\bkmkstart AAAAAAAECA}{\bkmkend AAAAAAAECA}
00541 {\cf17         }\{\par
{\bkmkstart AAAAAAAECB}{\bkmkend AAAAAAAECB}
00542             {\cf19 return} impl_ptr(\par
{\bkmkstart AAAAAAAECC}{\bkmkend AAAAAAAECC}
00543                 base_type::ptr_ ? copier_(base_type::ptr_.get()) : {\cf17 nullptr},\par
{\bkmkstart AAAAAAAECD}{\bkmkend AAAAAAAECD}
00544                 base_type::ptr_.get_deleter(),\par
{\bkmkstart AAAAAAAECE}{\bkmkend AAAAAAAECE}
00545                 copier_);\par
{\bkmkstart AAAAAAAECF}{\bkmkend AAAAAAAECF}
00546         \}\par
{\bkmkstart AAAAAAAECG}{\bkmkend AAAAAAAECG}
00547 \par
{\bkmkstart AAAAAAAECH}{\bkmkend AAAAAAAECH}
00548         {\cf17 const} {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() const SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAAECI}{\bkmkend AAAAAAAECI}
00549         {\cf17 typename} std::remove_reference<copier_type>::type& get_copier() SPIMPL_NOEXCEPT \{ {\cf19 return} copier_; \}\par
{\bkmkstart AAAAAAAECJ}{\bkmkend AAAAAAAECJ}
00550     {\cf17 private}:\par
{\bkmkstart AAAAAAAECK}{\bkmkend AAAAAAAECK}
00551         copier_type copier_;\par
{\bkmkstart AAAAAAAECL}{\bkmkend AAAAAAAECL}
00552     \};\par
{\bkmkstart AAAAAAAECM}{\bkmkend AAAAAAAECM}
00553 \par
{\bkmkstart AAAAAAAECN}{\bkmkend AAAAAAAECN}
00554     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Arguments>\par
{\bkmkstart AAAAAAAECO}{\bkmkend AAAAAAAECO}
00555     {\cf17 inline} impl_ptr<T> make_impl(Arguments&&... args)\par
{\bkmkstart AAAAAAAECP}{\bkmkend AAAAAAAECP}
00556     \{\par
{\bkmkstart AAAAAAAECQ}{\bkmkend AAAAAAAECQ}
00557         {\cf19 return} impl_ptr<T>({\cf17 new} T(std::forward<Arguments>(args)...), &details::default_delete<T>, &details::default_copy<T>);\par
{\bkmkstart AAAAAAAECR}{\bkmkend AAAAAAAECR}
00558     \}\par
{\bkmkstart AAAAAAAECS}{\bkmkend AAAAAAAECS}
00559 \par
{\bkmkstart AAAAAAAECT}{\bkmkend AAAAAAAECT}
00560     {\cf17 template}<{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAAECU}{\bkmkend AAAAAAAECU}
00561     {\cf17 inline} {\cf18 void} swap(impl_ptr<T, D, C>& l,impl_ptr<T, D, C>& r) SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAECV}{\bkmkend AAAAAAAECV}
00562     \{\par
{\bkmkstart AAAAAAAECW}{\bkmkend AAAAAAAECW}
00563         l.swap(r);\par
{\bkmkstart AAAAAAAECX}{\bkmkend AAAAAAAECX}
00564     \}\par
{\bkmkstart AAAAAAAECY}{\bkmkend AAAAAAAECY}
00565 \}\par
{\bkmkstart AAAAAAAECZ}{\bkmkend AAAAAAAECZ}
00566 \par
{\bkmkstart AAAAAAAEDA}{\bkmkend AAAAAAAEDA}
00567 {\cf17 namespace }std \{\par
{\bkmkstart AAAAAAAEDB}{\bkmkend AAAAAAAEDB}
00568     {\cf17 template} <{\cf17 class} T, {\cf17 class} D>\par
{\bkmkstart AAAAAAAEDC}{\bkmkend AAAAAAAEDC}
00569     {\cf17 struct }hash<spimpl ::unique_impl_ptr<T, D>>\par
{\bkmkstart AAAAAAAEDD}{\bkmkend AAAAAAAEDD}
00570     \{\par
{\bkmkstart AAAAAAAEDE}{\bkmkend AAAAAAAEDE}
00571         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAUL" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::unique_impl_ptr<T, D>}}}
 ;\par
{\bkmkstart AAAAAAAEDF}{\bkmkend AAAAAAAEDF}
00572         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAAEDG}{\bkmkend AAAAAAAEDG}
00573 \par
{\bkmkstart AAAAAAAEDH}{\bkmkend AAAAAAAEDH}
00574         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEDI}{\bkmkend AAAAAAAEDI}
00575         \{\par
{\bkmkstart AAAAAAAEDJ}{\bkmkend AAAAAAAEDJ}
00576             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAAEDK}{\bkmkend AAAAAAAEDK}
00577         \}\par
{\bkmkstart AAAAAAAEDL}{\bkmkend AAAAAAAEDL}
00578     \};\par
{\bkmkstart AAAAAAAEDM}{\bkmkend AAAAAAAEDM}
00579 \par
{\bkmkstart AAAAAAAEDN}{\bkmkend AAAAAAAEDN}
00580     {\cf17 template} <{\cf17 class} T, {\cf17 class} D, {\cf17 class} C>\par
{\bkmkstart AAAAAAAEDO}{\bkmkend AAAAAAAEDO}
00581     {\cf17 struct }hash<spimpl ::impl_ptr<T, D, C>>\par
{\bkmkstart AAAAAAAEDP}{\bkmkend AAAAAAAEDP}
00582     \{\par
{\bkmkstart AAAAAAAEDQ}{\bkmkend AAAAAAAEDQ}
00583         {\cf17 using} argument_type = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABFF" }{}}{\fldrslt {\cs37\ul\cf2 spimpl::impl_ptr<T, D, C>}}}
 ;\par
{\bkmkstart AAAAAAAEDR}{\bkmkend AAAAAAAEDR}
00584         {\cf17 using} result_type = size_t;\par
{\bkmkstart AAAAAAAEDS}{\bkmkend AAAAAAAEDS}
00585 \par
{\bkmkstart AAAAAAAEDT}{\bkmkend AAAAAAAEDT}
00586         result_type operator()({\cf17 const} argument_type& p) {\cf17 const} SPIMPL_NOEXCEPT\par
{\bkmkstart AAAAAAAEDU}{\bkmkend AAAAAAAEDU}
00587         \{\par
{\bkmkstart AAAAAAAEDV}{\bkmkend AAAAAAAEDV}
00588             {\cf19 return} hash<typename argument_type::pointer>()(p.get());\par
{\bkmkstart AAAAAAAEDW}{\bkmkend AAAAAAAEDW}
00589         \}\par
{\bkmkstart AAAAAAAEDX}{\bkmkend AAAAAAAEDX}
00590     \};\par
{\bkmkstart AAAAAAAEDY}{\bkmkend AAAAAAAEDY}
00591 \}\par
{\bkmkstart AAAAAAAEDZ}{\bkmkend AAAAAAAEDZ}
00592 \par
{\bkmkstart AAAAAAAEEA}{\bkmkend AAAAAAAEEA}
00593 {\cf21 #endif }{\cf20 // SPIMPLMC_H_}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sstring.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/sstring.hpp}
{\xe \v code/include/sstring.hpp}
{\bkmkstart AAAAAAAEEB}
{\bkmkend AAAAAAAEEB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEEC}{\bkmkend AAAAAAAEEC}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAEED}{\bkmkend AAAAAAAEED}
00002 \par
{\bkmkstart AAAAAAAEEE}{\bkmkend AAAAAAAEEE}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEEF}{\bkmkend AAAAAAAEEF}
00004 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEEG}{\bkmkend AAAAAAAEEG}
00005 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAEEH}{\bkmkend AAAAAAAEEH}
00006 \par
{\bkmkstart AAAAAAAEEI}{\bkmkend AAAAAAAEEI}
00007 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAEEJ}{\bkmkend AAAAAAAEEJ}
00008 \par
{\bkmkstart AAAAAAAEEK}{\bkmkend AAAAAAAEEK}
00009 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAEEL}{\bkmkend AAAAAAAEEL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 00010}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 : {\cf17 public} string \{\par
{\bkmkstart AAAAAAAEEM}{\bkmkend AAAAAAAEEM}
00011 {\cf17 public}:\par
{\bkmkstart AAAAAAAEEN}{\bkmkend AAAAAAAEEN}
00012 \par
{\bkmkstart AAAAAAAEEO}{\bkmkend AAAAAAAEEO}
00013     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
() : string() \{\}\par
{\bkmkstart AAAAAAAEEP}{\bkmkend AAAAAAAEEP}
00014     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf18 string} str) : string(str) \{\};\par
{\bkmkstart AAAAAAAEEQ}{\bkmkend AAAAAAAEEQ}
00015     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
& obj) : string(obj) \{\}\par
{\bkmkstart AAAAAAAEER}{\bkmkend AAAAAAAEER}
00016     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\cf18 char} *src) : string(src) \{\}\par
{\bkmkstart AAAAAAAEES}{\bkmkend AAAAAAAEES}
00017     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf18 char} *src)       : string(src) \{\}\par
{\bkmkstart AAAAAAAEET}{\bkmkend AAAAAAAEET}
00018     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\cf18 string}& str, size_type pos, size_type n) : string(str,pos,n) \{\}\par
{\bkmkstart AAAAAAAEEU}{\bkmkend AAAAAAAEEU}
00019 \par
{\bkmkstart AAAAAAAEEV}{\bkmkend AAAAAAAEEV}
00020     {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 concat({\cf17 const} {\cf18 char} *sep, ...);\par
{\bkmkstart AAAAAAAEEW}{\bkmkend AAAAAAAEEW}
00021     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&   ltrim();\par
{\bkmkstart AAAAAAAEEX}{\bkmkend AAAAAAAEEX}
00022     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&   rtrim();\par
{\bkmkstart AAAAAAAEEY}{\bkmkend AAAAAAAEEY}
00023     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&   trim();\par
{\bkmkstart AAAAAAAEEZ}{\bkmkend AAAAAAAEEZ}
00024     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&   toUpper();\par
{\bkmkstart AAAAAAAEFA}{\bkmkend AAAAAAAEFA}
00025     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&   toLower();\par
{\bkmkstart AAAAAAAEFB}{\bkmkend AAAAAAAEFB}
00026 \par
{\bkmkstart AAAAAAAEFC}{\bkmkend AAAAAAAEFC}
00027     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
*  toString();        \par
{\bkmkstart AAAAAAAEFD}{\bkmkend AAAAAAAEFD}
00028     {\cf17 const} {\cf18 char}*   toChar();\par
{\bkmkstart AAAAAAAEFE}{\bkmkend AAAAAAAEFE}
00029     {\cf18 char}*         toArr();\par
{\bkmkstart AAAAAAAEFF}{\bkmkend AAAAAAAEFF}
00030     {\cf18 bool}  contains({\cf17 const} {\cf18 char} *par);\par
{\bkmkstart AAAAAAAEFG}{\bkmkend AAAAAAAEFG}
00031     {\cf18 bool} makeBoolean();\par
{\bkmkstart AAAAAAAEFH}{\bkmkend AAAAAAAEFH}
00032 \par
{\bkmkstart AAAAAAAEFI}{\bkmkend AAAAAAAEFI}
00033     vector<char *>  tokenize({\cf17 const} {\cf18 char} *pat);\par
{\bkmkstart AAAAAAAEFJ}{\bkmkend AAAAAAAEFJ}
00034     vector<sstring> tokenize({\cf18 string} pat);\par
{\bkmkstart AAAAAAAEFK}{\bkmkend AAAAAAAEFK}
00035     vector<int>     tokenizeNumber({\cf17 const} {\cf18 char}* pat);\par
{\bkmkstart AAAAAAAEFL}{\bkmkend AAAAAAAEFL}
00036     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
         paste({\cf17 const} {\cf18 char} *sep, ...);\par
{\bkmkstart AAAAAAAEFM}{\bkmkend AAAAAAAEFM}
00037 \par
{\bkmkstart AAAAAAAEFN}{\bkmkend AAAAAAAEFN}
00038 {\cf20 /*}\par
{\bkmkstart AAAAAAAEFO}{\bkmkend AAAAAAAEFO}
00039 {\cf20     void tokenizeFree(void **ptr);}\par
{\bkmkstart AAAAAAAEFP}{\bkmkend AAAAAAAEFP}
00040 {\cf20     char** tokenize(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEFQ}{\bkmkend AAAAAAAEFQ}
00041 {\cf20     int** tokenizeNumber(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEFR}{\bkmkend AAAAAAAEFR}
00042 {\cf20 */}\par
{\bkmkstart AAAAAAAEFS}{\bkmkend AAAAAAAEFS}
00043 \};\par
{\bkmkstart AAAAAAAEFT}{\bkmkend AAAAAAAEFT}
00044 {\cf20 /*}\par
{\bkmkstart AAAAAAAEFU}{\bkmkend AAAAAAAEFU}
00045 {\cf20 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAEFV}{\bkmkend AAAAAAAEFV}
00046 {\cf20    #define chdir(a) _chdir(a)}\par
{\bkmkstart AAAAAAAEFW}{\bkmkend AAAAAAAEFW}
00047 {\cf20    #define getcwd(a, b) _getcwd(a, b)}\par
{\bkmkstart AAAAAAAEFX}{\bkmkend AAAAAAAEFX}
00048 {\cf20    #define strdup(a) myStrdup(a)}\par
{\bkmkstart AAAAAAAEFY}{\bkmkend AAAAAAAEFY}
00049 {\cf20 #endif}\par
{\bkmkstart AAAAAAAEFZ}{\bkmkend AAAAAAAEFZ}
00050 {\cf20 }\par
{\bkmkstart AAAAAAAEGA}{\bkmkend AAAAAAAEGA}
00051 {\cf20 using namespace std;}\par
{\bkmkstart AAAAAAAEGB}{\bkmkend AAAAAAAEGB}
00052 {\cf20 }\par
{\bkmkstart AAAAAAAEGC}{\bkmkend AAAAAAAEGC}
00053 {\cf20 namespace jggtools \{}\par
{\bkmkstart AAAAAAAEGD}{\bkmkend AAAAAAAEGD}
00054 {\cf20 char*               myStrdup(const char* s, int size); }\par
{\bkmkstart AAAAAAAEGE}{\bkmkend AAAAAAAEGE}
00055 {\cf20 char*               myStrdup(const char* s);}\par
{\bkmkstart AAAAAAAEGF}{\bkmkend AAAAAAAEGF}
00056 {\cf20 vector<char *>  tokenize(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEGG}{\bkmkend AAAAAAAEGG}
00057 {\cf20 vector<string>  tokenize(string src, const char* pat);}\par
{\bkmkstart AAAAAAAEGH}{\bkmkend AAAAAAAEGH}
00058 {\cf20 vector<int>     tokenizeNumber(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEGI}{\bkmkend AAAAAAAEGI}
00059 {\cf20 \}*/}            \par
{\bkmkstart AAAAAAAEGJ}{\bkmkend AAAAAAAEGJ}
00060 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sstring.hpp\par \pard\plain 
{\tc\tcl2 \v old/sstring.hpp}
{\xe \v old/sstring.hpp}
{\bkmkstart AAAAAAAEGK}
{\bkmkend AAAAAAAEGK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEGL}{\bkmkend AAAAAAAEGL}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAEGM}{\bkmkend AAAAAAAEGM}
00002 \par
{\bkmkstart AAAAAAAEGN}{\bkmkend AAAAAAAEGN}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEGO}{\bkmkend AAAAAAAEGO}
00004 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEGP}{\bkmkend AAAAAAAEGP}
00005 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAEGQ}{\bkmkend AAAAAAAEGQ}
00006 \par
{\bkmkstart AAAAAAAEGR}{\bkmkend AAAAAAAEGR}
00007 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAEGS}{\bkmkend AAAAAAAEGS}
00008 \par
{\bkmkstart AAAAAAAEGT}{\bkmkend AAAAAAAEGT}
00009 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAEGU}{\bkmkend AAAAAAAEGU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 00010}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 : {\cf17 public} string \{\par
{\bkmkstart AAAAAAAEGW}{\bkmkend AAAAAAAEGW}
00011 {\cf17 public}:\par
{\bkmkstart AAAAAAAEGX}{\bkmkend AAAAAAAEGX}
00012 \par
{\bkmkstart AAAAAAAEGY}{\bkmkend AAAAAAAEGY}
00013     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
() : string() \{\}\par
{\bkmkstart AAAAAAAEGZ}{\bkmkend AAAAAAAEGZ}
00014     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf18 string} str) : string(str) \{\};\par
{\bkmkstart AAAAAAAEHA}{\bkmkend AAAAAAAEHA}
00015     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
& obj) : string(obj) \{\}\par
{\bkmkstart AAAAAAAEHB}{\bkmkend AAAAAAAEHB}
00016     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\cf18 char} *src) : string(src) \{\}\par
{\bkmkstart AAAAAAAEHC}{\bkmkend AAAAAAAEHC}
00017     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf18 char} *src)       : string(src) \{\}\par
{\bkmkstart AAAAAAAEHD}{\bkmkend AAAAAAAEHD}
00018     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
({\cf17 const} {\cf18 string}& str, size_type pos, size_type n) : string(str,pos,n) \{\}\par
{\bkmkstart AAAAAAAEHE}{\bkmkend AAAAAAAEHE}
00019 \par
{\bkmkstart AAAAAAAEHF}{\bkmkend AAAAAAAEHF}
00020     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&             ltrim();\par
{\bkmkstart AAAAAAAEHG}{\bkmkend AAAAAAAEHG}
00021     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&             rtrim();\par
{\bkmkstart AAAAAAAEHH}{\bkmkend AAAAAAAEHH}
00022     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&             trim();\par
{\bkmkstart AAAAAAAEHI}{\bkmkend AAAAAAAEHI}
00023     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&             toUpper();\par
{\bkmkstart AAAAAAAEHJ}{\bkmkend AAAAAAAEHJ}
00024     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
&             toLower();\par
{\bkmkstart AAAAAAAEHK}{\bkmkend AAAAAAAEHK}
00025     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
*     makeLower();\par
{\bkmkstart AAAAAAAEHL}{\bkmkend AAAAAAAEHL}
00026     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
*     makeUpper();\par
{\bkmkstart AAAAAAAEHM}{\bkmkend AAAAAAAEHM}
00027 \par
{\bkmkstart AAAAAAAEHN}{\bkmkend AAAAAAAEHN}
00028     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEGV" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
*  toString();        \par
{\bkmkstart AAAAAAAEHO}{\bkmkend AAAAAAAEHO}
00029     {\cf17 const} {\cf18 char}*   toChar();\par
{\bkmkstart AAAAAAAEHP}{\bkmkend AAAAAAAEHP}
00030     {\cf18 char}*         toArr();\par
{\bkmkstart AAAAAAAEHQ}{\bkmkend AAAAAAAEHQ}
00031     {\cf18 bool}  contains({\cf17 const} {\cf18 char} *par);\par
{\bkmkstart AAAAAAAEHR}{\bkmkend AAAAAAAEHR}
00032     {\cf18 bool} makeBoolean();\par
{\bkmkstart AAAAAAAEHS}{\bkmkend AAAAAAAEHS}
00033 \par
{\bkmkstart AAAAAAAEHT}{\bkmkend AAAAAAAEHT}
00034     vector<char *>  tokenize({\cf17 const} {\cf18 char} *pat);\par
{\bkmkstart AAAAAAAEHU}{\bkmkend AAAAAAAEHU}
00035     vector<sstring> tokenize({\cf18 string} pat);\par
{\bkmkstart AAAAAAAEHV}{\bkmkend AAAAAAAEHV}
00036 {\cf20 /*}\par
{\bkmkstart AAAAAAAEHW}{\bkmkend AAAAAAAEHW}
00037 {\cf20     void tokenizeFree(void **ptr);}\par
{\bkmkstart AAAAAAAEHX}{\bkmkend AAAAAAAEHX}
00038 {\cf20     char** tokenize(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEHY}{\bkmkend AAAAAAAEHY}
00039 {\cf20     int** tokenizeNumber(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEHZ}{\bkmkend AAAAAAAEHZ}
00040 {\cf20 */}\par
{\bkmkstart AAAAAAAEIA}{\bkmkend AAAAAAAEIA}
00041 \};\par
{\bkmkstart AAAAAAAEIB}{\bkmkend AAAAAAAEIB}
00042 {\cf20 /*}\par
{\bkmkstart AAAAAAAEIC}{\bkmkend AAAAAAAEIC}
00043 {\cf20 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAEID}{\bkmkend AAAAAAAEID}
00044 {\cf20    #define chdir(a) _chdir(a)}\par
{\bkmkstart AAAAAAAEIE}{\bkmkend AAAAAAAEIE}
00045 {\cf20    #define getcwd(a, b) _getcwd(a, b)}\par
{\bkmkstart AAAAAAAEIF}{\bkmkend AAAAAAAEIF}
00046 {\cf20    #define strdup(a) myStrdup(a)}\par
{\bkmkstart AAAAAAAEIG}{\bkmkend AAAAAAAEIG}
00047 {\cf20 #endif}\par
{\bkmkstart AAAAAAAEIH}{\bkmkend AAAAAAAEIH}
00048 {\cf20 }\par
{\bkmkstart AAAAAAAEII}{\bkmkend AAAAAAAEII}
00049 {\cf20 using namespace std;}\par
{\bkmkstart AAAAAAAEIJ}{\bkmkend AAAAAAAEIJ}
00050 {\cf20 }\par
{\bkmkstart AAAAAAAEIK}{\bkmkend AAAAAAAEIK}
00051 {\cf20 namespace jggtools \{}\par
{\bkmkstart AAAAAAAEIL}{\bkmkend AAAAAAAEIL}
00052 {\cf20 char*               myStrdup(const char* s, int size); }\par
{\bkmkstart AAAAAAAEIM}{\bkmkend AAAAAAAEIM}
00053 {\cf20 char*               myStrdup(const char* s);}\par
{\bkmkstart AAAAAAAEIN}{\bkmkend AAAAAAAEIN}
00054 {\cf20 vector<char *>  tokenize(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEIO}{\bkmkend AAAAAAAEIO}
00055 {\cf20 vector<string>  tokenize(string src, const char* pat);}\par
{\bkmkstart AAAAAAAEIP}{\bkmkend AAAAAAAEIP}
00056 {\cf20 vector<int>     tokenizeNumber(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAEIQ}{\bkmkend AAAAAAAEIQ}
00057 {\cf20 \}*/}            \par
{\bkmkstart AAAAAAAEIR}{\bkmkend AAAAAAAEIR}
00058 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
time.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/time.hpp}
{\xe \v code/include/time.hpp}
{\bkmkstart AAAAAAAEIS}
{\bkmkend AAAAAAAEIS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEIT}{\bkmkend AAAAAAAEIT}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAEIU}{\bkmkend AAAAAAAEIU}
00002 \par
{\bkmkstart AAAAAAAEIV}{\bkmkend AAAAAAAEIV}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEIW}{\bkmkend AAAAAAAEIW}
00004 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEIX}{\bkmkend AAAAAAAEIX}
00005 \par
{\bkmkstart AAAAAAAEIY}{\bkmkend AAAAAAAEIY}
00006 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAEIZ}{\bkmkend AAAAAAAEIZ}
00007 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAEJA}{\bkmkend AAAAAAAEJA}
00008 {\cf21 #include "datetimebase.hpp"}\par
{\bkmkstart AAAAAAAEJB}{\bkmkend AAAAAAAEJB}
00009 {\cf21 #include "time.hpp"}\par
{\bkmkstart AAAAAAAEJC}{\bkmkend AAAAAAAEJC}
00010 \par
{\bkmkstart AAAAAAAEJD}{\bkmkend AAAAAAAEJD}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAEJE}{\bkmkend AAAAAAAEJE}
00012 \par
{\bkmkstart AAAAAAAEJF}{\bkmkend AAAAAAAEJF}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAEJG}{\bkmkend AAAAAAAEJG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 00014}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
 \{\par
{\bkmkstart AAAAAAAEJI}{\bkmkend AAAAAAAEJI}
00015 {\cf17 public}:\par
{\bkmkstart AAAAAAAEJJ}{\bkmkend AAAAAAAEJJ}
00016    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
() = {\cf19 default};\par
{\bkmkstart AAAAAAAEJK}{\bkmkend AAAAAAAEJK}
00017    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
& src);\par
{\bkmkstart AAAAAAAEJL}{\bkmkend AAAAAAAEJL}
00018    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
({\cf18 string} str);\par
{\bkmkstart AAAAAAAEJM}{\bkmkend AAAAAAAEJM}
00019    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEJH" }{}}{\fldrslt {\cs37\ul\cf2 Time}}}
({\cf17 const} {\cf18 char} *str);\par
{\bkmkstart AAAAAAAEJN}{\bkmkend AAAAAAAEJN}
00020 \par
{\bkmkstart AAAAAAAEJO}{\bkmkend AAAAAAAEJO}
00021    {\cf17 struct }tm*  getTM();\par
{\bkmkstart AAAAAAAEJP}{\bkmkend AAAAAAAEJP}
00022    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     toString({\cf17 const} {\cf18 char}* fmt = {\cf22 "%X"});\par
{\bkmkstart AAAAAAAEJQ}{\bkmkend AAAAAAAEJQ}
00023    {\cf17 const} {\cf18 char}* toChar  ({\cf17 const} {\cf18 char}* fmt = {\cf22 "%X"});\par
{\bkmkstart AAAAAAAEJR}{\bkmkend AAAAAAAEJR}
00024 {\cf17 private}:\par
{\bkmkstart AAAAAAAEJS}{\bkmkend AAAAAAAEJS}
00025    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
 dtb = {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAEG" }{}}{\fldrslt {\cs37\ul\cf2 DateTimeBase}}}
();\par
{\bkmkstart AAAAAAAEJT}{\bkmkend AAAAAAAEJT}
00026 \};\par
{\bkmkstart AAAAAAAEJU}{\bkmkend AAAAAAAEJU}
00027 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
timestamp.hpp\par \pard\plain 
{\tc\tcl2 \v code/include/timestamp.hpp}
{\xe \v code/include/timestamp.hpp}
{\bkmkstart AAAAAAAEJV}
{\bkmkend AAAAAAAEJV}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEJW}{\bkmkend AAAAAAAEJW}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAEJX}{\bkmkend AAAAAAAEJX}
00002 \par
{\bkmkstart AAAAAAAEJY}{\bkmkend AAAAAAAEJY}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAEJZ}{\bkmkend AAAAAAAEJZ}
00004 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAEKA}{\bkmkend AAAAAAAEKA}
00005 \par
{\bkmkstart AAAAAAAEKB}{\bkmkend AAAAAAAEKB}
00006 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAEKC}{\bkmkend AAAAAAAEKC}
00007 {\cf21 #include "jggtools.hpp"}\par
{\bkmkstart AAAAAAAEKD}{\bkmkend AAAAAAAEKD}
00008 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAEKE}{\bkmkend AAAAAAAEKE}
00009 {\cf21 #include "date.hpp"}\par
{\bkmkstart AAAAAAAEKF}{\bkmkend AAAAAAAEKF}
00010 {\cf21 #include "time.hpp"}\par
{\bkmkstart AAAAAAAEKG}{\bkmkend AAAAAAAEKG}
00011 {\cf21 #include "datetime.hpp"}\par
{\bkmkstart AAAAAAAEKH}{\bkmkend AAAAAAAEKH}
00012 \par
{\bkmkstart AAAAAAAEKI}{\bkmkend AAAAAAAEKI}
00013 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAEKJ}{\bkmkend AAAAAAAEKJ}
00014 \par
{\bkmkstart AAAAAAAEKK}{\bkmkend AAAAAAAEKK}
00015 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAEKL}{\bkmkend AAAAAAAEKL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 00016}}}
    {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
 \{\par
{\bkmkstart AAAAAAAEKN}{\bkmkend AAAAAAAEKN}
00017    {\cf17 public}:\par
{\bkmkstart AAAAAAAEKO}{\bkmkend AAAAAAAEKO}
00018       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
();\par
{\bkmkstart AAAAAAAEKP}{\bkmkend AAAAAAAEKP}
00019       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     str);\par
{\bkmkstart AAAAAAAEKQ}{\bkmkend AAAAAAAEKQ}
00020       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAEKM" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp}}}
({\cf17 const} {\cf18 char}* str);\par
{\bkmkstart AAAAAAAEKR}{\bkmkend AAAAAAAEKR}
00021       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 toString();\par
{\bkmkstart AAAAAAAEKS}{\bkmkend AAAAAAAEKS}
00022 {\cf20 //      Date   getDate();}\par
{\bkmkstart AAAAAAAEKT}{\bkmkend AAAAAAAEKT}
00023 {\cf20 //      Time   getTime();}\par
{\bkmkstart AAAAAAAEKU}{\bkmkend AAAAAAAEKU}
00024 {\cf20 //      struct tm *getTM();}\par
{\bkmkstart AAAAAAAEKV}{\bkmkend AAAAAAAEKV}
00025    {\cf17 private}:\par
{\bkmkstart AAAAAAAEKW}{\bkmkend AAAAAAAEKW}
00026        {\cf17 static} {\cf18 long} {\cf18 int} uSec;\par
{\bkmkstart AAAAAAAEKX}{\bkmkend AAAAAAAEKX}
00027    \};\par
{\bkmkstart AAAAAAAEKY}{\bkmkend AAAAAAAEKY}
00028 \par
{\bkmkstart AAAAAAAEKZ}{\bkmkend AAAAAAAEKZ}
00029 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
date.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/date.cpp}
{\xe \v code/src/date.cpp}
{\bkmkstart AAAAAAAELA}
{\bkmkend AAAAAAAELA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAELB}{\bkmkend AAAAAAAELB}
00001 {\cf21 #include <time.h>}\par
{\bkmkstart AAAAAAAELC}{\bkmkend AAAAAAAELC}
00002 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAELD}{\bkmkend AAAAAAAELD}
00003 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAELE}{\bkmkend AAAAAAAELE}
00004 \par
{\bkmkstart AAAAAAAELF}{\bkmkend AAAAAAAELF}
00005 {\cf21 #include "config.h"} \par
{\bkmkstart AAAAAAAELG}{\bkmkend AAAAAAAELG}
00006 \par
{\bkmkstart AAAAAAAELH}{\bkmkend AAAAAAAELH}
00007 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAELI}{\bkmkend AAAAAAAELI}
00008 {\cf21 #include "date.hpp"}\par
{\bkmkstart AAAAAAAELJ}{\bkmkend AAAAAAAELJ}
00009 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAELK}{\bkmkend AAAAAAAELK}
00010 \par
{\bkmkstart AAAAAAAELL}{\bkmkend AAAAAAAELL}
00011 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAELM}{\bkmkend AAAAAAAELM}
00012 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAELN}{\bkmkend AAAAAAAELN}
00013 {\cf21 #endif}\par
{\bkmkstart AAAAAAAELO}{\bkmkend AAAAAAAELO}
00014 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAELP}{\bkmkend AAAAAAAELP}
00015 \par
{\bkmkstart AAAAAAAELQ}{\bkmkend AAAAAAAELQ}
00016 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAELR}{\bkmkend AAAAAAAELR}
00017 {\cf17 class }Date::DateImpl \{\par
{\bkmkstart AAAAAAAELS}{\bkmkend AAAAAAAELS}
00018 {\cf17 public}:\par
{\bkmkstart AAAAAAAELT}{\bkmkend AAAAAAAELT}
00019    DateImpl() \{\}\par
{\bkmkstart AAAAAAAELU}{\bkmkend AAAAAAAELU}
00020    DateImpl(sstring str, {\cf18 int} fmt) \{\par
{\bkmkstart AAAAAAAELV}{\bkmkend AAAAAAAELV}
00021        free(ptm);\par
{\bkmkstart AAAAAAAELW}{\bkmkend AAAAAAAELW}
00022        dtb.validateDate(str.c_str(), fmt);\par
{\bkmkstart AAAAAAAELX}{\bkmkend AAAAAAAELX}
00023    \}\par
{\bkmkstart AAAAAAAELY}{\bkmkend AAAAAAAELY}
00024    {\cf18 int}         getYear()  \{ {\cf19 return} ptm->tm_year + 1900; \}\par
{\bkmkstart AAAAAAAELZ}{\bkmkend AAAAAAAELZ}
00025    {\cf18 int}         getMonth() \{ {\cf19 return} ptm->tm_mon  + 1;    \}\par
{\bkmkstart AAAAAAAEMA}{\bkmkend AAAAAAAEMA}
00026    {\cf18 int}         getDay()   \{ {\cf19 return} ptm->tm_mday;        \}\par
{\bkmkstart AAAAAAAEMB}{\bkmkend AAAAAAAEMB}
00027    {\cf17 struct }tm*  getTM() \{ {\cf19 return} ptm; \}\par
{\bkmkstart AAAAAAAEMC}{\bkmkend AAAAAAAEMC}
00028    sstring     toString({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} dtb.format(fmt);         \}\par
{\bkmkstart AAAAAAAEMD}{\bkmkend AAAAAAAEMD}
00029    {\cf17 const} {\cf18 char}* toChar  ({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} strdup(dtb.format(fmt).c_str()); \}\par
{\bkmkstart AAAAAAAEME}{\bkmkend AAAAAAAEME}
00030 {\cf20 //   ~DateImpl() \{ free(ptm); \}}\par
{\bkmkstart AAAAAAAEMF}{\bkmkend AAAAAAAEMF}
00031 {\cf17 private}:\par
{\bkmkstart AAAAAAAEMG}{\bkmkend AAAAAAAEMG}
00032    DateTimeBase dtb = DateTimeBase();\par
{\bkmkstart AAAAAAAEMH}{\bkmkend AAAAAAAEMH}
00033    {\cf17 struct }tm *ptm = dtb.getTM();\par
{\bkmkstart AAAAAAAEMI}{\bkmkend AAAAAAAEMI}
00034 \};\par
{\bkmkstart AAAAAAAEMJ}{\bkmkend AAAAAAAEMJ}
00035 Date::Date()                 : impl_(new DateImpl()) \{\}\par
{\bkmkstart AAAAAAAEMK}{\bkmkend AAAAAAAEMK}
00036 Date::Date({\cf17 const} Date& src) \{\par
{\bkmkstart AAAAAAAEML}{\bkmkend AAAAAAAEML}
00037 {\cf20 //      struct tm *tmp = src.ptm;}\par
{\bkmkstart AAAAAAAEMM}{\bkmkend AAAAAAAEMM}
00038 {\cf20 //      memcpy(ptm,src.getTM(),sizeof(struct tm)); }\par
{\bkmkstart AAAAAAAEMN}{\bkmkend AAAAAAAEMN}
00039 \}\par
{\bkmkstart AAAAAAAEMO}{\bkmkend AAAAAAAEMO}
00040    Date::Date(sstring str, {\cf18 int} fmt)  : impl_(new DateImpl(str, fmt)) \{\}\par
{\bkmkstart AAAAAAAEMP}{\bkmkend AAAAAAAEMP}
00041 {\cf20 //       free(ptm);}\par
{\bkmkstart AAAAAAAEMQ}{\bkmkend AAAAAAAEMQ}
00042 {\cf20 //       dtb.validateDate(str.c_str(), fmt);}\par
{\bkmkstart AAAAAAAEMR}{\bkmkend AAAAAAAEMR}
00043 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAEMS}{\bkmkend AAAAAAAEMS}
00044    Date::Date({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt) : Date (sstring(str), fmt) \{\}\par
{\bkmkstart AAAAAAAEMT}{\bkmkend AAAAAAAEMT}
00045    {\cf18 int}         Date::getYear()  \{ {\cf19 return} impl_->getYear(); \} {\cf20 // ptm->tm_year + 1900; \}}\par
{\bkmkstart AAAAAAAEMU}{\bkmkend AAAAAAAEMU}
00046    {\cf18 int}         Date::getMonth() \{ {\cf19 return} impl_->getMonth(); \} {\cf20 //ptm->tm_mon  + 1;    \}}\par
{\bkmkstart AAAAAAAEMV}{\bkmkend AAAAAAAEMV}
00047    {\cf18 int}         Date::getDay()   \{ {\cf19 return} impl_->getDay(); \} {\cf20 //ptm->tm_mday;        \}}\par
{\bkmkstart AAAAAAAEMW}{\bkmkend AAAAAAAEMW}
00048    {\cf17 struct }tm*  Date::getTM() \{ {\cf19 return} impl_->getTM(); \}\par
{\bkmkstart AAAAAAAEMX}{\bkmkend AAAAAAAEMX}
00049    sstring     Date::toString({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} impl_->toString(fmt); \} {\cf20 //dtb.format(fmt);         \}}\par
{\bkmkstart AAAAAAAEMY}{\bkmkend AAAAAAAEMY}
00050    {\cf17 const} {\cf18 char}* Date::toChar  ({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} impl_->toChar(fmt);   \} {\cf20 //dtb.format(fmt).c_str(); \}}\par
{\bkmkstart AAAAAAAEMZ}{\bkmkend AAAAAAAEMZ}
00051                Date::~Date() = {\cf19 default};\par
{\bkmkstart AAAAAAAENA}{\bkmkend AAAAAAAENA}
00052 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
datetime.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/datetime.cpp}
{\xe \v code/src/datetime.cpp}
{\bkmkstart AAAAAAAENB}
{\bkmkend AAAAAAAENB}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAENC}{\bkmkend AAAAAAAENC}
00001 {\cf21 #include <locale>}\par
{\bkmkstart AAAAAAAEND}{\bkmkend AAAAAAAEND}
00002 \par
{\bkmkstart AAAAAAAENE}{\bkmkend AAAAAAAENE}
00003 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAENF}{\bkmkend AAAAAAAENF}
00004 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAENG}{\bkmkend AAAAAAAENG}
00005 {\cf21 #endif}\par
{\bkmkstart AAAAAAAENH}{\bkmkend AAAAAAAENH}
00006 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAENI}{\bkmkend AAAAAAAENI}
00007 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAENJ}{\bkmkend AAAAAAAENJ}
00008 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAENK}{\bkmkend AAAAAAAENK}
00009 {\cf21 #include "datetimebase.hpp"}\par
{\bkmkstart AAAAAAAENL}{\bkmkend AAAAAAAENL}
00010 {\cf21 #include "date.hpp"}\par
{\bkmkstart AAAAAAAENM}{\bkmkend AAAAAAAENM}
00011 {\cf21 #include "time.hpp"}\par
{\bkmkstart AAAAAAAENN}{\bkmkend AAAAAAAENN}
00012 \par
{\bkmkstart AAAAAAAENO}{\bkmkend AAAAAAAENO}
00013 {\cf21 #include "datetime.hpp"}\par
{\bkmkstart AAAAAAAENP}{\bkmkend AAAAAAAENP}
00014 \par
{\bkmkstart AAAAAAAENQ}{\bkmkend AAAAAAAENQ}
00015 \par
{\bkmkstart AAAAAAAENR}{\bkmkend AAAAAAAENR}
00016 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAENS}{\bkmkend AAAAAAAENS}
00017 \par
{\bkmkstart AAAAAAAENT}{\bkmkend AAAAAAAENT}
00018 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAENU}{\bkmkend AAAAAAAENU}
00019 {\cf17 class }DateTime::DateTimeImpl \{\par
{\bkmkstart AAAAAAAENV}{\bkmkend AAAAAAAENV}
00020 {\cf17 public}:\par
{\bkmkstart AAAAAAAENW}{\bkmkend AAAAAAAENW}
00021    DateTimeImpl() \{\par
{\bkmkstart AAAAAAAENX}{\bkmkend AAAAAAAENX}
00022    \}\par
{\bkmkstart AAAAAAAENY}{\bkmkend AAAAAAAENY}
00023    DateTimeImpl(sstring str) \{\par
{\bkmkstart AAAAAAAENZ}{\bkmkend AAAAAAAENZ}
00024       vector<sstring> toks = str.tokenize(sstring({\cf22 "[ \\t]\{1\}"}));\par
{\bkmkstart AAAAAAAEOA}{\bkmkend AAAAAAAEOA}
00025       {\cf19 if} (toks.size() > 2) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATETIME, str.c_str());\par
{\bkmkstart AAAAAAAEOB}{\bkmkend AAAAAAAEOB}
00026       {\cf19 if} (toks.size() == 2) \{\par
{\bkmkstart AAAAAAAEOC}{\bkmkend AAAAAAAEOC}
00027           mDate = {\cf17 new} Date(toks[0], time_base::dateorder::ymd);\par
{\bkmkstart AAAAAAAEOD}{\bkmkend AAAAAAAEOD}
00028           mTime = {\cf17 new} Time(toks[1]);\par
{\bkmkstart AAAAAAAEOE}{\bkmkend AAAAAAAEOE}
00029       \}\par
{\bkmkstart AAAAAAAEOF}{\bkmkend AAAAAAAEOF}
00030    \}\par
{\bkmkstart AAAAAAAEOG}{\bkmkend AAAAAAAEOG}
00031    ~DateTimeImpl() \{\par
{\bkmkstart AAAAAAAEOH}{\bkmkend AAAAAAAEOH}
00032    \};\par
{\bkmkstart AAAAAAAEOI}{\bkmkend AAAAAAAEOI}
00033    sstring     toString() \{ {\cf19 return} dtb.format({\cf22 "%F %X"});         \}\par
{\bkmkstart AAAAAAAEOJ}{\bkmkend AAAAAAAEOJ}
00034    {\cf17 const} {\cf18 char}* toChar()   \{ {\cf19 return} strdup((dtb.format({\cf22 "%F %X"})).c_str()); \}\par
{\bkmkstart AAAAAAAEOK}{\bkmkend AAAAAAAEOK}
00035 {\cf17 private}:\par
{\bkmkstart AAAAAAAEOL}{\bkmkend AAAAAAAEOL}
00036     DateTimeBase dtb = DateTimeBase();\par
{\bkmkstart AAAAAAAEOM}{\bkmkend AAAAAAAEOM}
00037     Date *mDate = {\cf17 nullptr};\par
{\bkmkstart AAAAAAAEON}{\bkmkend AAAAAAAEON}
00038     Time *mTime = {\cf17 nullptr}; \par
{\bkmkstart AAAAAAAEOO}{\bkmkend AAAAAAAEOO}
00039 \};\par
{\bkmkstart AAAAAAAEOP}{\bkmkend AAAAAAAEOP}
00040    DateTime::DateTime () : impl_(new DateTimeImpl(), [](DateTimeImpl *impl) \{ {\cf17 delete} impl; \}) \{\}\par
{\bkmkstart AAAAAAAEOQ}{\bkmkend AAAAAAAEOQ}
00041    DateTime::DateTime (sstring str) : impl_(new DateTimeImpl(str), [](DateTimeImpl *impl) \{ {\cf17 delete} impl; \}) \{\}\par
{\bkmkstart AAAAAAAEOR}{\bkmkend AAAAAAAEOR}
00042    DateTime::DateTime ({\cf17 const} {\cf18 char} * str) : DateTime(sstring(str)) \{\}\par
{\bkmkstart AAAAAAAEOS}{\bkmkend AAAAAAAEOS}
00043    sstring     DateTime::toString() \{ {\cf19 return} impl_->toString(); \} {\cf20 // dtb.format("%F %X");         \}}\par
{\bkmkstart AAAAAAAEOT}{\bkmkend AAAAAAAEOT}
00044    {\cf17 const} {\cf18 char}* DateTime::toChar()   \{ {\cf19 return} impl_->toChar(); \}    {\cf20 // strdup((dtb.format("%F %X")).c_str()); \}}\par
{\bkmkstart AAAAAAAEOU}{\bkmkend AAAAAAAEOU}
00045    DateTime::~DateTime() = {\cf19 default};\par
{\bkmkstart AAAAAAAEOV}{\bkmkend AAAAAAAEOV}
00046 \}\par
{\bkmkstart AAAAAAAEOW}{\bkmkend AAAAAAAEOW}
00047 \par
{\bkmkstart AAAAAAAEOX}{\bkmkend AAAAAAAEOX}
00048 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
datetimebase.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/datetimebase.cpp}
{\xe \v code/src/datetimebase.cpp}
{\bkmkstart AAAAAAAEOY}
{\bkmkend AAAAAAAEOY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAEOZ}{\bkmkend AAAAAAAEOZ}
00001 {\cf21 #include <ctime>}\par
{\bkmkstart AAAAAAAEPA}{\bkmkend AAAAAAAEPA}
00002 {\cf21 #include <cstring>}\par
{\bkmkstart AAAAAAAEPB}{\bkmkend AAAAAAAEPB}
00003 \par
{\bkmkstart AAAAAAAEPC}{\bkmkend AAAAAAAEPC}
00004 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAEPD}{\bkmkend AAAAAAAEPD}
00005 \par
{\bkmkstart AAAAAAAEPE}{\bkmkend AAAAAAAEPE}
00006 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAEPF}{\bkmkend AAAAAAAEPF}
00007 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAEPG}{\bkmkend AAAAAAAEPG}
00008 {\cf21 #include "datetimebase.hpp"}\par
{\bkmkstart AAAAAAAEPH}{\bkmkend AAAAAAAEPH}
00009 {\cf21 #include <locale>}\par
{\bkmkstart AAAAAAAEPI}{\bkmkend AAAAAAAEPI}
00010 \par
{\bkmkstart AAAAAAAEPJ}{\bkmkend AAAAAAAEPJ}
00011 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAEPK}{\bkmkend AAAAAAAEPK}
00012 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAEPL}{\bkmkend AAAAAAAEPL}
00013 {\cf21 #endif}\par
{\bkmkstart AAAAAAAEPM}{\bkmkend AAAAAAAEPM}
00014 \par
{\bkmkstart AAAAAAAEPN}{\bkmkend AAAAAAAEPN}
00015 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAEPO}{\bkmkend AAAAAAAEPO}
00016    DateTimeBase::DateTimeBase() \{\par
{\bkmkstart AAAAAAAEPP}{\bkmkend AAAAAAAEPP}
00017       time_t now = time(0);\par
{\bkmkstart AAAAAAAEPQ}{\bkmkend AAAAAAAEPQ}
00018       memcpy(&mtm, localtime(&now), {\cf17 sizeof}({\cf17 struct} tm));\par
{\bkmkstart AAAAAAAEPR}{\bkmkend AAAAAAAEPR}
00019    \}\par
{\bkmkstart AAAAAAAEPS}{\bkmkend AAAAAAAEPS}
00020    DateTimeBase& DateTimeBase::setTM({\cf17 struct} tm *ptm) \{\par
{\bkmkstart AAAAAAAEPT}{\bkmkend AAAAAAAEPT}
00021       memcpy(&mtm, ptm, {\cf17 sizeof}({\cf17 struct} tm));\par
{\bkmkstart AAAAAAAEPU}{\bkmkend AAAAAAAEPU}
00022       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEPV}{\bkmkend AAAAAAAEPV}
00023    \}\par
{\bkmkstart AAAAAAAEPW}{\bkmkend AAAAAAAEPW}
00024    {\cf17 struct }tm* DateTimeBase::getTM() \{ {\cf19 return} &mtm; \}\par
{\bkmkstart AAAAAAAEPX}{\bkmkend AAAAAAAEPX}
00025    {\cf18 void} DateTimeBase::validateDate({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt) \{\par
{\bkmkstart AAAAAAAEPY}{\bkmkend AAAAAAAEPY}
00026 {\cf20 //    time_base::dateorder d;}\par
{\bkmkstart AAAAAAAEPZ}{\bkmkend AAAAAAAEPZ}
00027       vector<int> res = sstring(str).tokenizeNumber({\cf22 "^[0-9]+[/-][0-9]+[/-][0-9]+$"});\par
{\bkmkstart AAAAAAAEQA}{\bkmkend AAAAAAAEQA}
00028       {\cf19 if} (res.size() != 3) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAEQB}{\bkmkend AAAAAAAEQB}
00029       fillTmDate(str, fmt);\par
{\bkmkstart AAAAAAAEQC}{\bkmkend AAAAAAAEQC}
00030       validateDateValues(str);\par
{\bkmkstart AAAAAAAEQD}{\bkmkend AAAAAAAEQD}
00031       {\cf20 // return &mtm;}\par
{\bkmkstart AAAAAAAEQE}{\bkmkend AAAAAAAEQE}
00032     \}\par
{\bkmkstart AAAAAAAEQF}{\bkmkend AAAAAAAEQF}
00033    {\cf18 void} DateTimeBase::fillTmDate({\cf17 const} {\cf18 char} *str, {\cf18 int} fmt) \{\par
{\bkmkstart AAAAAAAEQG}{\bkmkend AAAAAAAEQG}
00034        vector<int> res = sstring(str).tokenizeNumber(({\cf17 const} {\cf18 char}*){\cf22 "[/-]"});\par
{\bkmkstart AAAAAAAEQH}{\bkmkend AAAAAAAEQH}
00035        time_base::dateorder d;\par
{\bkmkstart AAAAAAAEQI}{\bkmkend AAAAAAAEQI}
00036        d = (fmt == -1) ? use_facet<time_get<char>>(locale()).date_order() \par
{\bkmkstart AAAAAAAEQJ}{\bkmkend AAAAAAAEQJ}
00037                        : {\cf17 static_cast<}time_base::dateorder{\cf17 >}(fmt);\par
{\bkmkstart AAAAAAAEQK}{\bkmkend AAAAAAAEQK}
00038 \par
{\bkmkstart AAAAAAAEQL}{\bkmkend AAAAAAAEQL}
00039        {\cf19 switch} (d) \{\par
{\bkmkstart AAAAAAAEQM}{\bkmkend AAAAAAAEQM}
00040            {\cf19 case} time_base::dmy: mtm.tm_mday = res[0]; mtm.tm_mon = res[1] - 1; mtm.tm_year = res[2] - 1900; {\cf19 break};\par
{\bkmkstart AAAAAAAEQN}{\bkmkend AAAAAAAEQN}
00041            {\cf19 case} time_base::mdy: mtm.tm_mday = res[1]; mtm.tm_mon = res[0] - 1; mtm.tm_year = res[2] - 1900; {\cf19 break};\par
{\bkmkstart AAAAAAAEQO}{\bkmkend AAAAAAAEQO}
00042            {\cf19 case} time_base::ymd: mtm.tm_mday = res[2]; mtm.tm_mon = res[1] - 1; mtm.tm_year = res[2] - 1900; {\cf19 break};\par
{\bkmkstart AAAAAAAEQP}{\bkmkend AAAAAAAEQP}
00043            {\cf19 case} time_base::ydm: mtm.tm_mday = res[2]; mtm.tm_mon = res[2] - 1; mtm.tm_year = res[0] - 1900; {\cf19 break};\par
{\bkmkstart AAAAAAAEQQ}{\bkmkend AAAAAAAEQQ}
00044            {\cf19 default}:             mtm.tm_mday = res[0]; mtm.tm_mon = res[1] - 1; mtm.tm_year = res[2] - 1900;\par
{\bkmkstart AAAAAAAEQR}{\bkmkend AAAAAAAEQR}
00045        \}\par
{\bkmkstart AAAAAAAEQS}{\bkmkend AAAAAAAEQS}
00046    \}\par
{\bkmkstart AAAAAAAEQT}{\bkmkend AAAAAAAEQT}
00047    {\cf18 bool}  DateTimeBase::isLeap({\cf18 int} year) \{\par
{\bkmkstart AAAAAAAEQU}{\bkmkend AAAAAAAEQU}
00048         {\cf19 if} (year < 100) year += 1900; {\cf20 // Control full year or tm year}\par
{\bkmkstart AAAAAAAEQV}{\bkmkend AAAAAAAEQV}
00049         {\cf19 if} (year % 4)  {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAEQW}{\bkmkend AAAAAAAEQW}
00050         {\cf19 return} (year % 400) ? false : {\cf17 true};\par
{\bkmkstart AAAAAAAEQX}{\bkmkend AAAAAAAEQX}
00051     \}\par
{\bkmkstart AAAAAAAEQY}{\bkmkend AAAAAAAEQY}
00052    {\cf18 void}  DateTimeBase::validateDateValues ({\cf17 const} {\cf18 char} *str) \{\par
{\bkmkstart AAAAAAAEQZ}{\bkmkend AAAAAAAEQZ}
00053         {\cf18 int} days[] = \{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 \};\par
{\bkmkstart AAAAAAAERA}{\bkmkend AAAAAAAERA}
00054         {\cf19 if} ( mtm.tm_year < 0)                        {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAERB}{\bkmkend AAAAAAAERB}
00055         {\cf19 if} ((mtm.tm_mon  < 0) || (mtm.tm_mon  > 11)) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAERC}{\bkmkend AAAAAAAERC}
00056         {\cf19 if} ((mtm.tm_mday < 1) || (mtm.tm_mday > 31)) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAERD}{\bkmkend AAAAAAAERD}
00057         {\cf19 if} ( mtm.tm_mon != 2) \{\par
{\bkmkstart AAAAAAAERE}{\bkmkend AAAAAAAERE}
00058              {\cf19 if} (mtm.tm_mday > days[mtm.tm_mon])               {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAERF}{\bkmkend AAAAAAAERF}
00059              {\cf19 else} {\cf19 if} (isLeap(mtm.tm_year) && mtm.tm_mday > 29) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DATE, str);\par
{\bkmkstart AAAAAAAERG}{\bkmkend AAAAAAAERG}
00060         \}\par
{\bkmkstart AAAAAAAERH}{\bkmkend AAAAAAAERH}
00061     \}\par
{\bkmkstart AAAAAAAERI}{\bkmkend AAAAAAAERI}
00062    {\cf18 void} DateTimeBase::validateTime({\cf17 const} {\cf18 char} *str) \{\par
{\bkmkstart AAAAAAAERJ}{\bkmkend AAAAAAAERJ}
00063 {\cf20 //    char strDate[11];}\par
{\bkmkstart AAAAAAAERK}{\bkmkend AAAAAAAERK}
00064 {\cf20 //    time_base::dateorder d;}\par
{\bkmkstart AAAAAAAERL}{\bkmkend AAAAAAAERL}
00065       vector<int> toks= sstring(str).tokenizeNumber({\cf22 "^[0-9]+[:][0-9]+[:][0-9]+$"});\par
{\bkmkstart AAAAAAAERM}{\bkmkend AAAAAAAERM}
00066       {\cf19 if} (toks.size() != 3) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_TIME, str);\par
{\bkmkstart AAAAAAAERN}{\bkmkend AAAAAAAERN}
00067       fillTmTime(toks);\par
{\bkmkstart AAAAAAAERO}{\bkmkend AAAAAAAERO}
00068       validateTimeValues(str);\par
{\bkmkstart AAAAAAAERP}{\bkmkend AAAAAAAERP}
00069    \}\par
{\bkmkstart AAAAAAAERQ}{\bkmkend AAAAAAAERQ}
00070    {\cf18 void} DateTimeBase::fillTmTime(vector<int> toks) \{\par
{\bkmkstart AAAAAAAERR}{\bkmkend AAAAAAAERR}
00071            mtm.tm_hour = toks[0];\par
{\bkmkstart AAAAAAAERS}{\bkmkend AAAAAAAERS}
00072            mtm.tm_min  = toks[1];\par
{\bkmkstart AAAAAAAERT}{\bkmkend AAAAAAAERT}
00073            mtm.tm_sec  = toks[2];\par
{\bkmkstart AAAAAAAERU}{\bkmkend AAAAAAAERU}
00074    \}\par
{\bkmkstart AAAAAAAERV}{\bkmkend AAAAAAAERV}
00075    {\cf18 void} DateTimeBase::validateTimeValues(sstring str) \{\par
{\bkmkstart AAAAAAAERW}{\bkmkend AAAAAAAERW}
00076        {\cf19 if} ((mtm.tm_hour < 0) || (mtm.tm_hour > 23) ||\par
{\bkmkstart AAAAAAAERX}{\bkmkend AAAAAAAERX}
00077            (mtm.tm_min  < 0) || (mtm.tm_min  > 59) ||\par
{\bkmkstart AAAAAAAERY}{\bkmkend AAAAAAAERY}
00078            (mtm.tm_sec  < 0) || (mtm.tm_sec  > 59))\par
{\bkmkstart AAAAAAAERZ}{\bkmkend AAAAAAAERZ}
00079             {\cf19 throw} {\cf17 new} ToolsValueException(BAD_TIME, str.c_str());\par
{\bkmkstart AAAAAAAESA}{\bkmkend AAAAAAAESA}
00080       \}\par
{\bkmkstart AAAAAAAESB}{\bkmkend AAAAAAAESB}
00081 \par
{\bkmkstart AAAAAAAESC}{\bkmkend AAAAAAAESC}
00082     sstring DateTimeBase::format({\cf17 const} {\cf18 char} *fmt) \{\par
{\bkmkstart AAAAAAAESD}{\bkmkend AAAAAAAESD}
00083        {\cf18 char} data[27];\par
{\bkmkstart AAAAAAAESE}{\bkmkend AAAAAAAESE}
00084        strftime(data, 27, fmt, &mtm);\par
{\bkmkstart AAAAAAAESF}{\bkmkend AAAAAAAESF}
00085        {\cf19 return} sstring(data); \par
{\bkmkstart AAAAAAAESG}{\bkmkend AAAAAAAESG}
00086     \}\par
{\bkmkstart AAAAAAAESH}{\bkmkend AAAAAAAESH}
00087 \par
{\bkmkstart AAAAAAAESI}{\bkmkend AAAAAAAESI}
00088 \par
{\bkmkstart AAAAAAAESJ}{\bkmkend AAAAAAAESJ}
00089 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
decimal.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/decimal.cpp}
{\xe \v code/src/decimal.cpp}
{\bkmkstart AAAAAAAESK}
{\bkmkend AAAAAAAESK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAESL}{\bkmkend AAAAAAAESL}
00001 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAESM}{\bkmkend AAAAAAAESM}
00002 \par
{\bkmkstart AAAAAAAESN}{\bkmkend AAAAAAAESN}
00003 {\cf21 #include "config.h"} \par
{\bkmkstart AAAAAAAESO}{\bkmkend AAAAAAAESO}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAESP}{\bkmkend AAAAAAAESP}
00005 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAESQ}{\bkmkend AAAAAAAESQ}
00006 {\cf21 #include "decimal.hpp"}\par
{\bkmkstart AAAAAAAESR}{\bkmkend AAAAAAAESR}
00007 \par
{\bkmkstart AAAAAAAESS}{\bkmkend AAAAAAAESS}
00008 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAEST}{\bkmkend AAAAAAAEST}
00009 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAESU}{\bkmkend AAAAAAAESU}
00010 {\cf21 #endif}\par
{\bkmkstart AAAAAAAESV}{\bkmkend AAAAAAAESV}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAESW}{\bkmkend AAAAAAAESW}
00012 \par
{\bkmkstart AAAAAAAESX}{\bkmkend AAAAAAAESX}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAESY}{\bkmkend AAAAAAAESY}
00014    Decimal::Decimal({\cf17 const} {\cf18 char}* value)  \{\par
{\bkmkstart AAAAAAAESZ}{\bkmkend AAAAAAAESZ}
00015         regex pat\{{\cf22 "^[+-]?[0-9]*[\\\\.,]?[0-9]*$"}\};\par
{\bkmkstart AAAAAAAETA}{\bkmkend AAAAAAAETA}
00016         {\cf18 bool} match = regex_search(value, pat);\par
{\bkmkstart AAAAAAAETB}{\bkmkend AAAAAAAETB}
00017         {\cf19 if} (!match) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DECIMAL, value);\par
{\bkmkstart AAAAAAAETC}{\bkmkend AAAAAAAETC}
00018         vector<char *> data = (sstring(value)).tokenize({\cf22 "[\\\\.,]"});\par
{\bkmkstart AAAAAAAETD}{\bkmkend AAAAAAAETD}
00019         {\cf19 if} (data.size() > 2 || data.size() == 0) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_DECIMAL, value);\par
{\bkmkstart AAAAAAAETE}{\bkmkend AAAAAAAETE}
00020         number = atoll(data[0]);\par
{\bkmkstart AAAAAAAETF}{\bkmkend AAAAAAAETF}
00021         scale = 0;\par
{\bkmkstart AAAAAAAETG}{\bkmkend AAAAAAAETG}
00022         {\cf19 if} (data.size() == 2) \{\par
{\bkmkstart AAAAAAAETH}{\bkmkend AAAAAAAETH}
00023             scale  = ({\cf18 unsigned} int) strlen(data[1]);\par
{\bkmkstart AAAAAAAETI}{\bkmkend AAAAAAAETI}
00024             number *= pow(10,scale);\par
{\bkmkstart AAAAAAAETJ}{\bkmkend AAAAAAAETJ}
00025             number += atol(data[1]);\par
{\bkmkstart AAAAAAAETK}{\bkmkend AAAAAAAETK}
00026         \}\par
{\bkmkstart AAAAAAAETL}{\bkmkend AAAAAAAETL}
00027         {\cf20 // When using char *, those are allocated}\par
{\bkmkstart AAAAAAAETM}{\bkmkend AAAAAAAETM}
00028         {\cf19 for} ({\cf18 int} i = 0; i < data.size(); i++) free(data[i]);\par
{\bkmkstart AAAAAAAETN}{\bkmkend AAAAAAAETN}
00029    \}\par
{\bkmkstart AAAAAAAETO}{\bkmkend AAAAAAAETO}
00030    Decimal::Decimal({\cf18 float}       value) \{ \par
{\bkmkstart AAAAAAAETP}{\bkmkend AAAAAAAETP}
00031        sprintf(buffer, {\cf22 "%f"}, value); \par
{\bkmkstart AAAAAAAETQ}{\bkmkend AAAAAAAETQ}
00032        setValues();\par
{\bkmkstart AAAAAAAETR}{\bkmkend AAAAAAAETR}
00033    \}\par
{\bkmkstart AAAAAAAETS}{\bkmkend AAAAAAAETS}
00034    Decimal::Decimal({\cf18 double}      value) \{ \par
{\bkmkstart AAAAAAAETT}{\bkmkend AAAAAAAETT}
00035        sprintf(buffer, {\cf22 "%lf"}, value); \par
{\bkmkstart AAAAAAAETU}{\bkmkend AAAAAAAETU}
00036        setValues();\par
{\bkmkstart AAAAAAAETV}{\bkmkend AAAAAAAETV}
00037    \}\par
{\bkmkstart AAAAAAAETW}{\bkmkend AAAAAAAETW}
00038    Decimal::Decimal({\cf18 long} {\cf18 double} value) \{ \par
{\bkmkstart AAAAAAAETX}{\bkmkend AAAAAAAETX}
00039        sprintf(buffer, {\cf22 "%Lf"}, value); \par
{\bkmkstart AAAAAAAETY}{\bkmkend AAAAAAAETY}
00040        setValues();\par
{\bkmkstart AAAAAAAETZ}{\bkmkend AAAAAAAETZ}
00041     \}\par
{\bkmkstart AAAAAAAEUA}{\bkmkend AAAAAAAEUA}
00042    Decimal::Decimal({\cf18 int} value)         \{ \par
{\bkmkstart AAAAAAAEUB}{\bkmkend AAAAAAAEUB}
00043 this->number = value;            \}\par
{\bkmkstart AAAAAAAEUC}{\bkmkend AAAAAAAEUC}
00044    Decimal::Decimal({\cf18 long} value)        \{ \par
{\bkmkstart AAAAAAAEUD}{\bkmkend AAAAAAAEUD}
00045 this->number = value;            \}\par
{\bkmkstart AAAAAAAEUE}{\bkmkend AAAAAAAEUE}
00046    Decimal::Decimal({\cf18 long} {\cf18 long} value)   \{ \par
{\bkmkstart AAAAAAAEUF}{\bkmkend AAAAAAAEUF}
00047 this->number = value;            \}\par
{\bkmkstart AAAAAAAEUG}{\bkmkend AAAAAAAEUG}
00048 \par
{\bkmkstart AAAAAAAEUH}{\bkmkend AAAAAAAEUH}
00049    Decimal::Decimal({\cf18 long} {\cf18 long} value, {\cf18 int} scale) \{\par
{\bkmkstart AAAAAAAEUI}{\bkmkend AAAAAAAEUI}
00050          this->number = value;\par
{\bkmkstart AAAAAAAEUJ}{\bkmkend AAAAAAAEUJ}
00051          this->scale  = scale;\par
{\bkmkstart AAAAAAAEUK}{\bkmkend AAAAAAAEUK}
00052    \}\par
{\bkmkstart AAAAAAAEUL}{\bkmkend AAAAAAAEUL}
00053    sstring Decimal::toString() \{\par
{\bkmkstart AAAAAAAEUM}{\bkmkend AAAAAAAEUM}
00054        {\cf18 string} str = to_string(number);\par
{\bkmkstart AAAAAAAEUN}{\bkmkend AAAAAAAEUN}
00055        {\cf18 int} len = str.length();\par
{\bkmkstart AAAAAAAEUO}{\bkmkend AAAAAAAEUO}
00056        {\cf18 int} diff = len - scale;\par
{\bkmkstart AAAAAAAEUP}{\bkmkend AAAAAAAEUP}
00057        {\cf18 string} str1 = str.substr(0, diff);\par
{\bkmkstart AAAAAAAEUQ}{\bkmkend AAAAAAAEUQ}
00058        {\cf19 if} (str1.length() == 0) str1 = string({\cf22 "0"});\par
{\bkmkstart AAAAAAAEUR}{\bkmkend AAAAAAAEUR}
00059        {\cf19 if} (str1.length() == 1 && str1[0] == {\cf23 '-'}) str1 = string({\cf22 "-0"});\par
{\bkmkstart AAAAAAAEUS}{\bkmkend AAAAAAAEUS}
00060        {\cf18 string} str2 = str.substr(diff, len);\par
{\bkmkstart AAAAAAAEUT}{\bkmkend AAAAAAAEUT}
00061        {\cf19 if} (str2.length() == 0) {\cf19 return} str1;\par
{\bkmkstart AAAAAAAEUU}{\bkmkend AAAAAAAEUU}
00062        {\cf19 return} str1.append({\cf22 "."}).append(str2);\par
{\bkmkstart AAAAAAAEUV}{\bkmkend AAAAAAAEUV}
00063    \}\par
{\bkmkstart AAAAAAAEUW}{\bkmkend AAAAAAAEUW}
00064    {\cf18 char}* Decimal::toChar() \{\par
{\bkmkstart AAAAAAAEUX}{\bkmkend AAAAAAAEUX}
00065       {\cf19 return} strdup(this->toString().toChar());\par
{\bkmkstart AAAAAAAEUY}{\bkmkend AAAAAAAEUY}
00066    \}\par
{\bkmkstart AAAAAAAEUZ}{\bkmkend AAAAAAAEUZ}
00067    sstring  Decimal::toStringRounded({\cf18 int} scale) \{\par
{\bkmkstart AAAAAAAEVA}{\bkmkend AAAAAAAEVA}
00068        Decimal dec = round(scale);\par
{\bkmkstart AAAAAAAEVB}{\bkmkend AAAAAAAEVB}
00069        {\cf19 return} dec.toString();\par
{\bkmkstart AAAAAAAEVC}{\bkmkend AAAAAAAEVC}
00070    \}\par
{\bkmkstart AAAAAAAEVD}{\bkmkend AAAAAAAEVD}
00071    {\cf18 char}* Decimal::toCharRounded({\cf18 int} scale) \{\par
{\bkmkstart AAAAAAAEVE}{\bkmkend AAAAAAAEVE}
00072        {\cf19 return} strdup(toStringRounded(scale).toChar());\par
{\bkmkstart AAAAAAAEVF}{\bkmkend AAAAAAAEVF}
00073    \}\par
{\bkmkstart AAAAAAAEVG}{\bkmkend AAAAAAAEVG}
00074    {\cf18 float} Decimal::toFloat() \{\par
{\bkmkstart AAAAAAAEVH}{\bkmkend AAAAAAAEVH}
00075          {\cf18 float} f = number;\par
{\bkmkstart AAAAAAAEVI}{\bkmkend AAAAAAAEVI}
00076          {\cf19 return} f / (10 ^ scale);\par
{\bkmkstart AAAAAAAEVJ}{\bkmkend AAAAAAAEVJ}
00077    \}\par
{\bkmkstart AAAAAAAEVK}{\bkmkend AAAAAAAEVK}
00078    {\cf18 double}  Decimal::toDouble() \{\par
{\bkmkstart AAAAAAAEVL}{\bkmkend AAAAAAAEVL}
00079          {\cf18 double} d = number;\par
{\bkmkstart AAAAAAAEVM}{\bkmkend AAAAAAAEVM}
00080          {\cf19 return} d / (10 ^ scale);\par
{\bkmkstart AAAAAAAEVN}{\bkmkend AAAAAAAEVN}
00081    \}\par
{\bkmkstart AAAAAAAEVO}{\bkmkend AAAAAAAEVO}
00082    {\cf18 long} {\cf18 double} Decimal::toLongDouble() \{\par
{\bkmkstart AAAAAAAEVP}{\bkmkend AAAAAAAEVP}
00083          {\cf18 long} {\cf18 double} ld = number;\par
{\bkmkstart AAAAAAAEVQ}{\bkmkend AAAAAAAEVQ}
00084          {\cf19 return} ld / (10 ^ scale);\par
{\bkmkstart AAAAAAAEVR}{\bkmkend AAAAAAAEVR}
00085    \}\par
{\bkmkstart AAAAAAAEVS}{\bkmkend AAAAAAAEVS}
00086    {\cf18 long} Decimal::toFloor() \{\par
{\bkmkstart AAAAAAAEVT}{\bkmkend AAAAAAAEVT}
00087         {\cf18 long} value = number / (10 ^ scale);\par
{\bkmkstart AAAAAAAEVU}{\bkmkend AAAAAAAEVU}
00088         {\cf19 return} value + 1;\par
{\bkmkstart AAAAAAAEVV}{\bkmkend AAAAAAAEVV}
00089    \}\par
{\bkmkstart AAAAAAAEVW}{\bkmkend AAAAAAAEVW}
00090    {\cf18 long} Decimal::toCeil() \{\par
{\bkmkstart AAAAAAAEVX}{\bkmkend AAAAAAAEVX}
00091         {\cf19 return} number / (10 ^ scale);\par
{\bkmkstart AAAAAAAEVY}{\bkmkend AAAAAAAEVY}
00092    \}\par
{\bkmkstart AAAAAAAEVZ}{\bkmkend AAAAAAAEVZ}
00093    Decimal Decimal::round({\cf18 int} scale) \{\par
{\bkmkstart AAAAAAAEWA}{\bkmkend AAAAAAAEWA}
00094        {\cf18 int} remove = this->scale - scale;\par
{\bkmkstart AAAAAAAEWB}{\bkmkend AAAAAAAEWB}
00095        {\cf18 long} p =  pow(10, remove - 1);\par
{\bkmkstart AAAAAAAEWC}{\bkmkend AAAAAAAEWC}
00096        p *= 5;  \par
{\bkmkstart AAAAAAAEWD}{\bkmkend AAAAAAAEWD}
00097        {\cf19 if} (number < 0) p *= -1;\par
{\bkmkstart AAAAAAAEWE}{\bkmkend AAAAAAAEWE}
00098        {\cf18 long} {\cf18 long} value = number + p;\par
{\bkmkstart AAAAAAAEWF}{\bkmkend AAAAAAAEWF}
00099        {\cf18 long} p2 = pow(10, this->scale - scale);\par
{\bkmkstart AAAAAAAEWG}{\bkmkend AAAAAAAEWG}
00100        {\cf19 return} Decimal(value / p2, scale);\par
{\bkmkstart AAAAAAAEWH}{\bkmkend AAAAAAAEWH}
00101    \}\par
{\bkmkstart AAAAAAAEWI}{\bkmkend AAAAAAAEWI}
00102    Decimal Decimal::operator+  ({\cf17 const} Decimal& b) \{ {\cf19 return} add(*{\cf17 this}, b); \}\par
{\bkmkstart AAAAAAAEWJ}{\bkmkend AAAAAAAEWJ}
00103    Decimal Decimal::operator+= ({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEWK}{\bkmkend AAAAAAAEWK}
00104       Decimal res = add(*{\cf17 this}, b); \par
{\bkmkstart AAAAAAAEWL}{\bkmkend AAAAAAAEWL}
00105       this->number = res.number;\par
{\bkmkstart AAAAAAAEWM}{\bkmkend AAAAAAAEWM}
00106       this->scale  = res.scale;\par
{\bkmkstart AAAAAAAEWN}{\bkmkend AAAAAAAEWN}
00107       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEWO}{\bkmkend AAAAAAAEWO}
00108    \}\par
{\bkmkstart AAAAAAAEWP}{\bkmkend AAAAAAAEWP}
00109    Decimal Decimal::operator-  ({\cf17 const} Decimal& b) \{ {\cf19 return} subtract(*{\cf17 this}, b); \}\par
{\bkmkstart AAAAAAAEWQ}{\bkmkend AAAAAAAEWQ}
00110    Decimal Decimal::operator-= ({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEWR}{\bkmkend AAAAAAAEWR}
00111       Decimal res = add(*{\cf17 this}, b); \par
{\bkmkstart AAAAAAAEWS}{\bkmkend AAAAAAAEWS}
00112       this->number = res.number;\par
{\bkmkstart AAAAAAAEWT}{\bkmkend AAAAAAAEWT}
00113       this->scale  = res.scale;\par
{\bkmkstart AAAAAAAEWU}{\bkmkend AAAAAAAEWU}
00114       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEWV}{\bkmkend AAAAAAAEWV}
00115    \}\par
{\bkmkstart AAAAAAAEWW}{\bkmkend AAAAAAAEWW}
00116    Decimal Decimal::operator*  ({\cf17 const} Decimal& b) \{ {\cf19 return} multiply(*{\cf17 this}, b); \}\par
{\bkmkstart AAAAAAAEWX}{\bkmkend AAAAAAAEWX}
00117    Decimal Decimal::operator*= ({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEWY}{\bkmkend AAAAAAAEWY}
00118       Decimal res  = multiply(*{\cf17 this}, b); \par
{\bkmkstart AAAAAAAEWZ}{\bkmkend AAAAAAAEWZ}
00119       this->number = res.number;\par
{\bkmkstart AAAAAAAEXA}{\bkmkend AAAAAAAEXA}
00120       this->scale  = res.scale;\par
{\bkmkstart AAAAAAAEXB}{\bkmkend AAAAAAAEXB}
00121       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEXC}{\bkmkend AAAAAAAEXC}
00122    \}\par
{\bkmkstart AAAAAAAEXD}{\bkmkend AAAAAAAEXD}
00123    Decimal Decimal::operator/  ({\cf17 const} Decimal& b) \{ {\cf19 return} divide(*{\cf17 this}, b); \}\par
{\bkmkstart AAAAAAAEXE}{\bkmkend AAAAAAAEXE}
00124    Decimal Decimal::operator/= ({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEXF}{\bkmkend AAAAAAAEXF}
00125       Decimal res  = divide(*{\cf17 this}, b); \par
{\bkmkstart AAAAAAAEXG}{\bkmkend AAAAAAAEXG}
00126       this->number = res.number;\par
{\bkmkstart AAAAAAAEXH}{\bkmkend AAAAAAAEXH}
00127       this->scale  = res.scale;\par
{\bkmkstart AAAAAAAEXI}{\bkmkend AAAAAAAEXI}
00128       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAEXJ}{\bkmkend AAAAAAAEXJ}
00129    \}\par
{\bkmkstart AAAAAAAEXK}{\bkmkend AAAAAAAEXK}
00130    {\cf18 bool} Decimal::operator==({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEXL}{\bkmkend AAAAAAAEXL}
00131       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEXM}{\bkmkend AAAAAAAEXM}
00132       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEXN}{\bkmkend AAAAAAAEXN}
00133       {\cf19 return} beg.number1 == beg.number2;\par
{\bkmkstart AAAAAAAEXO}{\bkmkend AAAAAAAEXO}
00134    \}\par
{\bkmkstart AAAAAAAEXP}{\bkmkend AAAAAAAEXP}
00135    {\cf18 bool} Decimal::operator!=({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEXQ}{\bkmkend AAAAAAAEXQ}
00136       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEXR}{\bkmkend AAAAAAAEXR}
00137       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEXS}{\bkmkend AAAAAAAEXS}
00138       {\cf19 return} beg.number1 != beg.number2;\par
{\bkmkstart AAAAAAAEXT}{\bkmkend AAAAAAAEXT}
00139    \}\par
{\bkmkstart AAAAAAAEXU}{\bkmkend AAAAAAAEXU}
00140    {\cf18 bool} Decimal::operator<({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEXV}{\bkmkend AAAAAAAEXV}
00141       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEXW}{\bkmkend AAAAAAAEXW}
00142       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEXX}{\bkmkend AAAAAAAEXX}
00143       {\cf19 return} beg.number1 < beg.number2;\par
{\bkmkstart AAAAAAAEXY}{\bkmkend AAAAAAAEXY}
00144    \}\par
{\bkmkstart AAAAAAAEXZ}{\bkmkend AAAAAAAEXZ}
00145    {\cf18 bool} Decimal::operator<=({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEYA}{\bkmkend AAAAAAAEYA}
00146       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEYB}{\bkmkend AAAAAAAEYB}
00147       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEYC}{\bkmkend AAAAAAAEYC}
00148       {\cf19 return} beg.number1 <= beg.number2;\par
{\bkmkstart AAAAAAAEYD}{\bkmkend AAAAAAAEYD}
00149    \}\par
{\bkmkstart AAAAAAAEYE}{\bkmkend AAAAAAAEYE}
00150   {\cf18 bool} Decimal::operator>({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEYF}{\bkmkend AAAAAAAEYF}
00151       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEYG}{\bkmkend AAAAAAAEYG}
00152       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEYH}{\bkmkend AAAAAAAEYH}
00153       {\cf19 return} beg.number1 > beg.number2;\par
{\bkmkstart AAAAAAAEYI}{\bkmkend AAAAAAAEYI}
00154   \}\par
{\bkmkstart AAAAAAAEYJ}{\bkmkend AAAAAAAEYJ}
00155   {\cf18 bool} Decimal::operator>=({\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEYK}{\bkmkend AAAAAAAEYK}
00156       {\cf17 struct }opers beg = \{this->number, b.number, this->scale, b.scale\};\par
{\bkmkstart AAAAAAAEYL}{\bkmkend AAAAAAAEYL}
00157       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEYM}{\bkmkend AAAAAAAEYM}
00158       {\cf19 return} beg.number1 >= beg.number2;\par
{\bkmkstart AAAAAAAEYN}{\bkmkend AAAAAAAEYN}
00159   \}\par
{\bkmkstart AAAAAAAEYO}{\bkmkend AAAAAAAEYO}
00160 \par
{\bkmkstart AAAAAAAEYP}{\bkmkend AAAAAAAEYP}
00161    {\cf18 void} Decimal::adjustScales({\cf17 struct} opers * op) \{\par
{\bkmkstart AAAAAAAEYQ}{\bkmkend AAAAAAAEYQ}
00162       {\cf18 int} diff = op->scale1 - op->scale2;\par
{\bkmkstart AAAAAAAEYR}{\bkmkend AAAAAAAEYR}
00163       {\cf19 if} (diff < 0) op->number1 *= (10 * diff);\par
{\bkmkstart AAAAAAAEYS}{\bkmkend AAAAAAAEYS}
00164       {\cf19 if} (diff > 0) op->number2 *= (10 * diff);\par
{\bkmkstart AAAAAAAEYT}{\bkmkend AAAAAAAEYT}
00165       op->scale1 += diff;\par
{\bkmkstart AAAAAAAEYU}{\bkmkend AAAAAAAEYU}
00166    \}\par
{\bkmkstart AAAAAAAEYV}{\bkmkend AAAAAAAEYV}
00167    {\cf18 void} Decimal::calculateScale({\cf17 struct} opers *op) \{\par
{\bkmkstart AAAAAAAEYW}{\bkmkend AAAAAAAEYW}
00168        {\cf18 char} m[64];\par
{\bkmkstart AAAAAAAEYX}{\bkmkend AAAAAAAEYX}
00169        {\cf18 int} modulus = op->number1 % (10 ^ op->scale1);\par
{\bkmkstart AAAAAAAEYY}{\bkmkend AAAAAAAEYY}
00170        sprintf(m, {\cf22 "%d"}, modulus);\par
{\bkmkstart AAAAAAAEYZ}{\bkmkend AAAAAAAEYZ}
00171        op->scale1 = ({\cf18 unsigned} int) strlen(m) - 1;\par
{\bkmkstart AAAAAAAEZA}{\bkmkend AAAAAAAEZA}
00172        op->number1 /= (10 ^ op->scale1);\par
{\bkmkstart AAAAAAAEZB}{\bkmkend AAAAAAAEZB}
00173    \}\par
{\bkmkstart AAAAAAAEZC}{\bkmkend AAAAAAAEZC}
00174    Decimal Decimal::add(Decimal& a, {\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEZD}{\bkmkend AAAAAAAEZD}
00175       {\cf17 struct }opers beg = \{a.number, b.number, a.scale, b.scale\};\par
{\bkmkstart AAAAAAAEZE}{\bkmkend AAAAAAAEZE}
00176       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEZF}{\bkmkend AAAAAAAEZF}
00177       beg.number1 += beg.number2;\par
{\bkmkstart AAAAAAAEZG}{\bkmkend AAAAAAAEZG}
00178       calculateScale(&beg);\par
{\bkmkstart AAAAAAAEZH}{\bkmkend AAAAAAAEZH}
00179       {\cf19 return} Decimal(beg.number1, beg.scale1);\par
{\bkmkstart AAAAAAAEZI}{\bkmkend AAAAAAAEZI}
00180    \}\par
{\bkmkstart AAAAAAAEZJ}{\bkmkend AAAAAAAEZJ}
00181    Decimal Decimal::subtract(Decimal& a, {\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEZK}{\bkmkend AAAAAAAEZK}
00182       {\cf17 struct }opers beg = \{a.number, b.number, a.scale, b.scale\};\par
{\bkmkstart AAAAAAAEZL}{\bkmkend AAAAAAAEZL}
00183       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEZM}{\bkmkend AAAAAAAEZM}
00184       beg.number1 -= beg.number2;\par
{\bkmkstart AAAAAAAEZN}{\bkmkend AAAAAAAEZN}
00185       calculateScale(&beg);\par
{\bkmkstart AAAAAAAEZO}{\bkmkend AAAAAAAEZO}
00186       {\cf19 return} Decimal(beg.number1, beg.scale1);\par
{\bkmkstart AAAAAAAEZP}{\bkmkend AAAAAAAEZP}
00187    \}\par
{\bkmkstart AAAAAAAEZQ}{\bkmkend AAAAAAAEZQ}
00188    Decimal Decimal::multiply(Decimal& a, {\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEZR}{\bkmkend AAAAAAAEZR}
00189       {\cf17 struct }opers beg = \{a.number, b.number, a.scale, b.scale\};\par
{\bkmkstart AAAAAAAEZS}{\bkmkend AAAAAAAEZS}
00190       adjustScales(&beg);\par
{\bkmkstart AAAAAAAEZT}{\bkmkend AAAAAAAEZT}
00191       beg.number1 *= beg.number2;\par
{\bkmkstart AAAAAAAEZU}{\bkmkend AAAAAAAEZU}
00192       beg.scale1 *= 2;\par
{\bkmkstart AAAAAAAEZV}{\bkmkend AAAAAAAEZV}
00193       calculateScale(&beg);\par
{\bkmkstart AAAAAAAEZW}{\bkmkend AAAAAAAEZW}
00194       {\cf19 return} Decimal(beg.number1, beg.scale1);\par
{\bkmkstart AAAAAAAEZX}{\bkmkend AAAAAAAEZX}
00195    \}\par
{\bkmkstart AAAAAAAEZY}{\bkmkend AAAAAAAEZY}
00196    Decimal Decimal::divide(Decimal& a, {\cf17 const} Decimal& b) \{\par
{\bkmkstart AAAAAAAEZZ}{\bkmkend AAAAAAAEZZ}
00197       {\cf17 struct }opers beg = \{a.number, b.number, a.scale, b.scale\};\par
{\bkmkstart AAAAAAAFAA}{\bkmkend AAAAAAAFAA}
00198       adjustScales(&beg);\par
{\bkmkstart AAAAAAAFAB}{\bkmkend AAAAAAAFAB}
00199       beg.number1 /= beg.number2;\par
{\bkmkstart AAAAAAAFAC}{\bkmkend AAAAAAAFAC}
00200       beg.scale1 *= 2;\par
{\bkmkstart AAAAAAAFAD}{\bkmkend AAAAAAAFAD}
00201       calculateScale(&beg);\par
{\bkmkstart AAAAAAAFAE}{\bkmkend AAAAAAAFAE}
00202       {\cf19 return} Decimal(beg.number1, beg.scale1);\par
{\bkmkstart AAAAAAAFAF}{\bkmkend AAAAAAAFAF}
00203    \}\par
{\bkmkstart AAAAAAAFAG}{\bkmkend AAAAAAAFAG}
00204    sstring Decimal::makeString({\cf18 long} {\cf18 long} value, {\cf18 int} scale) \{\par
{\bkmkstart AAAAAAAFAH}{\bkmkend AAAAAAAFAH}
00205        {\cf18 string} str = to_string(value * 10);\par
{\bkmkstart AAAAAAAFAI}{\bkmkend AAAAAAAFAI}
00206        {\cf18 int} idx = (int) str.length() - 2;\par
{\bkmkstart AAAAAAAFAJ}{\bkmkend AAAAAAAFAJ}
00207        {\cf19 for} ({\cf18 int} i = 0; i < scale; i++) str[idx + 1] = str[idx];\par
{\bkmkstart AAAAAAAFAK}{\bkmkend AAAAAAAFAK}
00208        str[idx] = {\cf23 '.'};\par
{\bkmkstart AAAAAAAFAL}{\bkmkend AAAAAAAFAL}
00209        {\cf19 return} sstring(str);\par
{\bkmkstart AAAAAAAFAM}{\bkmkend AAAAAAAFAM}
00210    \}\par
{\bkmkstart AAAAAAAFAN}{\bkmkend AAAAAAAFAN}
00211    {\cf18 void} Decimal::setValues() \{\par
{\bkmkstart AAAAAAAFAO}{\bkmkend AAAAAAAFAO}
00212        vector<char *> toks = sstring(buffer).tokenize({\cf22 "\\\\."});\par
{\bkmkstart AAAAAAAFAP}{\bkmkend AAAAAAAFAP}
00213        {\cf18 int} i = strlen(toks[1]) - 1;\par
{\bkmkstart AAAAAAAFAQ}{\bkmkend AAAAAAAFAQ}
00214        {\cf19 while} (i > -1 && toks[1][i] == {\cf23 '0'}) toks[1][i--] = 0x0;\par
{\bkmkstart AAAAAAAFAR}{\bkmkend AAAAAAAFAR}
00215        sstring str = sstring(toks[0]);\par
{\bkmkstart AAAAAAAFAS}{\bkmkend AAAAAAAFAS}
00216        str.append(toks[1]);\par
{\bkmkstart AAAAAAAFAT}{\bkmkend AAAAAAAFAT}
00217        scale = strlen(toks[1]);\par
{\bkmkstart AAAAAAAFAU}{\bkmkend AAAAAAAFAU}
00218        number = stoll(str);\par
{\bkmkstart AAAAAAAFAV}{\bkmkend AAAAAAAFAV}
00219        {\cf19 for} (i = 0; i < toks.size(); i++) free(toks[i]);\par
{\bkmkstart AAAAAAAFAW}{\bkmkend AAAAAAAFAW}
00220    \}\par
{\bkmkstart AAAAAAAFAX}{\bkmkend AAAAAAAFAX}
00221    {\cf20 //TODO Check when number fit in float, double or not}\par
{\bkmkstart AAAAAAAFAY}{\bkmkend AAAAAAAFAY}
00222 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
exceptions.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/exceptions.cpp}
{\xe \v code/src/exceptions.cpp}
{\bkmkstart AAAAAAAFAZ}
{\bkmkend AAAAAAAFAZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFBA}{\bkmkend AAAAAAAFBA}
00001 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAAFBB}{\bkmkend AAAAAAAFBB}
00002 {\cf21 #include <cstdio>}\par
{\bkmkstart AAAAAAAFBC}{\bkmkend AAAAAAAFBC}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFBD}{\bkmkend AAAAAAAFBD}
00004 \par
{\bkmkstart AAAAAAAFBE}{\bkmkend AAAAAAAFBE}
00005 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAFBF}{\bkmkend AAAAAAAFBF}
00006 \par
{\bkmkstart AAAAAAAFBG}{\bkmkend AAAAAAAFBG}
00007 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFBH}{\bkmkend AAAAAAAFBH}
00008 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFBI}{\bkmkend AAAAAAAFBI}
00009 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFBJ}{\bkmkend AAAAAAAFBJ}
00010 {\cf21 #include <cstdarg>}\par
{\bkmkstart AAAAAAAFBK}{\bkmkend AAAAAAAFBK}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAFBL}{\bkmkend AAAAAAAFBL}
00012 \par
{\bkmkstart AAAAAAAFBM}{\bkmkend AAAAAAAFBM}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFBN}{\bkmkend AAAAAAAFBN}
00014  ToolsException::ToolsException({\cf17 const} {\cf18 char}* fmt, ...) :  domain_error(fmt) \{\par
{\bkmkstart AAAAAAAFBO}{\bkmkend AAAAAAAFBO}
00015     va_list args;\par
{\bkmkstart AAAAAAAFBP}{\bkmkend AAAAAAAFBP}
00016     va_start(args, fmt);\par
{\bkmkstart AAAAAAAFBQ}{\bkmkend AAAAAAAFBQ}
00017     mountMessage(fmt, args);\par
{\bkmkstart AAAAAAAFBR}{\bkmkend AAAAAAAFBR}
00018     va_end(args);\par
{\bkmkstart AAAAAAAFBS}{\bkmkend AAAAAAAFBS}
00019 \}\par
{\bkmkstart AAAAAAAFBT}{\bkmkend AAAAAAAFBT}
00020 {\cf17 const} {\cf18 char}* ToolsException::what() \{\par
{\bkmkstart AAAAAAAFBU}{\bkmkend AAAAAAAFBU}
00021     {\cf19 return} message.c_str();\par
{\bkmkstart AAAAAAAFBV}{\bkmkend AAAAAAAFBV}
00022 \}\par
{\bkmkstart AAAAAAAFBW}{\bkmkend AAAAAAAFBW}
00023 \par
{\bkmkstart AAAAAAAFBX}{\bkmkend AAAAAAAFBX}
00024 {\cf18 void} ToolsException::mountMessage({\cf17 const} {\cf18 char}* fmt, va_list list) \{\par
{\bkmkstart AAAAAAAFBY}{\bkmkend AAAAAAAFBY}
00025         {\cf18 int} szSize = 0;\par
{\bkmkstart AAAAAAAFBZ}{\bkmkend AAAAAAAFBZ}
00026         {\cf18 int} count = 1;\par
{\bkmkstart AAAAAAAFCA}{\bkmkend AAAAAAAFCA}
00027         {\cf18 char} *szWhat = ({\cf18 char} *) malloc(szSize);\par
{\bkmkstart AAAAAAAFCB}{\bkmkend AAAAAAAFCB}
00028         {\cf19 do} \{\par
{\bkmkstart AAAAAAAFCC}{\bkmkend AAAAAAAFCC}
00029            szSize += MAX_SIZE_ERR;\par
{\bkmkstart AAAAAAAFCD}{\bkmkend AAAAAAAFCD}
00030            {\cf19 if} (szWhat != 0x0) free (szWhat);\par
{\bkmkstart AAAAAAAFCE}{\bkmkend AAAAAAAFCE}
00031            szWhat = ({\cf18 char} *) malloc(szSize);\par
{\bkmkstart AAAAAAAFCF}{\bkmkend AAAAAAAFCF}
00032            count = vsnprintf(szWhat, szSize, fmt, list);\par
{\bkmkstart AAAAAAAFCG}{\bkmkend AAAAAAAFCG}
00033         \} {\cf19 while} (count < 0);\par
{\bkmkstart AAAAAAAFCH}{\bkmkend AAAAAAAFCH}
00034         message = szWhat;\par
{\bkmkstart AAAAAAAFCI}{\bkmkend AAAAAAAFCI}
00035         free(szWhat);\par
{\bkmkstart AAAAAAAFCJ}{\bkmkend AAAAAAAFCJ}
00036 {\cf20 //        addPointer(std::addressof(szWhat)); }\par
{\bkmkstart AAAAAAAFCK}{\bkmkend AAAAAAAFCK}
00037     \}\par
{\bkmkstart AAAAAAAFCL}{\bkmkend AAAAAAAFCL}
00038 \par
{\bkmkstart AAAAAAAFCM}{\bkmkend AAAAAAAFCM}
00039 ToolsValueException::ToolsValueException({\cf17 const} {\cf18 char}* fmt, ...) : ToolsException(fmt) \{\par
{\bkmkstart AAAAAAAFCN}{\bkmkend AAAAAAAFCN}
00040     va_list args;\par
{\bkmkstart AAAAAAAFCO}{\bkmkend AAAAAAAFCO}
00041     va_start(args, fmt);\par
{\bkmkstart AAAAAAAFCP}{\bkmkend AAAAAAAFCP}
00042     mountMessage(fmt, args);\par
{\bkmkstart AAAAAAAFCQ}{\bkmkend AAAAAAAFCQ}
00043     va_end(args);\par
{\bkmkstart AAAAAAAFCR}{\bkmkend AAAAAAAFCR}
00044 \}\par
{\bkmkstart AAAAAAAFCS}{\bkmkend AAAAAAAFCS}
00045 ToolsCastException::ToolsCastException({\cf17 const} {\cf18 char}* fmt, ...) : ToolsException(fmt) \{\par
{\bkmkstart AAAAAAAFCT}{\bkmkend AAAAAAAFCT}
00046     va_list args;\par
{\bkmkstart AAAAAAAFCU}{\bkmkend AAAAAAAFCU}
00047     va_start(args, fmt);\par
{\bkmkstart AAAAAAAFCV}{\bkmkend AAAAAAAFCV}
00048     mountMessage(fmt, args);\par
{\bkmkstart AAAAAAAFCW}{\bkmkend AAAAAAAFCW}
00049     va_end(args);\par
{\bkmkstart AAAAAAAFCX}{\bkmkend AAAAAAAFCX}
00050 \}\par
{\bkmkstart AAAAAAAFCY}{\bkmkend AAAAAAAFCY}
00051 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
exceptions.cpp\par \pard\plain 
{\tc\tcl2 \v old/exceptions.cpp}
{\xe \v old/exceptions.cpp}
{\bkmkstart AAAAAAAFCZ}
{\bkmkend AAAAAAAFCZ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFDA}{\bkmkend AAAAAAAFDA}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAFDB}{\bkmkend AAAAAAAFDB}
00002 {\cf20 #include <cstdarg>}\par
{\bkmkstart AAAAAAAFDC}{\bkmkend AAAAAAAFDC}
00003 {\cf20 #include <string.h>}\par
{\bkmkstart AAAAAAAFDD}{\bkmkend AAAAAAAFDD}
00004 {\cf20 #include <typeinfo>}\par
{\bkmkstart AAAAAAAFDE}{\bkmkend AAAAAAAFDE}
00005 {\cf20 #include <memory>}\par
{\bkmkstart AAAAAAAFDF}{\bkmkend AAAAAAAFDF}
00006 {\cf20 }\par
{\bkmkstart AAAAAAAFDG}{\bkmkend AAAAAAAFDG}
00007 {\cf20 #include <stdexcept>}\par
{\bkmkstart AAAAAAAFDH}{\bkmkend AAAAAAAFDH}
00008 {\cf20 #include "msg_locale.hpp"}\par
{\bkmkstart AAAAAAAFDI}{\bkmkend AAAAAAAFDI}
00009 {\cf20 }\par
{\bkmkstart AAAAAAAFDJ}{\bkmkend AAAAAAAFDJ}
00010 {\cf20 */}\par
{\bkmkstart AAAAAAAFDK}{\bkmkend AAAAAAAFDK}
00011 \par
{\bkmkstart AAAAAAAFDL}{\bkmkend AAAAAAAFDL}
00012 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAFDM}{\bkmkend AAAAAAAFDM}
00013 \par
{\bkmkstart AAAAAAAFDN}{\bkmkend AAAAAAAFDN}
00014 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFDO}{\bkmkend AAAAAAAFDO}
00015 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFDP}{\bkmkend AAAAAAAFDP}
00016 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFDQ}{\bkmkend AAAAAAAFDQ}
00017 \par
{\bkmkstart AAAAAAAFDR}{\bkmkend AAAAAAAFDR}
00018 {\cf20 // namespace NST \{}\par
{\bkmkstart AAAAAAAFDS}{\bkmkend AAAAAAAFDS}
00019   {\cf17 class }ToolsException::ToolsExceptionImpl \{\par
{\bkmkstart AAAAAAAFDT}{\bkmkend AAAAAAAFDT}
00020   {\cf17 public}:\par
{\bkmkstart AAAAAAAFDU}{\bkmkend AAAAAAAFDU}
00021     ToolsExceptionImpl() \{\}\par
{\bkmkstart AAAAAAAFDV}{\bkmkend AAAAAAAFDV}
00022     ~ToolsExceptionImpl() \{\par
{\bkmkstart AAAAAAAFDW}{\bkmkend AAAAAAAFDW}
00023        {\cf18 int} i = 0;\par
{\bkmkstart AAAAAAAFDX}{\bkmkend AAAAAAAFDX}
00024        {\cf19 while}(pointers[i]) free(pointers[i++];\par
{\bkmkstart AAAAAAAFDY}{\bkmkend AAAAAAAFDY}
00025        free(pointers);\par
{\bkmkstart AAAAAAAFDZ}{\bkmkend AAAAAAAFDZ}
00026     \}\par
{\bkmkstart AAAAAAAFEA}{\bkmkend AAAAAAAFEA}
00027 {\cf20 //    std::string mountMessage(const char* fmt, va_list list) \{}\par
{\bkmkstart AAAAAAAFEB}{\bkmkend AAAAAAAFEB}
00028 {\cf20 /*}\par
{\bkmkstart AAAAAAAFEC}{\bkmkend AAAAAAAFEC}
00029 {\cf20         int szSize = 0;}\par
{\bkmkstart AAAAAAAFED}{\bkmkend AAAAAAAFED}
00030 {\cf20         int count = 1;}\par
{\bkmkstart AAAAAAAFEE}{\bkmkend AAAAAAAFEE}
00031 {\cf20         szWhat = (char *) malloc(szSize);}\par
{\bkmkstart AAAAAAAFEF}{\bkmkend AAAAAAAFEF}
00032 {\cf20         do \{}\par
{\bkmkstart AAAAAAAFEG}{\bkmkend AAAAAAAFEG}
00033 {\cf20            szSize += MAX_SIZE_ERR;}\par
{\bkmkstart AAAAAAAFEH}{\bkmkend AAAAAAAFEH}
00034 {\cf20            if (szWhat != 0x0) free (szWhat);}\par
{\bkmkstart AAAAAAAFEI}{\bkmkend AAAAAAAFEI}
00035 {\cf20            szWhat = (char *) malloc(szSize);}\par
{\bkmkstart AAAAAAAFEJ}{\bkmkend AAAAAAAFEJ}
00036 {\cf20            count = std::vsnprintf(szWhat, szSize, fmt, list);}\par
{\bkmkstart AAAAAAAFEK}{\bkmkend AAAAAAAFEK}
00037 {\cf20         \} while (count < 0);}\par
{\bkmkstart AAAAAAAFEL}{\bkmkend AAAAAAAFEL}
00038 {\cf20         addPointer(std::addressof(szWhat)); }\par
{\bkmkstart AAAAAAAFEM}{\bkmkend AAAAAAAFEM}
00039 {\cf20         return std::string(TXT_ERROR).append(szWhat);}\par
{\bkmkstart AAAAAAAFEN}{\bkmkend AAAAAAAFEN}
00040 {\cf20 }\par
{\bkmkstart AAAAAAAFEO}{\bkmkend AAAAAAAFEO}
00041 {\cf20     \}}\par
{\bkmkstart AAAAAAAFEP}{\bkmkend AAAAAAAFEP}
00042 {\cf20 */}\par
{\bkmkstart AAAAAAAFEQ}{\bkmkend AAAAAAAFEQ}
00043 {\cf20 //    const char* ToolsExceptionImpl::what() \{ return (const char *) szWhat; \}}\par
{\bkmkstart AAAAAAAFER}{\bkmkend AAAAAAAFER}
00044 \par
{\bkmkstart AAAAAAAFES}{\bkmkend AAAAAAAFES}
00045   {\cf17 private}:\par
{\bkmkstart AAAAAAAFET}{\bkmkend AAAAAAAFET}
00046     {\cf18 char} *szWhat = 0x0;\par
{\bkmkstart AAAAAAAFEU}{\bkmkend AAAAAAAFEU}
00047     {\cf18 int} size = 0;\par
{\bkmkstart AAAAAAAFEV}{\bkmkend AAAAAAAFEV}
00048     {\cf18 int} act  = 0;\par
{\bkmkstart AAAAAAAFEW}{\bkmkend AAAAAAAFEW}
00049     {\cf17 const} {\cf18 int} inc = 16;\par
{\bkmkstart AAAAAAAFEX}{\bkmkend AAAAAAAFEX}
00050     {\cf18 char} **pointers = 0x0;\par
{\bkmkstart AAAAAAAFEY}{\bkmkend AAAAAAAFEY}
00051 \par
{\bkmkstart AAAAAAAFEZ}{\bkmkend AAAAAAAFEZ}
00052     {\cf18 void} addPointer({\cf17 auto} ptr) \{\par
{\bkmkstart AAAAAAAFFA}{\bkmkend AAAAAAAFFA}
00053          {\cf19 if} (act == pointer) \{\par
{\bkmkstart AAAAAAAFFB}{\bkmkend AAAAAAAFFB}
00054             size += inc;\par
{\bkmkstart AAAAAAAFFC}{\bkmkend AAAAAAAFFC}
00055             pointers = ({\cf18 char} **) realloc(pointers,size * ({\cf18 void} *)); \par
{\bkmkstart AAAAAAAFFD}{\bkmkend AAAAAAAFFD}
00056          \}\par
{\bkmkstart AAAAAAAFFE}{\bkmkend AAAAAAAFFE}
00057          pointers[act++] = ptr;\par
{\bkmkstart AAAAAAAFFF}{\bkmkend AAAAAAAFFF}
00058          pointers[act] = 0x0;\par
{\bkmkstart AAAAAAAFFG}{\bkmkend AAAAAAAFFG}
00059     \}\par
{\bkmkstart AAAAAAAFFH}{\bkmkend AAAAAAAFFH}
00060 \par
{\bkmkstart AAAAAAAFFI}{\bkmkend AAAAAAAFFI}
00061 \}\par
{\bkmkstart AAAAAAAFFJ}{\bkmkend AAAAAAAFFJ}
00062  ToolsException::ToolsException({\cf17 const} {\cf18 char}* fmt, ...) \{\par
{\bkmkstart AAAAAAAFFK}{\bkmkend AAAAAAAFFK}
00063    _pImpl = {\cf17 new} ToolsExceptionImpl();\par
{\bkmkstart AAAAAAAFFL}{\bkmkend AAAAAAAFFL}
00064 \}\par
{\bkmkstart AAAAAAAFFM}{\bkmkend AAAAAAAFFM}
00065 \par
{\bkmkstart AAAAAAAFFN}{\bkmkend AAAAAAAFFN}
00066 ToolsException::ToolsException({\cf17 const} ToolsException& op) \par
{\bkmkstart AAAAAAAFFO}{\bkmkend AAAAAAAFFO}
00067 \}\par
{\bkmkstart AAAAAAAFFP}{\bkmkend AAAAAAAFFP}
00068 \par
{\bkmkstart AAAAAAAFFQ}{\bkmkend AAAAAAAFFQ}
00069 ToolsException& ToolsException::operator=({\cf17 const} ToolsException& op) \{\par
{\bkmkstart AAAAAAAFFR}{\bkmkend AAAAAAAFFR}
00070     {\cf19 if} ({\cf17 this} != &op) \{\par
{\bkmkstart AAAAAAAFFS}{\bkmkend AAAAAAAFFS}
00071         _pImpl.reset({\cf17 new} ToolsExceptionImpl(*op._pImpl));\par
{\bkmkstart AAAAAAAFFT}{\bkmkend AAAAAAAFFT}
00072     \}\par
{\bkmkstart AAAAAAAFFU}{\bkmkend AAAAAAAFFU}
00073     {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFFV}{\bkmkend AAAAAAAFFV}
00074 \}\par
{\bkmkstart AAAAAAAFFW}{\bkmkend AAAAAAAFFW}
00075 \par
{\bkmkstart AAAAAAAFFX}{\bkmkend AAAAAAAFFX}
00076 ToolsException::~ToolsException() \{\par
{\bkmkstart AAAAAAAFFY}{\bkmkend AAAAAAAFFY}
00077 \}\par
{\bkmkstart AAAAAAAFFZ}{\bkmkend AAAAAAAFFZ}
00078 ToolsException::~ToolsException() \{\par
{\bkmkstart AAAAAAAFGA}{\bkmkend AAAAAAAFGA}
00079 \}\par
{\bkmkstart AAAAAAAFGB}{\bkmkend AAAAAAAFGB}
00080 ToolsException::ToolsException({\cf17 const} {\cf18 char}* fmt, ...) \{\par
{\bkmkstart AAAAAAAFGC}{\bkmkend AAAAAAAFGC}
00081 \}\par
{\bkmkstart AAAAAAAFGD}{\bkmkend AAAAAAAFGD}
00082 ToolsException::what() \{\par
{\bkmkstart AAAAAAAFGE}{\bkmkend AAAAAAAFGE}
00083     {\cf19 return} pImpl->\par
{\bkmkstart AAAAAAAFGF}{\bkmkend AAAAAAAFGF}
00084 \}\par
{\bkmkstart AAAAAAAFGG}{\bkmkend AAAAAAAFGG}
00085 \par
{\bkmkstart AAAAAAAFGH}{\bkmkend AAAAAAAFGH}
00086 std::string ToolsException::mountMessage({\cf17 const} {\cf18 char}* fmt, va_list list) \{\par
{\bkmkstart AAAAAAAFGI}{\bkmkend AAAAAAAFGI}
00087     va_list args;\par
{\bkmkstart AAAAAAAFGJ}{\bkmkend AAAAAAAFGJ}
00088     va_start(args, fmt);\par
{\bkmkstart AAAAAAAFGK}{\bkmkend AAAAAAAFGK}
00089     std::string txt = _pImpl->mountMessage(fmt, args);\par
{\bkmkstart AAAAAAAFGL}{\bkmkend AAAAAAAFGL}
00090     va_end(args);\par
{\bkmkstart AAAAAAAFGM}{\bkmkend AAAAAAAFGM}
00091 \}\par
{\bkmkstart AAAAAAAFGN}{\bkmkend AAAAAAAFGN}
00092 {\cf17 const} {\cf18 char}* ToolsException::what() \{\par
{\bkmkstart AAAAAAAFGO}{\bkmkend AAAAAAAFGO}
00093 \}\par
{\bkmkstart AAAAAAAFGP}{\bkmkend AAAAAAAFGP}
00094 ToolsCastException::ToolsCastException ({\cf17 const} {\cf18 char}* fmt, ...) \{\par
{\bkmkstart AAAAAAAFGQ}{\bkmkend AAAAAAAFGQ}
00095 \par
{\bkmkstart AAAAAAAFGR}{\bkmkend AAAAAAAFGR}
00096 \}\par
{\bkmkstart AAAAAAAFGS}{\bkmkend AAAAAAAFGS}
00097 \par
{\bkmkstart AAAAAAAFGT}{\bkmkend AAAAAAAFGT}
00098     std::string mountMessage({\cf17 const} {\cf18 char}* fmt, va_list list) \{\par
{\bkmkstart AAAAAAAFGU}{\bkmkend AAAAAAAFGU}
00099         {\cf18 char} t[255];\par
{\bkmkstart AAAAAAAFGV}{\bkmkend AAAAAAAFGV}
00100         std::vsprintf(t, fmt, list);\par
{\bkmkstart AAAAAAAFGW}{\bkmkend AAAAAAAFGW}
00101         {\cf19 return} std::string(TXT_ERROR).append(t);\par
{\bkmkstart AAAAAAAFGX}{\bkmkend AAAAAAAFGX}
00102     \}\par
{\bkmkstart AAAAAAAFGY}{\bkmkend AAAAAAAFGY}
00103 \par
{\bkmkstart AAAAAAAFGZ}{\bkmkend AAAAAAAFGZ}
00104     ToolsCastException::ToolsCastException({\cf17 const} {\cf18 char}* fmt, ...) : std::logic_error(fmt) \{\par
{\bkmkstart AAAAAAAFHA}{\bkmkend AAAAAAAFHA}
00105         va_list args;\par
{\bkmkstart AAAAAAAFHB}{\bkmkend AAAAAAAFHB}
00106         va_start(args, fmt);\par
{\bkmkstart AAAAAAAFHC}{\bkmkend AAAAAAAFHC}
00107         std::string txt = mountMessage(fmt, args);\par
{\bkmkstart AAAAAAAFHD}{\bkmkend AAAAAAAFHD}
00108         va_end(args);\par
{\bkmkstart AAAAAAAFHE}{\bkmkend AAAAAAAFHE}
00109         this->bad_cast::~bad_cast();\par
{\bkmkstart AAAAAAAFHF}{\bkmkend AAAAAAAFHF}
00110         {\cf17 new} ({\cf17 this}) bad_cast(txt);\par
{\bkmkstart AAAAAAAFHG}{\bkmkend AAAAAAAFHG}
00111 \{ {\cf19 return} {\cf22 "o noez! an exception!"}; \}\par
{\bkmkstart AAAAAAAFHH}{\bkmkend AAAAAAAFHH}
00112     \}\par
{\bkmkstart AAAAAAAFHI}{\bkmkend AAAAAAAFHI}
00113     {\cf17 const} {\cf18 char}* ToolsCastException::what(){\cf17  const override }\{\par
{\bkmkstart AAAAAAAFHJ}{\bkmkend AAAAAAAFHJ}
00114          return ;\par
{\bkmkstart AAAAAAAFHK}{\bkmkend AAAAAAAFHK}
00115     \}\par
{\bkmkstart AAAAAAAFHL}{\bkmkend AAAAAAAFHL}
00116 \par
{\bkmkstart AAAAAAAFHM}{\bkmkend AAAAAAAFHM}
00117 \};\par
{\bkmkstart AAAAAAAFHN}{\bkmkend AAAAAAAFHN}
00118 {\cf20 // \}}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
integer.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/integer.cpp}
{\xe \v code/src/integer.cpp}
{\bkmkstart AAAAAAAFHO}
{\bkmkend AAAAAAAFHO}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFHP}{\bkmkend AAAAAAAFHP}
00001 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFHQ}{\bkmkend AAAAAAAFHQ}
00002 \par
{\bkmkstart AAAAAAAFHR}{\bkmkend AAAAAAAFHR}
00003 {\cf21 #include "config.h"} \par
{\bkmkstart AAAAAAAFHS}{\bkmkend AAAAAAAFHS}
00004 \par
{\bkmkstart AAAAAAAFHT}{\bkmkend AAAAAAAFHT}
00005 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAFHU}{\bkmkend AAAAAAAFHU}
00006 {\cf21 #include "integer.hpp"}\par
{\bkmkstart AAAAAAAFHV}{\bkmkend AAAAAAAFHV}
00007 \par
{\bkmkstart AAAAAAAFHW}{\bkmkend AAAAAAAFHW}
00008 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFHX}{\bkmkend AAAAAAAFHX}
00009 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFHY}{\bkmkend AAAAAAAFHY}
00010 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFHZ}{\bkmkend AAAAAAAFHZ}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAFIA}{\bkmkend AAAAAAAFIA}
00012 \par
{\bkmkstart AAAAAAAFIB}{\bkmkend AAAAAAAFIB}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFIC}{\bkmkend AAAAAAAFIC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFID" }{}}{\fldrslt {\cs37\ul\cf2 00014}}}
    Integer::Integer({\cf18 short}       value)  \{ validateInteger(({\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFIE}{\bkmkend AAAAAAAFIE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIF" }{}}{\fldrslt {\cs37\ul\cf2 00015}}}
    Integer::Integer({\cf18 int}         value)  \{ validateInteger(({\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFIG}{\bkmkend AAAAAAAFIG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIH" }{}}{\fldrslt {\cs37\ul\cf2 00016}}}
    Integer::Integer({\cf18 long}        value)  \{ validateInteger(({\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFII}{\bkmkend AAAAAAAFII}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIJ" }{}}{\fldrslt {\cs37\ul\cf2 00017}}}
    Integer::Integer({\cf18 long} {\cf18 long}   value)  \{ validateInteger(({\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFIK}{\bkmkend AAAAAAAFIK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFIL" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
    Integer::Integer({\cf17 const} {\cf18 char}* value)  \{\par
{\bkmkstart AAAAAAAFIM}{\bkmkend AAAAAAAFIM}
00019         regex pat\{{\cf22 "^[+-]?[^0-9]+$"}\};\par
{\bkmkstart AAAAAAAFIN}{\bkmkend AAAAAAAFIN}
00020         {\cf18 bool} match = regex_search(value, pat);\par
{\bkmkstart AAAAAAAFIO}{\bkmkend AAAAAAAFIO}
00021         {\cf19 if} (!match) {\cf19 throw} {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
(BAD_NATURAL, value);\par
{\bkmkstart AAAAAAAFIP}{\bkmkend AAAAAAAFIP}
00022         {\cf18 long} {\cf18 long} res = 0;\par
{\bkmkstart AAAAAAAFIQ}{\bkmkend AAAAAAAFIQ}
00023         {\cf18 int} i = (value[0] == {\cf23 '+'} || value[0] == {\cf23 '-'}) ? 1 : 0;\par
{\bkmkstart AAAAAAAFIR}{\bkmkend AAAAAAAFIR}
00024         {\cf19 for} (i; i < strlen(value); i++) res = (res * 10) + value[i];\par
{\bkmkstart AAAAAAAFIS}{\bkmkend AAAAAAAFIS}
00025         {\cf19 if} (value[0] == {\cf23 '-'}) res *= -1;\par
{\bkmkstart AAAAAAAFIT}{\bkmkend AAAAAAAFIT}
00026         validateInteger(res);\par
{\bkmkstart AAAAAAAFIU}{\bkmkend AAAAAAAFIU}
00027    \}\par
{\bkmkstart AAAAAAAFIV}{\bkmkend AAAAAAAFIV}
00028 \par
{\bkmkstart AAAAAAAFIW}{\bkmkend AAAAAAAFIW}
00029    {\cf18 void} Integer::validateInteger({\cf18 long} {\cf18 long} value)  \{\par
{\bkmkstart AAAAAAAFIX}{\bkmkend AAAAAAAFIX}
00030       {\cf19 if} (value > LONG_MAX || value < LONG_MIN) mask |= 0x08;\par
{\bkmkstart AAAAAAAFIY}{\bkmkend AAAAAAAFIY}
00031       {\cf19 if} (value > INT_MAX  || value < LONG_MIN) mask |= 0x04;\par
{\bkmkstart AAAAAAAFIZ}{\bkmkend AAAAAAAFIZ}
00032       {\cf19 if} (value > SHRT_MAX || value < SHRT_MIN) mask |= 0x02;\par
{\bkmkstart AAAAAAAFJA}{\bkmkend AAAAAAAFJA}
00033    \}\par
{\bkmkstart AAAAAAAFJB}{\bkmkend AAAAAAAFJB}
00034 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
natural.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/natural.cpp}
{\xe \v code/src/natural.cpp}
{\bkmkstart AAAAAAAFJC}
{\bkmkend AAAAAAAFJC}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFJD}{\bkmkend AAAAAAAFJD}
00001 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFJE}{\bkmkend AAAAAAAFJE}
00002 \par
{\bkmkstart AAAAAAAFJF}{\bkmkend AAAAAAAFJF}
00003 {\cf21 #include "config.h"} \par
{\bkmkstart AAAAAAAFJG}{\bkmkend AAAAAAAFJG}
00004 \par
{\bkmkstart AAAAAAAFJH}{\bkmkend AAAAAAAFJH}
00005 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAFJI}{\bkmkend AAAAAAAFJI}
00006 {\cf21 #include "natural.hpp"}\par
{\bkmkstart AAAAAAAFJJ}{\bkmkend AAAAAAAFJJ}
00007 \par
{\bkmkstart AAAAAAAFJK}{\bkmkend AAAAAAAFJK}
00008 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFJL}{\bkmkend AAAAAAAFJL}
00009 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFJM}{\bkmkend AAAAAAAFJM}
00010 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFJN}{\bkmkend AAAAAAAFJN}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAFJO}{\bkmkend AAAAAAAFJO}
00012 \par
{\bkmkstart AAAAAAAFJP}{\bkmkend AAAAAAAFJP}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFJQ}{\bkmkend AAAAAAAFJQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJR" }{}}{\fldrslt {\cs37\ul\cf2 00014}}}
    Natural::Natural({\cf18 short}       value)  \{ validateNatural(({\cf18 unsigned} {\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFJS}{\bkmkend AAAAAAAFJS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJT" }{}}{\fldrslt {\cs37\ul\cf2 00015}}}
    Natural::Natural({\cf18 int}         value)  \{ validateNatural(({\cf18 unsigned} {\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFJU}{\bkmkend AAAAAAAFJU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJV" }{}}{\fldrslt {\cs37\ul\cf2 00016}}}
    Natural::Natural({\cf18 long}        value)  \{ validateNatural(({\cf18 unsigned} {\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFJW}{\bkmkend AAAAAAAFJW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJX" }{}}{\fldrslt {\cs37\ul\cf2 00017}}}
    Natural::Natural({\cf18 long} {\cf18 long}   value)  \{ validateNatural(({\cf18 unsigned} {\cf18 long} {\cf18 long}) value); \}\par
{\bkmkstart AAAAAAAFJY}{\bkmkend AAAAAAAFJY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFJZ" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
    Natural::Natural({\cf17 const} {\cf18 char}* value)  \{ \par
{\bkmkstart AAAAAAAFKA}{\bkmkend AAAAAAAFKA}
00019         regex pat\{{\cf22 "^[^0-9]+$"}\};\par
{\bkmkstart AAAAAAAFKB}{\bkmkend AAAAAAAFKB}
00020         {\cf18 bool} match = regex_search(value, pat);\par
{\bkmkstart AAAAAAAFKC}{\bkmkend AAAAAAAFKC}
00021         {\cf19 if} (!match) {\cf19 throw} {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
(BAD_NATURAL, value);\par
{\bkmkstart AAAAAAAFKD}{\bkmkend AAAAAAAFKD}
00022         {\cf18 unsigned} {\cf18 long} {\cf18 long} res = 0;\par
{\bkmkstart AAAAAAAFKE}{\bkmkend AAAAAAAFKE}
00023         {\cf19 for} ({\cf18 int} i = 0; i < strlen(value); i++) res = (res * 10) + value[i];\par
{\bkmkstart AAAAAAAFKF}{\bkmkend AAAAAAAFKF}
00024         validateNatural(res);\par
{\bkmkstart AAAAAAAFKG}{\bkmkend AAAAAAAFKG}
00025    \}\par
{\bkmkstart AAAAAAAFKH}{\bkmkend AAAAAAAFKH}
00026    {\cf18 void} Natural::validateNatural({\cf18 unsigned} {\cf18 long} {\cf18 long} value)  \{\par
{\bkmkstart AAAAAAAFKI}{\bkmkend AAAAAAAFKI}
00027       {\cf19 if} (value < 0) {\cf19 throw} {\cf17 new} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIN" }{}}{\fldrslt {\cs37\ul\cf2 ToolsValueException}}}
(BAD_NATURAL, to_string(value).c_str());\par
{\bkmkstart AAAAAAAFKJ}{\bkmkend AAAAAAAFKJ}
00028       {\cf19 if} (value > ULONG_MAX) mask |= 0x08;\par
{\bkmkstart AAAAAAAFKK}{\bkmkend AAAAAAAFKK}
00029       {\cf19 if} (value > UINT_MAX)  mask |= 0x04;\par
{\bkmkstart AAAAAAAFKL}{\bkmkend AAAAAAAFKL}
00030       {\cf19 if} (value > USHRT_MAX) mask |= 0x02;\par
{\bkmkstart AAAAAAAFKM}{\bkmkend AAAAAAAFKM}
00031    \}\par
{\bkmkstart AAAAAAAFKN}{\bkmkend AAAAAAAFKN}
00032    sstring Natural::toString() \{\par
{\bkmkstart AAAAAAAFKO}{\bkmkend AAAAAAAFKO}
00033        {\cf19 return} to_string(value);\par
{\bkmkstart AAAAAAAFKP}{\bkmkend AAAAAAAFKP}
00034    \}\par
{\bkmkstart AAAAAAAFKQ}{\bkmkend AAAAAAAFKQ}
00035    {\cf18 char} * Natural::toChar() \{\par
{\bkmkstart AAAAAAAFKR}{\bkmkend AAAAAAAFKR}
00036        {\cf19 return} strdup(to_string(value).c_str());;\par
{\bkmkstart AAAAAAAFKS}{\bkmkend AAAAAAAFKS}
00037    \}\par
{\bkmkstart AAAAAAAFKT}{\bkmkend AAAAAAAFKT}
00038 \par
{\bkmkstart AAAAAAAFKU}{\bkmkend AAAAAAAFKU}
00039 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
path.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/path.cpp}
{\xe \v code/src/path.cpp}
{\bkmkstart AAAAAAAFKV}
{\bkmkend AAAAAAAFKV}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFKW}{\bkmkend AAAAAAAFKW}
00001 {\cf21 #include <string>}\par
{\bkmkstart AAAAAAAFKX}{\bkmkend AAAAAAAFKX}
00002 \par
{\bkmkstart AAAAAAAFKY}{\bkmkend AAAAAAAFKY}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFKZ}{\bkmkend AAAAAAAFKZ}
00004 {\cf21 #include "path.hpp"}\par
{\bkmkstart AAAAAAAFLA}{\bkmkend AAAAAAAFLA}
00005 \par
{\bkmkstart AAAAAAAFLB}{\bkmkend AAAAAAAFLB}
00006 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAFLC}{\bkmkend AAAAAAAFLC}
00007 \par
{\bkmkstart AAAAAAAFLD}{\bkmkend AAAAAAAFLD}
00008 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFLE}{\bkmkend AAAAAAAFLE}
00009       Path::Path({\cf18 string} value) \{ path = value;\}\par
{\bkmkstart AAAAAAAFLF}{\bkmkend AAAAAAAFLF}
00010       Path::Path({\cf17 const} {\cf18 char}* value) \{ path = string(value); \}\par
{\bkmkstart AAAAAAAFLG}{\bkmkend AAAAAAAFLG}
00011       {\cf18 bool} Path::isDir() \{ {\cf19 return} {\cf17 false}; \}\par
{\bkmkstart AAAAAAAFLH}{\bkmkend AAAAAAAFLH}
00012       {\cf18 bool} Path::isFile() \{ {\cf19 return} {\cf17 false}; \}\par
{\bkmkstart AAAAAAAFLI}{\bkmkend AAAAAAAFLI}
00013       {\cf18 bool} Path::exists() \{ {\cf19 return} {\cf17 false}; \}\par
{\bkmkstart AAAAAAAFLJ}{\bkmkend AAAAAAAFLJ}
00014       {\cf18 string} Path::getDrive() \{ {\cf19 return} {\cf22 ""}; \}\par
{\bkmkstart AAAAAAAFLK}{\bkmkend AAAAAAAFLK}
00015       {\cf18 string} Path::getDir()\{ {\cf19 return} {\cf22 ""}; \}\par
{\bkmkstart AAAAAAAFLL}{\bkmkend AAAAAAAFLL}
00016       {\cf18 string} Path::getName()\{ {\cf19 return} {\cf22 ""}; \}\par
{\bkmkstart AAAAAAAFLM}{\bkmkend AAAAAAAFLM}
00017       {\cf18 string} Path::getExt()\{ {\cf19 return} {\cf22 ""}; \}\par
{\bkmkstart AAAAAAAFLN}{\bkmkend AAAAAAAFLN}
00018       {\cf18 string} Path::getPath() \{ {\cf19 return} path;\}\par
{\bkmkstart AAAAAAAFLO}{\bkmkend AAAAAAAFLO}
00019 \}\par
{\bkmkstart AAAAAAAFLP}{\bkmkend AAAAAAAFLP}
00020 {\cf20 /*}\par
{\bkmkstart AAAAAAAFLQ}{\bkmkend AAAAAAAFLQ}
00021 {\cf20     filesystem::path        validateDir       (const char* value) \{}\par
{\bkmkstart AAAAAAAFLR}{\bkmkend AAAAAAAFLR}
00022 {\cf20         // If is not a valid path, chdir return -1}\par
{\bkmkstart AAAAAAAFLS}{\bkmkend AAAAAAAFLS}
00023 {\cf20         // Some times chdir returns 0 but not change the directory}\par
{\bkmkstart AAAAAAAFLT}{\bkmkend AAAAAAAFLT}
00024 {\cf20         char old[256];}\par
{\bkmkstart AAAAAAAFLU}{\bkmkend AAAAAAAFLU}
00025 {\cf20         char tmp[256];}\par
{\bkmkstart AAAAAAAFLV}{\bkmkend AAAAAAAFLV}
00026 {\cf20         int rc, rc2;}\par
{\bkmkstart AAAAAAAFLW}{\bkmkend AAAAAAAFLW}
00027 {\cf20         char* ptr = getcwd(old, 256);}\par
{\bkmkstart AAAAAAAFLX}{\bkmkend AAAAAAAFLX}
00028 {\cf20         if (strcmp(value, ".") == 0) return filesystem::path(old);}\par
{\bkmkstart AAAAAAAFLY}{\bkmkend AAAAAAAFLY}
00029 {\cf20         if (strcmp(value, old) == 0) return filesystem::path(old);}\par
{\bkmkstart AAAAAAAFLZ}{\bkmkend AAAAAAAFLZ}
00030 {\cf20         rc = _chdir(value);}\par
{\bkmkstart AAAAAAAFMA}{\bkmkend AAAAAAAFMA}
00031 {\cf20         if (rc) throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_DIR );}\par
{\bkmkstart AAAAAAAFMB}{\bkmkend AAAAAAAFMB}
00032 {\cf20         ptr = getcwd(tmp, 256);}\par
{\bkmkstart AAAAAAAFMC}{\bkmkend AAAAAAAFMC}
00033 {\cf20         rc = chdir(old);}\par
{\bkmkstart AAAAAAAFMD}{\bkmkend AAAAAAAFMD}
00034 {\cf20         #ifdef _WIN32 // Windows is case insensitive}\par
{\bkmkstart AAAAAAAFME}{\bkmkend AAAAAAAFME}
00035 {\cf20             rc2 = strcmpi(old, tmp);}\par
{\bkmkstart AAAAAAAFMF}{\bkmkend AAAAAAAFMF}
00036 {\cf20         #else}\par
{\bkmkstart AAAAAAAFMG}{\bkmkend AAAAAAAFMG}
00037 {\cf20             rc2 = strcmp(old, tmp);}\par
{\bkmkstart AAAAAAAFMH}{\bkmkend AAAAAAAFMH}
00038 {\cf20         #endif}\par
{\bkmkstart AAAAAAAFMI}{\bkmkend AAAAAAAFMI}
00039 {\cf20 }\par
{\bkmkstart AAAAAAAFMJ}{\bkmkend AAAAAAAFMJ}
00040 {\cf20         if (rc2 == 0) throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_DIR);}\par
{\bkmkstart AAAAAAAFMK}{\bkmkend AAAAAAAFMK}
00041 {\cf20         return filesystem::path(value);}\par
{\bkmkstart AAAAAAAFML}{\bkmkend AAAAAAAFML}
00042 {\cf20     \}}\par
{\bkmkstart AAAAAAAFMM}{\bkmkend AAAAAAAFMM}
00043 {\cf20     filesystem::path        validateDirExist(const char* value) \{}\par
{\bkmkstart AAAAAAAFMN}{\bkmkend AAAAAAAFMN}
00044 {\cf20         struct stat info;}\par
{\bkmkstart AAAAAAAFMO}{\bkmkend AAAAAAAFMO}
00045 {\cf20         validateDir(value);}\par
{\bkmkstart AAAAAAAFMP}{\bkmkend AAAAAAAFMP}
00046 {\cf20         int rc = stat(value, &info);}\par
{\bkmkstart AAAAAAAFMQ}{\bkmkend AAAAAAAFMQ}
00047 {\cf20         if (stat(value, &info) != 0) throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_NO_DIR);}\par
{\bkmkstart AAAAAAAFMR}{\bkmkend AAAAAAAFMR}
00048 {\cf20         unsigned short mask = info.st_mode & S_IFDIR;}\par
{\bkmkstart AAAAAAAFMS}{\bkmkend AAAAAAAFMS}
00049 {\cf20         //mask ^= 16384; // 100 0000 0000 0000}\par
{\bkmkstart AAAAAAAFMT}{\bkmkend AAAAAAAFMT}
00050 {\cf20         if (mask == 0)          throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_DIR_NOTFND);}\par
{\bkmkstart AAAAAAAFMU}{\bkmkend AAAAAAAFMU}
00051 {\cf20         return filesystem::path(value);}\par
{\bkmkstart AAAAAAAFMV}{\bkmkend AAAAAAAFMV}
00052 {\cf20     \}}\par
{\bkmkstart AAAAAAAFMW}{\bkmkend AAAAAAAFMW}
00053 {\cf20     filesystem::path        validateFile      (const char* value) \{}\par
{\bkmkstart AAAAAAAFMX}{\bkmkend AAAAAAAFMX}
00054 {\cf20         try \{}\par
{\bkmkstart AAAAAAAFMY}{\bkmkend AAAAAAAFMY}
00055 {\cf20             return filesystem::path(value);}\par
{\bkmkstart AAAAAAAFMZ}{\bkmkend AAAAAAAFMZ}
00056 {\cf20         \}}\par
{\bkmkstart AAAAAAAFNA}{\bkmkend AAAAAAAFNA}
00057 {\cf20         catch (exception ex) \{}\par
{\bkmkstart AAAAAAAFNB}{\bkmkend AAAAAAAFNB}
00058 {\cf20             throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_FILE);}\par
{\bkmkstart AAAAAAAFNC}{\bkmkend AAAAAAAFNC}
00059 {\cf20         \}}\par
{\bkmkstart AAAAAAAFND}{\bkmkend AAAAAAAFND}
00060 {\cf20     \}}\par
{\bkmkstart AAAAAAAFNE}{\bkmkend AAAAAAAFNE}
00061 {\cf20     filesystem::path        validateFileExist (const char* value) \{}\par
{\bkmkstart AAAAAAAFNF}{\bkmkend AAAAAAAFNF}
00062 {\cf20         struct stat info;}\par
{\bkmkstart AAAAAAAFNG}{\bkmkend AAAAAAAFNG}
00063 {\cf20         filesystem::path p = validateFile(value);}\par
{\bkmkstart AAAAAAAFNH}{\bkmkend AAAAAAAFNH}
00064 {\cf20         if (stat(value, &info) != 0) throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_FILE_NOTFND);}\par
{\bkmkstart AAAAAAAFNI}{\bkmkend AAAAAAAFNI}
00065 {\cf20         if (info.st_mode & S_IFDIR)  throw new CmdLineValueException(TXT_VAL_EXPECTED, value, TXT_FILE_DIR);}\par
{\bkmkstart AAAAAAAFNJ}{\bkmkend AAAAAAAFNJ}
00066 {\cf20         return p;}\par
{\bkmkstart AAAAAAAFNK}{\bkmkend AAAAAAAFNK}
00067 {\cf20     \}}\par
{\bkmkstart AAAAAAAFNL}{\bkmkend AAAAAAAFNL}
00068 {\cf20 */}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
real.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/real.cpp}
{\xe \v code/src/real.cpp}
{\bkmkstart AAAAAAAFNM}
{\bkmkend AAAAAAAFNM}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFNN}{\bkmkend AAAAAAAFNN}
00001 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFNO}{\bkmkend AAAAAAAFNO}
00002 \par
{\bkmkstart AAAAAAAFNP}{\bkmkend AAAAAAAFNP}
00003 {\cf21 #include "config.h"} \par
{\bkmkstart AAAAAAAFNQ}{\bkmkend AAAAAAAFNQ}
00004 \par
{\bkmkstart AAAAAAAFNR}{\bkmkend AAAAAAAFNR}
00005 {\cf21 #include "exceptions.hpp"}\par
{\bkmkstart AAAAAAAFNS}{\bkmkend AAAAAAAFNS}
00006 {\cf21 #include "real.hpp"}\par
{\bkmkstart AAAAAAAFNT}{\bkmkend AAAAAAAFNT}
00007 \par
{\bkmkstart AAAAAAAFNU}{\bkmkend AAAAAAAFNU}
00008 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFNV}{\bkmkend AAAAAAAFNV}
00009 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFNW}{\bkmkend AAAAAAAFNW}
00010 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFNX}{\bkmkend AAAAAAAFNX}
00011 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAAFNY}{\bkmkend AAAAAAAFNY}
00012 \par
{\bkmkstart AAAAAAAFNZ}{\bkmkend AAAAAAAFNZ}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFOA}{\bkmkend AAAAAAAFOA}
00014    Real::Real({\cf18 float}       value)  \{ validateReal(({\cf18 long} {\cf18 double}) value); \}\par
{\bkmkstart AAAAAAAFOB}{\bkmkend AAAAAAAFOB}
00015    Real::Real({\cf18 double}      value)  \{ validateReal(({\cf18 long} {\cf18 double}) value); \}\par
{\bkmkstart AAAAAAAFOC}{\bkmkend AAAAAAAFOC}
00016    Real::Real({\cf18 long} {\cf18 double} value)  \{ validateReal(({\cf18 long} {\cf18 double}) value); \}\par
{\bkmkstart AAAAAAAFOD}{\bkmkend AAAAAAAFOD}
00017    Real::Real({\cf17 const} {\cf18 char}* value)  \{\par
{\bkmkstart AAAAAAAFOE}{\bkmkend AAAAAAAFOE}
00018         regex pat\{{\cf22 "^[+-]?[0-9][.]?[0-9]*+$"}\};\par
{\bkmkstart AAAAAAAFOF}{\bkmkend AAAAAAAFOF}
00019         {\cf18 bool} match = regex_search(value, pat);\par
{\bkmkstart AAAAAAAFOG}{\bkmkend AAAAAAAFOG}
00020         {\cf19 if} (!match) {\cf19 throw} {\cf17 new} ToolsValueException(BAD_REAL, value);\par
{\bkmkstart AAAAAAAFOH}{\bkmkend AAAAAAAFOH}
00021         {\cf18 bool} dec = {\cf17 false};\par
{\bkmkstart AAAAAAAFOI}{\bkmkend AAAAAAAFOI}
00022         {\cf18 int}  scale = 0;\par
{\bkmkstart AAAAAAAFOJ}{\bkmkend AAAAAAAFOJ}
00023         {\cf18 long} {\cf18 double} res = 0.0;\par
{\bkmkstart AAAAAAAFOK}{\bkmkend AAAAAAAFOK}
00024         {\cf18 int} i = (value[0] == {\cf23 '+'} || value[0] == {\cf23 '-'}) ? 1 : 0;\par
{\bkmkstart AAAAAAAFOL}{\bkmkend AAAAAAAFOL}
00025         {\cf19 for} (i; i < strlen(value); i++) \{\par
{\bkmkstart AAAAAAAFOM}{\bkmkend AAAAAAAFOM}
00026             {\cf19 if} (value[i] == {\cf23 '.'}) dec = {\cf17 true};\par
{\bkmkstart AAAAAAAFON}{\bkmkend AAAAAAAFON}
00027             res = (res * 10) + value[i];\par
{\bkmkstart AAAAAAAFOO}{\bkmkend AAAAAAAFOO}
00028             {\cf19 if} (dec) scale++;\par
{\bkmkstart AAAAAAAFOP}{\bkmkend AAAAAAAFOP}
00029         \} \par
{\bkmkstart AAAAAAAFOQ}{\bkmkend AAAAAAAFOQ}
00030         {\cf19 if} (value[0] == {\cf23 '-'}) res *= -1;\par
{\bkmkstart AAAAAAAFOR}{\bkmkend AAAAAAAFOR}
00031         res = res / (10 ^ scale);\par
{\bkmkstart AAAAAAAFOS}{\bkmkend AAAAAAAFOS}
00032         validateReal(res);\par
{\bkmkstart AAAAAAAFOT}{\bkmkend AAAAAAAFOT}
00033    \}\par
{\bkmkstart AAAAAAAFOU}{\bkmkend AAAAAAAFOU}
00034 \par
{\bkmkstart AAAAAAAFOV}{\bkmkend AAAAAAAFOV}
00035    {\cf18 void} Real::validateReal({\cf18 long} {\cf18 long} value)  \{\par
{\bkmkstart AAAAAAAFOW}{\bkmkend AAAAAAAFOW}
00036       {\cf19 if} (value > DBL_MAX || value < DBL_MIN) mask |= 0x04;\par
{\bkmkstart AAAAAAAFOX}{\bkmkend AAAAAAAFOX}
00037       {\cf19 if} (value > FLT_MAX || value < FLT_MIN) mask |= 0x02;\par
{\bkmkstart AAAAAAAFOY}{\bkmkend AAAAAAAFOY}
00038    \}\par
{\bkmkstart AAAAAAAFOZ}{\bkmkend AAAAAAAFOZ}
00039 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sstring.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/sstring.cpp}
{\xe \v code/src/sstring.cpp}
{\bkmkstart AAAAAAAFPA}
{\bkmkend AAAAAAAFPA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFPB}{\bkmkend AAAAAAAFPB}
00001 {\cf21 #include <cctype>}\par
{\bkmkstart AAAAAAAFPC}{\bkmkend AAAAAAAFPC}
00002 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFPD}{\bkmkend AAAAAAAFPD}
00003 {\cf21 #include <stdarg.h>}\par
{\bkmkstart AAAAAAAFPE}{\bkmkend AAAAAAAFPE}
00004 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFPF}{\bkmkend AAAAAAAFPF}
00005 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAFPG}{\bkmkend AAAAAAAFPG}
00006 {\cf21 #include <filesystem>}\par
{\bkmkstart AAAAAAAFPH}{\bkmkend AAAAAAAFPH}
00007 \par
{\bkmkstart AAAAAAAFPI}{\bkmkend AAAAAAAFPI}
00008 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFPJ}{\bkmkend AAAAAAAFPJ}
00009 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFPK}{\bkmkend AAAAAAAFPK}
00010 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFPL}{\bkmkend AAAAAAAFPL}
00011 \par
{\bkmkstart AAAAAAAFPM}{\bkmkend AAAAAAAFPM}
00012 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFPN}{\bkmkend AAAAAAAFPN}
00013    sstring&     sstring::ltrim() \{\par
{\bkmkstart AAAAAAAFPO}{\bkmkend AAAAAAAFPO}
00014         {\cf18 int} i = 0;\par
{\bkmkstart AAAAAAAFPP}{\bkmkend AAAAAAAFPP}
00015         {\cf19 while} (at(i) == {\cf23 ' '} || at(i) == {\cf23 '\\t'} || at(i) == {\cf23 '\\r'}) i++;\par
{\bkmkstart AAAAAAAFPQ}{\bkmkend AAAAAAAFPQ}
00016         assign(substr(i));\par
{\bkmkstart AAAAAAAFPR}{\bkmkend AAAAAAAFPR}
00017         {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFPS}{\bkmkend AAAAAAAFPS}
00018      \}\par
{\bkmkstart AAAAAAAFPT}{\bkmkend AAAAAAAFPT}
00019    sstring&     sstring::rtrim() \{\par
{\bkmkstart AAAAAAAFPU}{\bkmkend AAAAAAAFPU}
00020         {\cf18 size_t} i;\par
{\bkmkstart AAAAAAAFPV}{\bkmkend AAAAAAAFPV}
00021         {\cf18 bool} done = {\cf17 false};\par
{\bkmkstart AAAAAAAFPW}{\bkmkend AAAAAAAFPW}
00022         {\cf19 for} (i = this->length() - 1; i > -1; i--) \{\par
{\bkmkstart AAAAAAAFPX}{\bkmkend AAAAAAAFPX}
00023              {\cf19 switch}(at(i)) \{\par
{\bkmkstart AAAAAAAFPY}{\bkmkend AAAAAAAFPY}
00024                 {\cf19 case} {\cf23 ' '}:\par
{\bkmkstart AAAAAAAFPZ}{\bkmkend AAAAAAAFPZ}
00025                 {\cf19 case} {\cf23 '\\t'}: \par
{\bkmkstart AAAAAAAFQA}{\bkmkend AAAAAAAFQA}
00026                 {\cf19 case} {\cf23 '\\r'}:\par
{\bkmkstart AAAAAAAFQB}{\bkmkend AAAAAAAFQB}
00027                 {\cf19 case} {\cf23 '\\n'}: {\cf19 break};\par
{\bkmkstart AAAAAAAFQC}{\bkmkend AAAAAAAFQC}
00028                 {\cf19 default}: done = {\cf17 true};\par
{\bkmkstart AAAAAAAFQD}{\bkmkend AAAAAAAFQD}
00029              \}\par
{\bkmkstart AAAAAAAFQE}{\bkmkend AAAAAAAFQE}
00030              {\cf19 if} (done) {\cf19 break};\par
{\bkmkstart AAAAAAAFQF}{\bkmkend AAAAAAAFQF}
00031         \}\par
{\bkmkstart AAAAAAAFQG}{\bkmkend AAAAAAAFQG}
00032         assign(substr(0, i));\par
{\bkmkstart AAAAAAAFQH}{\bkmkend AAAAAAAFQH}
00033         {\cf19 return} *{\cf17 this};     \par
{\bkmkstart AAAAAAAFQI}{\bkmkend AAAAAAAFQI}
00034    \}\par
{\bkmkstart AAAAAAAFQJ}{\bkmkend AAAAAAAFQJ}
00035    sstring&     sstring::trim() \{\par
{\bkmkstart AAAAAAAFQK}{\bkmkend AAAAAAAFQK}
00036          {\cf19 return} ltrim().rtrim();\par
{\bkmkstart AAAAAAAFQL}{\bkmkend AAAAAAAFQL}
00037      \}\par
{\bkmkstart AAAAAAAFQM}{\bkmkend AAAAAAAFQM}
00038    sstring&     sstring::toUpper() \{\par
{\bkmkstart AAAAAAAFQN}{\bkmkend AAAAAAAFQN}
00039       {\cf19 for} ({\cf18 size_t} i = 0; i < length(); i++) at(i) = toupper(at(i));\par
{\bkmkstart AAAAAAAFQO}{\bkmkend AAAAAAAFQO}
00040       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFQP}{\bkmkend AAAAAAAFQP}
00041    \}\par
{\bkmkstart AAAAAAAFQQ}{\bkmkend AAAAAAAFQQ}
00042    sstring&     sstring::toLower() \{\par
{\bkmkstart AAAAAAAFQR}{\bkmkend AAAAAAAFQR}
00043       {\cf19 for} ({\cf18 size_t} i = 0; i < length(); i++) at(i) = tolower(at(i));\par
{\bkmkstart AAAAAAAFQS}{\bkmkend AAAAAAAFQS}
00044       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFQT}{\bkmkend AAAAAAAFQT}
00045    \}\par
{\bkmkstart AAAAAAAFQU}{\bkmkend AAAAAAAFQU}
00046    sstring*     sstring::toString() \{\par
{\bkmkstart AAAAAAAFQV}{\bkmkend AAAAAAAFQV}
00047          {\cf19 return} {\cf17 new} sstring(*{\cf17 this});\par
{\bkmkstart AAAAAAAFQW}{\bkmkend AAAAAAAFQW}
00048     \}\par
{\bkmkstart AAAAAAAFQX}{\bkmkend AAAAAAAFQX}
00049    {\cf18 char}*        sstring::toArr() \{\par
{\bkmkstart AAAAAAAFQY}{\bkmkend AAAAAAAFQY}
00050       {\cf18 char} *res = 0x0;\par
{\bkmkstart AAAAAAAFQZ}{\bkmkend AAAAAAAFQZ}
00051       res = ({\cf18 char} *) malloc(length() + 1);\par
{\bkmkstart AAAAAAAFRA}{\bkmkend AAAAAAAFRA}
00052       {\cf19 if} (res == 0x0) \{\par
{\bkmkstart AAAAAAAFRB}{\bkmkend AAAAAAAFRB}
00053           errno = ENOMEM;\par
{\bkmkstart AAAAAAAFRC}{\bkmkend AAAAAAAFRC}
00054           {\cf19 return} 0x0;\par
{\bkmkstart AAAAAAAFRD}{\bkmkend AAAAAAAFRD}
00055       \}\par
{\bkmkstart AAAAAAAFRE}{\bkmkend AAAAAAAFRE}
00056       memcpy(res, c_str(), length());\par
{\bkmkstart AAAAAAAFRF}{\bkmkend AAAAAAAFRF}
00057       res[length()] = 0x0; \par
{\bkmkstart AAAAAAAFRG}{\bkmkend AAAAAAAFRG}
00058       {\cf19 return} res;\par
{\bkmkstart AAAAAAAFRH}{\bkmkend AAAAAAAFRH}
00059     \}\par
{\bkmkstart AAAAAAAFRI}{\bkmkend AAAAAAAFRI}
00060    {\cf17 const} {\cf18 char}*  sstring::toChar() \{\par
{\bkmkstart AAAAAAAFRJ}{\bkmkend AAAAAAAFRJ}
00061          {\cf19 return} c_str();\par
{\bkmkstart AAAAAAAFRK}{\bkmkend AAAAAAAFRK}
00062     \}\par
{\bkmkstart AAAAAAAFRL}{\bkmkend AAAAAAAFRL}
00063    vector<char *>  sstring::tokenize({\cf17 const} {\cf18 char}* pat) \{\par
{\bkmkstart AAAAAAAFRM}{\bkmkend AAAAAAAFRM}
00064       vector<sstring> toks = tokenize({\cf18 string}(pat));\par
{\bkmkstart AAAAAAAFRN}{\bkmkend AAAAAAAFRN}
00065       vector<char *> res(toks.size());\par
{\bkmkstart AAAAAAAFRO}{\bkmkend AAAAAAAFRO}
00066       {\cf19 for} ({\cf18 size_t} i = 0; i < toks.size(); i++) res.at(i) = strdup(toks[i].c_str());\par
{\bkmkstart AAAAAAAFRP}{\bkmkend AAAAAAAFRP}
00067       {\cf19 return} res;\par
{\bkmkstart AAAAAAAFRQ}{\bkmkend AAAAAAAFRQ}
00068     \}\par
{\bkmkstart AAAAAAAFRR}{\bkmkend AAAAAAAFRR}
00069    vector<sstring> sstring::tokenize({\cf18 string} pat) \{\par
{\bkmkstart AAAAAAAFRS}{\bkmkend AAAAAAAFRS}
00070          regex reg(pat);\par
{\bkmkstart AAAAAAAFRT}{\bkmkend AAAAAAAFRT}
00071          sregex_token_iterator iter(begin(), end(), reg, -1);\par
{\bkmkstart AAAAAAAFRU}{\bkmkend AAAAAAAFRU}
00072          sregex_token_iterator end;\par
{\bkmkstart AAAAAAAFRV}{\bkmkend AAAAAAAFRV}
00073          vector<string> vec(iter, end);\par
{\bkmkstart AAAAAAAFRW}{\bkmkend AAAAAAAFRW}
00074          vector<sstring> res;\par
{\bkmkstart AAAAAAAFRX}{\bkmkend AAAAAAAFRX}
00075          {\cf19 for} ({\cf18 size_t} i = 0; i < vec.size(); i++) res.push_back(sstring(vec[i]));\par
{\bkmkstart AAAAAAAFRY}{\bkmkend AAAAAAAFRY}
00076          {\cf19 return} res;\par
{\bkmkstart AAAAAAAFRZ}{\bkmkend AAAAAAAFRZ}
00077     \}\par
{\bkmkstart AAAAAAAFSA}{\bkmkend AAAAAAAFSA}
00078    vector<int>     sstring::tokenizeNumber({\cf17 const} {\cf18 char}* pat) \{\par
{\bkmkstart AAAAAAAFSB}{\bkmkend AAAAAAAFSB}
00079         vector<int> res;\par
{\bkmkstart AAAAAAAFSC}{\bkmkend AAAAAAAFSC}
00080         vector<char *> vec = tokenize(pat);\par
{\bkmkstart AAAAAAAFSD}{\bkmkend AAAAAAAFSD}
00081         {\cf19 for} ({\cf18 string} s : vec) res.push_back(stoi(s));\par
{\bkmkstart AAAAAAAFSE}{\bkmkend AAAAAAAFSE}
00082         {\cf19 return} res;\par
{\bkmkstart AAAAAAAFSF}{\bkmkend AAAAAAAFSF}
00083     \}\par
{\bkmkstart AAAAAAAFSG}{\bkmkend AAAAAAAFSG}
00084    {\cf18 bool} sstring::makeBoolean() \{\par
{\bkmkstart AAAAAAAFSH}{\bkmkend AAAAAAAFSH}
00085         {\cf19 if} (this->length() == 0x0) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAFSI}{\bkmkend AAAAAAAFSI}
00086         {\cf18 char} c = this->at(0);\par
{\bkmkstart AAAAAAAFSJ}{\bkmkend AAAAAAAFSJ}
00087         {\cf19 if} (c == {\cf23 '0'} || c == {\cf23 'n'} || c == {\cf23 'N'} || c == {\cf23 'f'} || c == {\cf23 'F'}) {\cf19 return} {\cf17 false}; \par
{\bkmkstart AAAAAAAFSK}{\bkmkend AAAAAAAFSK}
00088         {\cf19 return} {\cf17 true};\par
{\bkmkstart AAAAAAAFSL}{\bkmkend AAAAAAAFSL}
00089     \}\par
{\bkmkstart AAAAAAAFSM}{\bkmkend AAAAAAAFSM}
00090    {\cf18 bool} sstring::contains ({\cf17 const} {\cf18 char} *pat) \{\par
{\bkmkstart AAAAAAAFSN}{\bkmkend AAAAAAAFSN}
00091         {\cf19 return} (this->toChar(), pat);\par
{\bkmkstart AAAAAAAFSO}{\bkmkend AAAAAAAFSO}
00092     \}\par
{\bkmkstart AAAAAAAFSP}{\bkmkend AAAAAAAFSP}
00093   sstring    sstring::paste({\cf17 const} {\cf18 char} *sep, ...) \{\par
{\bkmkstart AAAAAAAFSQ}{\bkmkend AAAAAAAFSQ}
00094       sstring str = sstring(*{\cf17 this});\par
{\bkmkstart AAAAAAAFSR}{\bkmkend AAAAAAAFSR}
00095       va_list args;\par
{\bkmkstart AAAAAAAFSS}{\bkmkend AAAAAAAFSS}
00096       va_start(args, sep);\par
{\bkmkstart AAAAAAAFST}{\bkmkend AAAAAAAFST}
00097       {\cf18 char} *next = va_arg(args, {\cf18 char} *);\par
{\bkmkstart AAAAAAAFSU}{\bkmkend AAAAAAAFSU}
00098       \par
{\bkmkstart AAAAAAAFSV}{\bkmkend AAAAAAAFSV}
00099       {\cf19 while} (next) \{\par
{\bkmkstart AAAAAAAFSW}{\bkmkend AAAAAAAFSW}
00100          str.append(sep).append(next);\par
{\bkmkstart AAAAAAAFSX}{\bkmkend AAAAAAAFSX}
00101          next = va_arg(args, {\cf18 char} *);\par
{\bkmkstart AAAAAAAFSY}{\bkmkend AAAAAAAFSY}
00102       \}\par
{\bkmkstart AAAAAAAFSZ}{\bkmkend AAAAAAAFSZ}
00103       va_end(args);\par
{\bkmkstart AAAAAAAFTA}{\bkmkend AAAAAAAFTA}
00104       {\cf19 return} str;\par
{\bkmkstart AAAAAAAFTB}{\bkmkend AAAAAAAFTB}
00105   \}\par
{\bkmkstart AAAAAAAFTC}{\bkmkend AAAAAAAFTC}
00106   sstring concat({\cf17 const} {\cf18 char} *sep, ...) \{\par
{\bkmkstart AAAAAAAFTD}{\bkmkend AAAAAAAFTD}
00107       sstring str;\par
{\bkmkstart AAAAAAAFTE}{\bkmkend AAAAAAAFTE}
00108       va_list args;\par
{\bkmkstart AAAAAAAFTF}{\bkmkend AAAAAAAFTF}
00109       va_start(args, sep);\par
{\bkmkstart AAAAAAAFTG}{\bkmkend AAAAAAAFTG}
00110       \par
{\bkmkstart AAAAAAAFTH}{\bkmkend AAAAAAAFTH}
00111       str = sstring(va_arg(args, {\cf18 char} *));\par
{\bkmkstart AAAAAAAFTI}{\bkmkend AAAAAAAFTI}
00112       {\cf18 char} *next = va_arg(args, {\cf18 char} *);\par
{\bkmkstart AAAAAAAFTJ}{\bkmkend AAAAAAAFTJ}
00113       {\cf19 while} (next) \{\par
{\bkmkstart AAAAAAAFTK}{\bkmkend AAAAAAAFTK}
00114          str.append(sep).append(next);\par
{\bkmkstart AAAAAAAFTL}{\bkmkend AAAAAAAFTL}
00115          next = va_arg(args, {\cf18 char} *);\par
{\bkmkstart AAAAAAAFTM}{\bkmkend AAAAAAAFTM}
00116       \}\par
{\bkmkstart AAAAAAAFTN}{\bkmkend AAAAAAAFTN}
00117       va_end(args);\par
{\bkmkstart AAAAAAAFTO}{\bkmkend AAAAAAAFTO}
00118       {\cf19 return} str;\par
{\bkmkstart AAAAAAAFTP}{\bkmkend AAAAAAAFTP}
00119   \}\par
{\bkmkstart AAAAAAAFTQ}{\bkmkend AAAAAAAFTQ}
00120 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
sstring.cpp\par \pard\plain 
{\tc\tcl2 \v old/sstring.cpp}
{\xe \v old/sstring.cpp}
{\bkmkstart AAAAAAAFTR}
{\bkmkend AAAAAAAFTR}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFTS}{\bkmkend AAAAAAAFTS}
00001 {\cf21 #include <cctype>}\par
{\bkmkstart AAAAAAAFTT}{\bkmkend AAAAAAAFTT}
00002 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFTU}{\bkmkend AAAAAAAFTU}
00003 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFTV}{\bkmkend AAAAAAAFTV}
00004 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAFTW}{\bkmkend AAAAAAAFTW}
00005 {\cf21 #include <filesystem>}\par
{\bkmkstart AAAAAAAFTX}{\bkmkend AAAAAAAFTX}
00006 \par
{\bkmkstart AAAAAAAFTY}{\bkmkend AAAAAAAFTY}
00007 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFTZ}{\bkmkend AAAAAAAFTZ}
00008    sstring&     sstring::ltrim() \{\par
{\bkmkstart AAAAAAAFUA}{\bkmkend AAAAAAAFUA}
00009         {\cf18 int} i = 0;\par
{\bkmkstart AAAAAAAFUB}{\bkmkend AAAAAAAFUB}
00010         {\cf19 while} (at(i) == {\cf23 ' '} || at(i) == {\cf23 '\\t'} || at(i) == {\cf23 '\\r'}) i++;\par
{\bkmkstart AAAAAAAFUC}{\bkmkend AAAAAAAFUC}
00011         assign(substr(i));\par
{\bkmkstart AAAAAAAFUD}{\bkmkend AAAAAAAFUD}
00012         {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFUE}{\bkmkend AAAAAAAFUE}
00013      \}\par
{\bkmkstart AAAAAAAFUF}{\bkmkend AAAAAAAFUF}
00014    sstring&     sstring::rtrim() \{\par
{\bkmkstart AAAAAAAFUG}{\bkmkend AAAAAAAFUG}
00015         {\cf18 size_t} i;\par
{\bkmkstart AAAAAAAFUH}{\bkmkend AAAAAAAFUH}
00016         {\cf18 bool} done = {\cf17 false};\par
{\bkmkstart AAAAAAAFUI}{\bkmkend AAAAAAAFUI}
00017         {\cf19 for} (i = this->length() - 1; i > -1; i--) \{\par
{\bkmkstart AAAAAAAFUJ}{\bkmkend AAAAAAAFUJ}
00018              {\cf19 switch}(at(i)) \{\par
{\bkmkstart AAAAAAAFUK}{\bkmkend AAAAAAAFUK}
00019                 {\cf19 case} {\cf23 ' '}:\par
{\bkmkstart AAAAAAAFUL}{\bkmkend AAAAAAAFUL}
00020                 {\cf19 case} {\cf23 '\\t'}: \par
{\bkmkstart AAAAAAAFUM}{\bkmkend AAAAAAAFUM}
00021                 {\cf19 case} {\cf23 '\\r'}:\par
{\bkmkstart AAAAAAAFUN}{\bkmkend AAAAAAAFUN}
00022                 {\cf19 case} {\cf23 '\\n'}: {\cf19 break};\par
{\bkmkstart AAAAAAAFUO}{\bkmkend AAAAAAAFUO}
00023                 {\cf19 default}: done = {\cf17 true};\par
{\bkmkstart AAAAAAAFUP}{\bkmkend AAAAAAAFUP}
00024              \}\par
{\bkmkstart AAAAAAAFUQ}{\bkmkend AAAAAAAFUQ}
00025              {\cf19 if} (done) {\cf19 break};\par
{\bkmkstart AAAAAAAFUR}{\bkmkend AAAAAAAFUR}
00026         \}\par
{\bkmkstart AAAAAAAFUS}{\bkmkend AAAAAAAFUS}
00027         assign(substr(0, i));\par
{\bkmkstart AAAAAAAFUT}{\bkmkend AAAAAAAFUT}
00028         {\cf19 return} *{\cf17 this};     \par
{\bkmkstart AAAAAAAFUU}{\bkmkend AAAAAAAFUU}
00029    \}\par
{\bkmkstart AAAAAAAFUV}{\bkmkend AAAAAAAFUV}
00030    sstring&     sstring::trim() \{\par
{\bkmkstart AAAAAAAFUW}{\bkmkend AAAAAAAFUW}
00031          {\cf19 return} ltrim().rtrim();\par
{\bkmkstart AAAAAAAFUX}{\bkmkend AAAAAAAFUX}
00032      \}\par
{\bkmkstart AAAAAAAFUY}{\bkmkend AAAAAAAFUY}
00033    sstring&     sstring::toUpper() \{\par
{\bkmkstart AAAAAAAFUZ}{\bkmkend AAAAAAAFUZ}
00034       {\cf19 for} ({\cf18 size_t} i = 0; i < length(); i++) at(i) = toupper(at(i));\par
{\bkmkstart AAAAAAAFVA}{\bkmkend AAAAAAAFVA}
00035       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFVB}{\bkmkend AAAAAAAFVB}
00036    \}\par
{\bkmkstart AAAAAAAFVC}{\bkmkend AAAAAAAFVC}
00037    sstring&     sstring::toLower() \{\par
{\bkmkstart AAAAAAAFVD}{\bkmkend AAAAAAAFVD}
00038       {\cf19 for} ({\cf18 size_t} i = 0; i < length(); i++) at(i) = tolower(at(i));\par
{\bkmkstart AAAAAAAFVE}{\bkmkend AAAAAAAFVE}
00039       {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAFVF}{\bkmkend AAAAAAAFVF}
00040    \}\par
{\bkmkstart AAAAAAAFVG}{\bkmkend AAAAAAAFVG}
00041    sstring*     sstring::toString() \{\par
{\bkmkstart AAAAAAAFVH}{\bkmkend AAAAAAAFVH}
00042          {\cf19 return} {\cf17 new} sstring(*{\cf17 this});\par
{\bkmkstart AAAAAAAFVI}{\bkmkend AAAAAAAFVI}
00043     \}\par
{\bkmkstart AAAAAAAFVJ}{\bkmkend AAAAAAAFVJ}
00044    {\cf18 char}*        sstring::toArr() \{\par
{\bkmkstart AAAAAAAFVK}{\bkmkend AAAAAAAFVK}
00045       {\cf18 char} *res = 0x0;\par
{\bkmkstart AAAAAAAFVL}{\bkmkend AAAAAAAFVL}
00046       res = ({\cf18 char} *) malloc(length() + 1);\par
{\bkmkstart AAAAAAAFVM}{\bkmkend AAAAAAAFVM}
00047       {\cf19 if} (res == 0x0) \{\par
{\bkmkstart AAAAAAAFVN}{\bkmkend AAAAAAAFVN}
00048           errno = ENOMEM;\par
{\bkmkstart AAAAAAAFVO}{\bkmkend AAAAAAAFVO}
00049           {\cf19 return} 0x0;\par
{\bkmkstart AAAAAAAFVP}{\bkmkend AAAAAAAFVP}
00050       \}\par
{\bkmkstart AAAAAAAFVQ}{\bkmkend AAAAAAAFVQ}
00051       memcpy(res, c_str(), length());\par
{\bkmkstart AAAAAAAFVR}{\bkmkend AAAAAAAFVR}
00052       res[length()] = 0x0; \par
{\bkmkstart AAAAAAAFVS}{\bkmkend AAAAAAAFVS}
00053       {\cf19 return} res;\par
{\bkmkstart AAAAAAAFVT}{\bkmkend AAAAAAAFVT}
00054     \}\par
{\bkmkstart AAAAAAAFVU}{\bkmkend AAAAAAAFVU}
00055    sstring*     sstring::makeLower() \{\par
{\bkmkstart AAAAAAAFVV}{\bkmkend AAAAAAAFVV}
00056       sstring *str = {\cf17 new} sstring(*{\cf17 this});\par
{\bkmkstart AAAAAAAFVW}{\bkmkend AAAAAAAFVW}
00057       str->toLower();\par
{\bkmkstart AAAAAAAFVX}{\bkmkend AAAAAAAFVX}
00058       {\cf19 return} str;\par
{\bkmkstart AAAAAAAFVY}{\bkmkend AAAAAAAFVY}
00059    \}\par
{\bkmkstart AAAAAAAFVZ}{\bkmkend AAAAAAAFVZ}
00060    sstring*     sstring::makeUpper() \{\par
{\bkmkstart AAAAAAAFWA}{\bkmkend AAAAAAAFWA}
00061       sstring *str = {\cf17 new} sstring(*{\cf17 this});\par
{\bkmkstart AAAAAAAFWB}{\bkmkend AAAAAAAFWB}
00062       str->toUpper();\par
{\bkmkstart AAAAAAAFWC}{\bkmkend AAAAAAAFWC}
00063       {\cf19 return} str;\par
{\bkmkstart AAAAAAAFWD}{\bkmkend AAAAAAAFWD}
00064    \}\par
{\bkmkstart AAAAAAAFWE}{\bkmkend AAAAAAAFWE}
00065    {\cf17 const} {\cf18 char}*  sstring::toChar() \{\par
{\bkmkstart AAAAAAAFWF}{\bkmkend AAAAAAAFWF}
00066          {\cf19 return} c_str();\par
{\bkmkstart AAAAAAAFWG}{\bkmkend AAAAAAAFWG}
00067     \}\par
{\bkmkstart AAAAAAAFWH}{\bkmkend AAAAAAAFWH}
00068 \par
{\bkmkstart AAAAAAAFWI}{\bkmkend AAAAAAAFWI}
00069    vector<char *>  sstring::tokenize({\cf17 const} {\cf18 char}* pat) \{\par
{\bkmkstart AAAAAAAFWJ}{\bkmkend AAAAAAAFWJ}
00070       vector<sstring> toks = tokenize({\cf18 string}(pat));\par
{\bkmkstart AAAAAAAFWK}{\bkmkend AAAAAAAFWK}
00071       vector<char *> res(toks.size());\par
{\bkmkstart AAAAAAAFWL}{\bkmkend AAAAAAAFWL}
00072       {\cf19 for} ({\cf18 size_t} i = 0; i < toks.size(); i++) res.at(i) = ({\cf18 char} *) toks[i].c_str();\par
{\bkmkstart AAAAAAAFWM}{\bkmkend AAAAAAAFWM}
00073       {\cf19 return} res;\par
{\bkmkstart AAAAAAAFWN}{\bkmkend AAAAAAAFWN}
00074     \}\par
{\bkmkstart AAAAAAAFWO}{\bkmkend AAAAAAAFWO}
00075    vector<sstring> sstring::tokenize({\cf18 string} pat) \{\par
{\bkmkstart AAAAAAAFWP}{\bkmkend AAAAAAAFWP}
00076          regex reg(pat);\par
{\bkmkstart AAAAAAAFWQ}{\bkmkend AAAAAAAFWQ}
00077          sregex_token_iterator iter(begin(), end(), reg, -1);\par
{\bkmkstart AAAAAAAFWR}{\bkmkend AAAAAAAFWR}
00078          sregex_token_iterator end;\par
{\bkmkstart AAAAAAAFWS}{\bkmkend AAAAAAAFWS}
00079          vector<string> vec(iter, end);\par
{\bkmkstart AAAAAAAFWT}{\bkmkend AAAAAAAFWT}
00080          vector<sstring> res;\par
{\bkmkstart AAAAAAAFWU}{\bkmkend AAAAAAAFWU}
00081          {\cf19 for} ({\cf18 size_t} i = 0; i < vec.size(); i++) res.push_back(sstring(vec[i]));\par
{\bkmkstart AAAAAAAFWV}{\bkmkend AAAAAAAFWV}
00082          {\cf19 return} vector<sstring>();\par
{\bkmkstart AAAAAAAFWW}{\bkmkend AAAAAAAFWW}
00083     \}\par
{\bkmkstart AAAAAAAFWX}{\bkmkend AAAAAAAFWX}
00084    {\cf18 bool} sstring::makeBoolean() \{\par
{\bkmkstart AAAAAAAFWY}{\bkmkend AAAAAAAFWY}
00085         {\cf19 if} (this->length() == 0x0) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAFWZ}{\bkmkend AAAAAAAFWZ}
00086         {\cf18 char} c = this->at(0);\par
{\bkmkstart AAAAAAAFXA}{\bkmkend AAAAAAAFXA}
00087         {\cf19 if} (c == {\cf23 '0'} || c == {\cf23 'n'} || c == {\cf23 'N'} || c == {\cf23 'f'} || c == {\cf23 'F'}) {\cf19 return} {\cf17 false}; \par
{\bkmkstart AAAAAAAFXB}{\bkmkend AAAAAAAFXB}
00088         {\cf19 return} {\cf17 true};\par
{\bkmkstart AAAAAAAFXC}{\bkmkend AAAAAAAFXC}
00089     \}\par
{\bkmkstart AAAAAAAFXD}{\bkmkend AAAAAAAFXD}
00090     {\cf18 bool} sstring::contains ({\cf17 const} {\cf18 char} *pat) \{\par
{\bkmkstart AAAAAAAFXE}{\bkmkend AAAAAAAFXE}
00091       smatch p = string(pat);\par
{\bkmkstart AAAAAAAFXF}{\bkmkend AAAAAAAFXF}
00092       regex e ({\cf22 "\\\\b(sub)([^ ]*)"});   {\cf20 // matches words beginning by}\par
{\bkmkstart AAAAAAAFXG}{\bkmkend AAAAAAAFXG}
00093       {\cf19 if} (regex_search(this->c_str(), pat)) {\cf19 return} {\cf17 true};\par
{\bkmkstart AAAAAAAFXH}{\bkmkend AAAAAAAFXH}
00094       {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAAFXI}{\bkmkend AAAAAAAFXI}
00095     \}\par
{\bkmkstart AAAAAAAFXJ}{\bkmkend AAAAAAAFXJ}
00096 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
time.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/time.cpp}
{\xe \v code/src/time.cpp}
{\bkmkstart AAAAAAAFXK}
{\bkmkend AAAAAAAFXK}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFXL}{\bkmkend AAAAAAAFXL}
00001 {\cf21 #include "time.hpp"}\par
{\bkmkstart AAAAAAAFXM}{\bkmkend AAAAAAAFXM}
00002 {\cf21 #include <time.h>}\par
{\bkmkstart AAAAAAAFXN}{\bkmkend AAAAAAAFXN}
00003 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAAFXO}{\bkmkend AAAAAAAFXO}
00004 \par
{\bkmkstart AAAAAAAFXP}{\bkmkend AAAAAAAFXP}
00005 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFXQ}{\bkmkend AAAAAAAFXQ}
00006 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFXR}{\bkmkend AAAAAAAFXR}
00007 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFXS}{\bkmkend AAAAAAAFXS}
00008 \par
{\bkmkstart AAAAAAAFXT}{\bkmkend AAAAAAAFXT}
00009 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFXU}{\bkmkend AAAAAAAFXU}
00010 {\cf21 #include "sstring.hpp"}\par
{\bkmkstart AAAAAAAFXV}{\bkmkend AAAAAAAFXV}
00011 {\cf21 #include "time.hpp"}\par
{\bkmkstart AAAAAAAFXW}{\bkmkend AAAAAAAFXW}
00012 \par
{\bkmkstart AAAAAAAFXX}{\bkmkend AAAAAAAFXX}
00013 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFXY}{\bkmkend AAAAAAAFXY}
00014    Time::Time({\cf18 string} str)      \{ Time(str.c_str());     \}\par
{\bkmkstart AAAAAAAFXZ}{\bkmkend AAAAAAAFXZ}
00015    Time::Time({\cf17 const} {\cf18 char} *str) \{ dtb.validateTime(str); \}\par
{\bkmkstart AAAAAAAFYA}{\bkmkend AAAAAAAFYA}
00016    Time::Time({\cf17 const} Time& src) \{ dtb = src.dtb;         \}\par
{\bkmkstart AAAAAAAFYB}{\bkmkend AAAAAAAFYB}
00017 \par
{\bkmkstart AAAAAAAFYC}{\bkmkend AAAAAAAFYC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYD" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
    {\cf17 struct }tm*  Time::getTM   ()                \{ {\cf19 return} dtb.getTM(); \}\par
{\bkmkstart AAAAAAAFYE}{\bkmkend AAAAAAAFYE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYF" }{}}{\fldrslt {\cs37\ul\cf2 00019}}}
    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     Time::toString({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} dtb.format(fmt);         \}\par
{\bkmkstart AAAAAAAFYG}{\bkmkend AAAAAAAFYG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFYH" }{}}{\fldrslt {\cs37\ul\cf2 00020}}}
    {\cf17 const} {\cf18 char}* Time::toChar  ({\cf17 const} {\cf18 char} *fmt) \{ {\cf19 return} dtb.format(fmt).c_str(); \}\par
{\bkmkstart AAAAAAAFYI}{\bkmkend AAAAAAAFYI}
00021 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
timestamp.cpp\par \pard\plain 
{\tc\tcl2 \v code/src/timestamp.cpp}
{\xe \v code/src/timestamp.cpp}
{\bkmkstart AAAAAAAFYJ}
{\bkmkend AAAAAAAFYJ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFYK}{\bkmkend AAAAAAAFYK}
00001 {\cf21 #include <time.h>}\par
{\bkmkstart AAAAAAAFYL}{\bkmkend AAAAAAAFYL}
00002 \par
{\bkmkstart AAAAAAAFYM}{\bkmkend AAAAAAAFYM}
00003 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFYN}{\bkmkend AAAAAAAFYN}
00004 {\cf21    #include "sys/timeb.h"}\par
{\bkmkstart AAAAAAAFYO}{\bkmkend AAAAAAAFYO}
00005 {\cf21 #else}\par
{\bkmkstart AAAAAAAFYP}{\bkmkend AAAAAAAFYP}
00006 {\cf21    #include <sys/time.h>}\par
{\bkmkstart AAAAAAAFYQ}{\bkmkend AAAAAAAFYQ}
00007 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFYR}{\bkmkend AAAAAAAFYR}
00008 \par
{\bkmkstart AAAAAAAFYS}{\bkmkend AAAAAAAFYS}
00009 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAFYT}{\bkmkend AAAAAAAFYT}
00010 {\cf21 #pragma warning( disable : 4996 )}\par
{\bkmkstart AAAAAAAFYU}{\bkmkend AAAAAAAFYU}
00011 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFYV}{\bkmkend AAAAAAAFYV}
00012 {\cf21 #include "config.h"}\par
{\bkmkstart AAAAAAAFYW}{\bkmkend AAAAAAAFYW}
00013 \par
{\bkmkstart AAAAAAAFYX}{\bkmkend AAAAAAAFYX}
00014 {\cf21 #include "jggtools.hpp"}\par
{\bkmkstart AAAAAAAFYY}{\bkmkend AAAAAAAFYY}
00015 {\cf21 #include "timestamp.hpp"}\par
{\bkmkstart AAAAAAAFYZ}{\bkmkend AAAAAAAFYZ}
00016 \par
{\bkmkstart AAAAAAAFZA}{\bkmkend AAAAAAAFZA}
00017 {\cf17 namespace }NST \{\par
{\bkmkstart AAAAAAAFZB}{\bkmkend AAAAAAAFZB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZC" }{}}{\fldrslt {\cs37\ul\cf2 00018}}}
    Timestamp::Timestamp() : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
() \{\par
{\bkmkstart AAAAAAAFZD}{\bkmkend AAAAAAAFZD}
00019       uSec++;\par
{\bkmkstart AAAAAAAFZE}{\bkmkend AAAAAAAFZE}
00020 {\cf21 #ifndef _WIN32}\par
{\bkmkstart AAAAAAAFZF}{\bkmkend AAAAAAAFZF}
00021       {\cf17 struct }timeval mTimeval;\par
{\bkmkstart AAAAAAAFZG}{\bkmkend AAAAAAAFZG}
00022       gettimeofday (&mTimeval, NULL);\par
{\bkmkstart AAAAAAAFZH}{\bkmkend AAAAAAAFZH}
00023       uSec = mtimeVal.tv_usec\par
{\bkmkstart AAAAAAAFZI}{\bkmkend AAAAAAAFZI}
00024 {\cf21 #endif}\par
{\bkmkstart AAAAAAAFZJ}{\bkmkend AAAAAAAFZJ}
00025    \}\par
{\bkmkstart AAAAAAAFZK}{\bkmkend AAAAAAAFZK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZL" }{}}{\fldrslt {\cs37\ul\cf2 00026}}}
    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZC" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp::Timestamp}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
     str) : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
(str) \{ uSec++; \}\par
{\bkmkstart AAAAAAAFZM}{\bkmkend AAAAAAAFZM}
00027    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZC" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp::Timestamp}}}
({\cf17 const} {\cf18 char}* str) : {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAADH" }{}}{\fldrslt {\cs37\ul\cf2 DateTime}}}
(str) \{ uSec++; \}\par
{\bkmkstart AAAAAAAFZN}{\bkmkend AAAAAAAFZN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZO" }{}}{\fldrslt {\cs37\ul\cf2 00028}}}
       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZO" }{}}{\fldrslt {\cs37\ul\cf2 Timestamp::toString}}}
() \{ \par
{\bkmkstart AAAAAAAFZP}{\bkmkend AAAAAAAFZP}
00029           {\cf18 char} buff[27];\par
{\bkmkstart AAAAAAAFZQ}{\bkmkend AAAAAAAFZQ}
00030 {\cf20 //          sprintf(buff, "%s-%s.%06d", mDate.toChar(), mTime.toChar(), uSec);}\par
{\bkmkstart AAAAAAAFZR}{\bkmkend AAAAAAAFZR}
00031           {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAACD" }{}}{\fldrslt {\cs37\ul\cf2 sstring}}}
(buff);\par
{\bkmkstart AAAAAAAFZS}{\bkmkend AAAAAAAFZS}
00032       \}\par
{\bkmkstart AAAAAAAFZT}{\bkmkend AAAAAAAFZT}
00033 {\cf20 //      Date   Timestamp::getDate() \{ return mDate; \}}\par
{\bkmkstart AAAAAAAFZU}{\bkmkend AAAAAAAFZU}
00034 {\cf20 //      Time   Timestamp::getTime()  \{ return mTime; \}}\par
{\bkmkstart AAAAAAAFZV}{\bkmkend AAAAAAAFZV}
00035 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
filesystem.cpp\par \pard\plain 
{\tc\tcl2 \v old/filesystem.cpp}
{\xe \v old/filesystem.cpp}
{\bkmkstart AAAAAAAFZW}
{\bkmkend AAAAAAAFZW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid }
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
filesystem.hpp\par \pard\plain 
{\tc\tcl2 \v old/filesystem.hpp}
{\xe \v old/filesystem.hpp}
{\bkmkstart AAAAAAAFZX}
{\bkmkend AAAAAAAFZX}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid }
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
simpl.cpp\par \pard\plain 
{\tc\tcl2 \v old/simpl.cpp}
{\xe \v old/simpl.cpp}
{\bkmkstart AAAAAAAFZY}
{\bkmkend AAAAAAAFZY}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAFZZ}{\bkmkend AAAAAAAFZZ}
00001 {\cf21 #include "type_traits"}\par
{\bkmkstart AAAAAAAGAA}{\bkmkend AAAAAAAGAA}
00002 \par
{\bkmkstart AAAAAAAGAB}{\bkmkend AAAAAAAGAB}
00003 {\cf17 namespace }spimpl \{\par
{\bkmkstart AAAAAAAGAC}{\bkmkend AAAAAAAGAC}
00004     {\cf17 namespace }details \{\par
{\bkmkstart AAAAAAAGAD}{\bkmkend AAAAAAAGAD}
00005         {\cf17 template}<{\cf17 class} T>\par
{\bkmkstart AAAAAAAGAE}{\bkmkend AAAAAAAGAE}
00006         {\cf18 void} default_delete(T *p) {\cf17 noexcept} \{\par
{\bkmkstart AAAAAAAGAF}{\bkmkend AAAAAAAGAF}
00007             {\cf17 static_assert}({\cf17 sizeof}(T) > 0, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAAGAG}{\bkmkend AAAAAAAGAG}
00008             {\cf17 static_assert}(!std::is_void<T>::value, {\cf22 "default_delete cannot delete incomplete type"});\par
{\bkmkstart AAAAAAAGAH}{\bkmkend AAAAAAAGAH}
00009             {\cf17 delete} p;\par
{\bkmkstart AAAAAAAGAI}{\bkmkend AAAAAAAGAI}
00010         \}\par
{\bkmkstart AAAAAAAGAJ}{\bkmkend AAAAAAAGAJ}
00011     \}\par
{\bkmkstart AAAAAAAGAK}{\bkmkend AAAAAAAGAK}
00012     \par
{\bkmkstart AAAAAAAGAL}{\bkmkend AAAAAAAGAL}
00013     {\cf20 // Pointer to unique implementation}\par
{\bkmkstart AAAAAAAGAM}{\bkmkend AAAAAAAGAM}
00014     {\cf17 template}<{\cf17 class} T, {\cf17 class} Deleter = {\cf18 void}(*)(T*)>\par
{\bkmkstart AAAAAAAGAN}{\bkmkend AAAAAAAGAN}
00015     {\cf17 using} unique_impl_ptr = std::unique_ptr<T, Deleter>;\par
{\bkmkstart AAAAAAAGAO}{\bkmkend AAAAAAAGAO}
00016 \par
{\bkmkstart AAAAAAAGAP}{\bkmkend AAAAAAAGAP}
00017     {\cf20 // Constructs an object of type T and wraps it and related default deleter in `unique_impl_ptr`}\par
{\bkmkstart AAAAAAAGAQ}{\bkmkend AAAAAAAGAQ}
00018     {\cf17 template}<{\cf17 class }T, {\cf17 class}... Args>\par
{\bkmkstart AAAAAAAGAR}{\bkmkend AAAAAAAGAR}
00019     {\cf17 inline} unique_impl_ptr<T> make_unique_impl(Args&&... args) \{\par
{\bkmkstart AAAAAAAGAS}{\bkmkend AAAAAAAGAS}
00020         {\cf17 static_assert}(!std::is_array<T>::value, {\cf22 "unique_impl_ptr does not support arrays"});\par
{\bkmkstart AAAAAAAGAT}{\bkmkend AAAAAAAGAT}
00021 \par
{\bkmkstart AAAAAAAGAU}{\bkmkend AAAAAAAGAU}
00022         {\cf19 return} unique_impl_ptr<T>(\par
{\bkmkstart AAAAAAAGAV}{\bkmkend AAAAAAAGAV}
00023             {\cf17 new} T(std::forward<Args>(args)...),\par
{\bkmkstart AAAAAAAGAW}{\bkmkend AAAAAAAGAW}
00024             &details::default_delete<T>);\par
{\bkmkstart AAAAAAAGAX}{\bkmkend AAAAAAAGAX}
00025     \}\par
{\bkmkstart AAAAAAAGAY}{\bkmkend AAAAAAAGAY}
00026 \}\par
{\bkmkstart AAAAAAAGAZ}{\bkmkend AAAAAAAGAZ}
00027 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
strings.h\par \pard\plain 
{\tc\tcl2 \v old/strings.h}
{\xe \v old/strings.h}
{\bkmkstart AAAAAAAGBA}
{\bkmkend AAAAAAAGBA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAGBB}{\bkmkend AAAAAAAGBB}
00001 {\cf20 /*}\par
{\bkmkstart AAAAAAAGBC}{\bkmkend AAAAAAAGBC}
00002 {\cf20     char*             ltrim(char* str);}\par
{\bkmkstart AAAAAAAGBD}{\bkmkend AAAAAAAGBD}
00003 {\cf20     char*             rtrim(char* str);}\par
{\bkmkstart AAAAAAAGBE}{\bkmkend AAAAAAAGBE}
00004 {\cf20     char*             trim(char* str);}\par
{\bkmkstart AAAAAAAGBF}{\bkmkend AAAAAAAGBF}
00005 {\cf20 void tokenizeFree(void **ptr);}\par
{\bkmkstart AAAAAAAGBG}{\bkmkend AAAAAAAGBG}
00006 {\cf20 char** tokenize(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAGBH}{\bkmkend AAAAAAAGBH}
00007 {\cf20 int** tokenizeNumber(const char* src, const char* pat);}\par
{\bkmkstart AAAAAAAGBI}{\bkmkend AAAAAAAGBI}
00008 {\cf20 }\par
{\bkmkstart AAAAAAAGBJ}{\bkmkend AAAAAAAGBJ}
00009 {\cf20 */}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
