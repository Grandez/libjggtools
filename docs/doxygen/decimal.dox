/** 
   \class jggtools::Decimal
   \ingroup number
   \brief Decimal numbers
   
   A Decimal number is **NOT** a float. Is a number with an integer part and an fractional/decimal part
*/

/** 
   @fn Decimal::Decimal(sstring value)
   \brief Constructor from and string
 
*/
/** 
   @fn Decimal::Decimal(const char *value)
   \brief Constructor from and array of char
 
*/
/** 
   @fn Decimal::Decimal(float value)
   \brief Constructor from an float
*/
/** 
   @fn Decimal::Decimal(double value)
   \brief Constructor from an double
*/
/** 
   @fn Decimal::Decimal(long double value)
   \brief Constructor from an long double
*/
/** 
   @fn Decimal::Decimal(int value)
   \brief Constructor from an long double
*/
/** 
   @fn Decimal::Decimal(long value)
   \brief Constructor from an long 
*/
/** 
   @fn Decimal::Decimal(long long value)
   \brief Constructor from an long long 
*/
/** 
   @fn Decimal::toString()
   \return The rstring rerepsentation of Decimal
*/
/** 
   @fn Decimal::toChar()
   \return **a new char array** rerepsentating the Decimal
*/
/** 
   @fn Decimal::toStringRounded(int scale)
   \param scale number or decimals. **Default: 0**
   \return an string representing the decimal rounded to scale
*/
/** 
   @fn Decimal::toCharRounded(int scale)
   \param scale number or decimals. **Default: 0**
   \return a **new char array** representing the decimal rounded to scale
*/
/** 
   @fn Decimal::toFloat()
   \return The decimal value as float 
*/
/** 
   @fn Decimal::toDouble()
   \return The decimal value as double
*/
/** 
   @fn Decimal::toLongDouble()
   \return The decimal value as long double
*/
/** 
   @fn Decimal::toFloor()
   \return the largest integral value that is not greater than Decimal.
*/
/** 
   @fn Decimal::toCeil()
   \return The smallest integral value that is not less than Decimal
*/
/** 
   @fn Decimal::round(int scale)
   \param scale number of decimal digits. **Default: 0**
   \return A decimal rounded to nth scale.
   
*/
/** 
   @fn Decimal::operator+(const Decimal& )
   Add decimal to left decimal
   \param Decimal to add
   \return A new decimal 
*/
/** 
   @fn Decimal::operator-(const Decimal& )
   Subtract from decimal to left decimal
   \param Decimal to subtract
   \return A new decimal 
*/
/** 
   @fn Decimal::operator*(const Decimal& )
   Multiply decimal to left decimal
   \param Decimal to multiply
   \return A new decimal 
*/
/** 
   @fn Decimal::operator/(const Decimal& )
   Divide decimal from left decimal
   \param Decimal to divide
   \return A new decimal 
*/
/** 
   @fn Decimal::operator+=(const Decimal& )
   Add Decimal to left decimal
   \param Decimal to add
   \return the left side decimal
*/
/** 
   @fn Decimal::operator+=(const Decimal& )
   Subtract Decimal from left decimal
   \param Decimal to subtract
   \return the left side decimal
*/
/** 
   @fn Decimal::operator*=(const Decimal& )
   Multiply Decimal to left decimal
   \param Decimal to mulitply
   \return the left side decimal
*/

/** 
   @fn Decimal::operator/=(const Decimal& )
   Divide Decimal from left decimal
   \param Decimal to divide
   \return the left side decimal
*/

/** 
   @fn Decimal::operator==(const Decimal& )
   Check if decimals are equal
   \param Decimal to compare
   \return TRUE if equal
*/
/** 
   @fn Decimal::operator!=(const Decimal& )
   Check if decimals are not equal
   \param Decimal to compare
   \return TRUE if not equal
*/
/** 
   @fn Decimal::operator<(const Decimal& )
   Check if decimals is less than
   \param Decimal to compare
   \return TRUE if less
*/
/** 
   @fn Decimal::operator<=(const Decimal& )
   Check if decimals is less or equal than
   \param Decimal to compare
   \return TRUE if less or equal
*/
/** 
   @fn Decimal::operator>(const Decimal& )
   Check if decimals is greater than
   \param Decimal to compare
   \return TRUE if greater
*/
/** 
   @fn Decimal::operator>=(const Decimal& )
   Check if decimals is greater or equal than
   \param Decimal to compare
   \return TRUE if greater or equal
*/
